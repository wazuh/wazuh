name: Engine Standalone

on:
  # Triggers the workflow on demand
  workflow_dispatch:
    inputs:
      wazuh-branch:
        description: 'Wazuh branch'
        required: false
        type: string
        default: 'main'

      build-type:
        type: choice
        description: 'Choose the CMake build type'
        required: false
        default: 'release'
        options:
          - debug
          - release

  # Triggers the workflow on pull request but only changes in the src/engine/ directory.
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
    paths:
      - 'src/engine/**'

# Ensures only one instance of this workflow is running per PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  ENGINE_DIR: ${{github.workspace}}/src/engine
  ENGINE_STANDALONE_DIR: wazuh-engine-standalone
  ENGINE_STANDALONE_SOCKET: wazuh-engine-standalone/sockets/engine-api.sock
  WAZUH_BRANCH: ${{ github.event.inputs.wazuh-branch || 'main' }}
  BUILD_TYPE: ${{ github.event.inputs.build-type || 'release' }}

jobs:
  build:
    name: Build Server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || env.WAZUH_BRANCH }}

      - name: Set tag and container name
        run: |
          VERSION="$(grep '"version"' $GITHUB_WORKSPACE/VERSION.json | sed -E 's/.*"version": *"([^"]+)".*/\1/')"
          echo "TAG=$VERSION" >> $GITHUB_ENV;
          echo "CONTAINER_NAME=pkg_rpm_manager_builder_amd64" >> $GITHUB_ENV;

      - name: Download docker image for package building
        run: |
          bash $GITHUB_WORKSPACE/.github/actions/ghcr-pull-and-push/pull_image_from_ghcr.sh ${{ secrets.GITHUB_TOKEN }} ${{ github.actor}} ${CONTAINER_NAME} ${TAG}

      - name: Build wazuh-engine in container
        run: |
          sed -i "s/option(ENGINE_ENABLE_REVERSE_ORDER_DECODERS_FEATURE \\\"Enable reverse order decoders\\\" OFF)/option(ENGINE_ENABLE_REVERSE_ORDER_DECODERS_FEATURE \\\"Enable reverse order decoders\\\" ON)/" src/engine/CMakeLists.txt
          docker run --entrypoint /workspace/wazuh/src/engine/standalone/docker-entrypoint.sh \
            -e BUILD_TYPE="${BUILD_TYPE}" \
            -t -v ${{github.workspace}}:/workspace/wazuh:Z \
            -v ${{github.workspace}}/packages/output:/var/local/wazuh:Z \
            ${CONTAINER_NAME}:${TAG}

      - name: Upload engine binary
        uses: actions/upload-artifact@v4
        with:
          name: wazuh-engine
          path: src/build/engine/wazuh-engine

      - name: Upload wazuh shared libraries
        uses: actions/upload-artifact@v4
        with:
          name: wazuh-shared-libraries
          path: |
            src/libwazuhext.so
            src/libwazuhshared.so

      - name: Upload rocksdb shared libraries
        uses: actions/upload-artifact@v4
        with:
          name: rocksdb-shared-library
          path: |
            src/external/rocksdb/build/librocksdb.so
            src/external/rocksdb/build/librocksdb.so.8
            src/external/rocksdb/build/librocksdb.so.8.3.2

  create_standalone_zip:
    name: Create standalone compressed engine

    # Only runs if the PR status is different to Draft
    if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 60

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Download engine binary
      uses: actions/download-artifact@v4
      with:
        name: wazuh-engine
        path: src/build/engine/

    - name: Download rocksdb shared libraries
      uses: actions/download-artifact@v4
      with:
        name: rocksdb-shared-library
        path: src/external/rocksdb/build/

    - name: Download wazuh shared libraries
      uses: actions/download-artifact@v4
      with:
        name: wazuh-shared-libraries
        path: src/

    - name: Create tar scaffolding and copy files
      run: |
        mkdir auxiliar_dir
        cd auxiliar_dir
        install -d -m 770 \
          wazuh-engine-standalone/bin/lib \
          wazuh-engine-standalone/default-security-policy \
          wazuh-engine-standalone/data/store/schema \
          wazuh-engine-standalone/data/store/schema/engine-schema \
          wazuh-engine-standalone/data/store/schema/wazuh-logpar-overrides \
          wazuh-engine-standalone/data/store/schema/allowed-fields \
          wazuh-engine-standalone/data/kvdb \
          wazuh-engine-standalone/data/tzdb \
          wazuh-engine-standalone/schemas \
          wazuh-engine-standalone/logs \
          wazuh-engine-standalone/sockets
        touch wazuh-engine-standalone/bin/lib/.keep
        touch wazuh-engine-standalone/default-security-policy/.keep
        touch wazuh-engine-standalone/data/kvdb/.keep
        touch wazuh-engine-standalone/data/tzdb/.keep
        touch wazuh-engine-standalone/logs/.keep
        touch wazuh-engine-standalone/sockets/.keep
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/engine-schema.json wazuh-engine-standalone/data/store/schema/engine-schema/0
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/wazuh-logpar-overrides.json  wazuh-engine-standalone/data/store/schema/wazuh-logpar-overrides/0
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/allowed-fields.json  wazuh-engine-standalone/data/store/schema/allowed-fields/0
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/fields_decoder.json wazuh-engine-standalone/schemas/
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/fields_rule.json  wazuh-engine-standalone/schemas/
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/wazuh-decoders.json  wazuh-engine-standalone/schemas/
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/wazuh-rules.json  wazuh-engine-standalone/schemas/
        cp -r ${{ env.ENGINE_DIR }}/ruleset/schemas/wazuh-filters.json  wazuh-engine-standalone/schemas/
        cp -r ${{ env.ENGINE_DIR }}/standalone/run_engine.sh wazuh-engine-standalone/
        chmod +x wazuh-engine-standalone/run_engine.sh
        cp ${{ env.ENGINE_DIR }}/standalone/README.md wazuh-engine-standalone/
        cp ${{github.workspace}}/src/external/rocksdb/build/librocksdb.so.8 wazuh-engine-standalone/bin/lib
        cp ${{github.workspace}}/src/libwazuhext.so wazuh-engine-standalone/bin/lib
        cp ${{github.workspace}}/src/build/engine/wazuh-engine wazuh-engine-standalone/bin/
        chmod +x wazuh-engine-standalone/bin/wazuh-engine
        cd ..

    - name: Set version
      run: |
        VERSION="$(grep '"version"' $GITHUB_WORKSPACE/VERSION.json | sed -E 's/.*"version": *"([^"]+)".*/\1/')"
        echo "TAG=$VERSION" >> $GITHUB_ENV;

    - name: Upload compressed tar file
      uses: actions/upload-artifact@v4
      with:
        name: wazuh-engine-${{ env.TAG }}-standalone
        path: auxiliar_dir
        include-hidden-files: true

  check_standalone_engine:
    name: Test standalone engine

    runs-on: ubuntu-latest
    needs: create_standalone_zip
    timeout-minutes: 60

    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Set version
      run: |
        VERSION="$(grep '"version"' $GITHUB_WORKSPACE/VERSION.json | sed -E 's/.*"version": *"([^"]+)".*/\1/')"
        echo "TAG=$VERSION" >> $GITHUB_ENV;

    - name: Download compressed zip file
      uses: actions/download-artifact@v4
      with:
        name: wazuh-engine-${{ env.TAG }}-standalone
        path: /tmp/standalone-test

    - name: Verify artifact structure
      run: |
        echo "=== Artifact structure verification ==="
        echo "Contents of /tmp/standalone-test:"
        find /tmp/standalone-test -type f -o -type d | head -20
        echo ""
        echo "Looking for wazuh-engine-standalone directory..."
        if [ -d "/tmp/standalone-test/wazuh-engine-standalone" ]; then
          echo "✓ Found wazuh-engine-standalone directory"
          echo "Contents of wazuh-engine-standalone:"
          ls -la /tmp/standalone-test/wazuh-engine-standalone/
          echo ""
          echo "Checking for required files:"
          [ -f "/tmp/standalone-test/wazuh-engine-standalone/run_engine.sh" ] && echo "✓ run_engine.sh found" || echo "✗ run_engine.sh missing"
          [ -f "/tmp/standalone-test/wazuh-engine-standalone/bin/wazuh-engine" ] && echo "✓ wazuh-engine binary found" || echo "✗ wazuh-engine binary missing"
          [ -d "/tmp/standalone-test/wazuh-engine-standalone/data" ] && echo "✓ data directory found" || echo "✗ data directory missing"
          echo ""
          echo "Checking directory permissions:"
          if [ -d "/tmp/standalone-test/wazuh-engine-standalone/sockets" ]; then
            echo "sockets directory permissions:"
            ls -ld /tmp/standalone-test/wazuh-engine-standalone/sockets
          else
            echo "sockets directory not found"
          fi
          if [ -d "/tmp/standalone-test/wazuh-engine-standalone/logs" ]; then
            echo "logs directory permissions:"
            ls -ld /tmp/standalone-test/wazuh-engine-standalone/logs
          else
            echo "logs directory not found"
          fi
          if [ -d "/tmp/standalone-test/wazuh-engine-standalone/data/kvdb" ]; then
            echo "kvdb directory permissions:"
            ls -ld /tmp/standalone-test/wazuh-engine-standalone/data/kvdb
          else
            echo "kvdb directory not found"
          fi
        else
          echo "✗ wazuh-engine-standalone directory not found!"
          echo "Available files and directories:"
          find /tmp/standalone-test -type f -o -type d
          exit 1
        fi

    - name: Basic communication test
      run: |
        cd /tmp/standalone-test/wazuh-engine-standalone
        chmod +x run_engine.sh
        chmod +x bin/wazuh-engine
        ls -la
        ./run_engine.sh > engine_stdout.log 2> engine_stderr.log &
        ENGINE_PID=$!
        sleep 5
        cat engine_stderr.log
        curl --silent --unix-socket sockets/engine-api.sock \
            -X POST -H "Content-Type: application/json" \
            -d '{"name":"default"}' \
            http://localhost/router/route/get
        if [ $? -eq 0 ]; then
            echo "Engine started successfully"
            kill $ENGINE_PID
        else
            echo "Engine failed to start"
            kill $ENGINE_PID
            exit 1
        fi

