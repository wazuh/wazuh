name: Management API integration tests

on:
  workflow_dispatch:
    inputs:
      package_reference:
        description: 'Package reference branch/commit. Current workflow reference if empty.'
        required: false
        type: string
      tiers:
        description: 'Tests tiers'
        required: false
        default: '0,1,2'
        type: string
  pull_request:
    types: [synchronize, opened, reopened, ready_for_review]
    paths:
      - ".github/workflows/5_testintegration_api.yml"
      - "apis/server_management/**"
      - "tests/integration/test_api/**"

env:
    PACKAGE_REFERENCE: ${{ inputs.package_reference || github.head_ref || github.sha }}
    S3_BUCKET_PATH: s3://packages-dev.internal.wazuh.com/development/wazuh/5.x/main/packages

jobs:

  # Check wazuh-server package existence to avoid unnecesary package creation
  check_package_existence:
    name: Check wazuh-server package existence
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.draft == false || github.event_name == 'workflow_dispatch' }}
    outputs:
      name: ${{ steps.package_name.outputs.name }}
      exists: ${{ steps.check_package.outputs.exists }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: ${{ secrets.CI_AWS_REGION }}
        
      # Set wazuh-server package name
      - name: Set package name
        id: package_name
        run: |
          short_commit=$(curl -s https://api.github.com/repos/wazuh/wazuh/commits?sha=$PACKAGE_REFERENCE | jq -r '.[0].sha[:7]')
          full_version=$(curl -s https://raw.githubusercontent.com/wazuh/wazuh/$PACKAGE_REFERENCE/src/VERSION)
          version=$(sed -E 's/^v([0-9]+\.[0-9]+\.[0-9]+)$/\1/' <<< $full_version)
          echo "name=wazuh-server_${version}-0_amd64_${short_commit}.deb" >> $GITHUB_OUTPUT

      - name: Check if wazuh-server package exists
        id: check_package
        run: |
          if aws s3 ls ${{ env.S3_BUCKET_PATH }}/${{ steps.package_name.outputs.name }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

# Launch wazuh-server package generation workflow
  generate_package:
    name: Trigger package generation workflow
    needs: check_package_existence
    if: ${{ github.event_name == 'workflow_dispatch' && needs.check_package_existence.outputs.exists == 'false' }} 
    secrets: inherit
    uses: ./.github/workflows/packages-build-server.yml
    with:
      architecture: amd64
      system: deb

  # Wait for wazuh-server package generation workflow
  wait_package:
    name: Wait for wazuh-server package generation workflow
    needs: check_package_existence
    if: ${{ github.event_name == 'pull_request' && needs.check_package_existence.outputs.exists == 'false' }} 
    runs-on: ubuntu-latest
    steps:
    - name: Wait for wazuh-server package generation workflow
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.head_ref || github.ref_name }}
        check-name: 'package-build (amd64, deb) / Build deb wazuh-server on amd64'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 60
        allowed-conclusions: success

  execute-test:
    name: Test execution
    runs-on: ubuntu-latest
    needs: [check_package_existence, generate_package, wait_package]
    if: always() && (needs.generate_package.result == 'success' || needs.wait_package.result == 'success' || needs.check_package_existence.outputs.exists == 'true')
    env: 
      PACKAGE_NAME: ${{ needs.check_package_existence.outputs.name }}
    steps:
      # Check tests tiers input
      - name: Tests tiers validation
        run: |
          IFS=',' read -ra TIERS <<< "${{ github.event.inputs.tiers }}"
          for tier in "${TIERS[@]}"; do
            if [[ ! "$tier" =~ ^[012]$ ]]; then
              echo "Invalid tier: $tier"
              exit 1
            fi
          done
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "./.github/workflows/.python-version-it"
          architecture: x64
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CI_INTERNAL_DEVELOPMENT_BUCKET_USER_SECRET_KEY }}
          aws-region: ${{ secrets.CI_AWS_REGION }}
      
      # Fetch wazuh-server package
      - name: Fetch wazuh-server package 
        run: |
          aws s3 cp ${{ env.S3_BUCKET_PATH }}/${{env.PACKAGE_NAME}} ${GITHUB_WORKSPACE}/${{env.PACKAGE_NAME}}

      # Install wazuh-server package
      - name: Install wazuh-server 
        run: sudo apt install ${GITHUB_WORKSPACE}/${{env.PACKAGE_NAME}}

      # Download and install integration tests framework.
      - name: Download and install integration tests framework
        run: |
          if [ "X`git ls-remote https://github.com/wazuh/qa-integration-framework.git ${{ github.head_ref || github.ref_name }}`" != "X" ]; then
              QA_BRANCH=${{ github.head_ref || github.ref_name }}
          elif [ "X`git ls-remote https://github.com/wazuh/qa-integration-framework.git ${{ github.base_ref || 'main' }}`" != "X" ]; then
              QA_BRANCH=${{ github.base_ref || 'main' }}
          else
              QA_BRANCH="main"
          fi
          git clone -b ${QA_BRANCH} --single-branch https://github.com/wazuh/qa-integration-framework.git
          python3 -m venv ${{ runner.temp }}/test-venv
          source ${{ runner.temp }}/test-venv/bin/activate
          pip install qa-integration-framework/
          rm -rf qa-integration-framework/

      # Run integration tests.
      - name: Run API tests
        run: |
          TIERS_PARAMETERS=""
          for tier in $(echo "${{ github.event.inputs.tiers }}" | tr ',' ' '); do
            TIERS_PARAMETERS="$TIERS_PARAMETERS --tier $tier"
          done
          cd tests/integration
          source ${{ runner.temp }}/test-venv/bin/activate
          python -m pytest $TIERS_PARAMETERS test_api/
