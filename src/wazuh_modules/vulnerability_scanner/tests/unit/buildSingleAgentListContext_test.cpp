/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * February 21, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "buildSingleAgentListContext_test.hpp"
#include "MockScanContext.hpp"
#include "TrampolineSocketDBWrapper.hpp"
#include "buildSingleAgentListContext.hpp"

TEST_F(BuildSingleAgentListContextTest, BuildSingleAgentListContextEmpty)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();

    nlohmann::json queryResult = R"([])"_json;

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::SetArgReferee<1>(queryResult));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    EXPECT_NO_THROW(singleAgentContext->handleRequest(scanContext));

    EXPECT_EQ(scanContext->m_agents.size(), 0);
}

TEST_F(BuildSingleAgentListContextTest, BuildSingleAgentListContextWithElements)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();

    nlohmann::json queryResult = R"([{
        "id": 1,
        "name": "name",
        "version": "Wazuh v4.4.4",
        "ip": "192.168.0.1",
        "node_name": "node_1",
        "connection_status": "active"
    }])"_json;

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::SetArgReferee<1>(queryResult));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();

    EXPECT_CALL(*scanContext, clusterNodeName()).WillOnce(testing::Return("node_1"));
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    EXPECT_NO_THROW(singleAgentContext->handleRequest(scanContext));

    EXPECT_EQ(scanContext->m_agents.size(), 1);

    auto agent = scanContext->m_agents[0];

    EXPECT_EQ(agent.id, "001");
    EXPECT_EQ(agent.name, "name");
    EXPECT_EQ(agent.version, "v4.4.4");
    EXPECT_EQ(agent.ip, "192.168.0.1");
}

TEST_F(BuildSingleAgentListContextTest, BuildSingleAgentListContextMultiple)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();

    nlohmann::json queryResult = R"([{"element":"element1"},{"element":"element2"}])"_json;

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::SetArgReferee<1>(queryResult));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    EXPECT_NO_THROW(singleAgentContext->handleRequest(scanContext));

    EXPECT_EQ(scanContext->m_agents.size(), 0);
}

TEST_F(BuildSingleAgentListContextTest, ExceptionOnDB)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::Throw(SocketDbWrapperException("Error on DB")));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    // Context is not used
    EXPECT_THROW(singleAgentContext->handleRequest(scanContext), WdbDataException);

    spSocketDBWrapperMock.reset();
}

TEST_F(BuildSingleAgentListContextTest, ExceptionOnDBRuntimeError)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::Throw(std::runtime_error("Error on DB")));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    // Context is not used
    EXPECT_THROW(singleAgentContext->handleRequest(scanContext), std::runtime_error);

    spSocketDBWrapperMock.reset();
}

TEST_F(BuildSingleAgentListContextTest, BuildSingleAgentListContextWithElementsClusterOff)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();
    nlohmann::json queryResult = R"([{
        "id": 1,
        "name": "name",
        "version": "Wazuh v4.4.4",
        "ip": "192.168.0.1",
        "node_name": "node_1",
        "connection_status": "active"
    }])"_json;

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::SetArgReferee<1>(queryResult));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();

    EXPECT_CALL(*scanContext, clusterNodeName()).WillOnce(testing::Return("node_1"));
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    EXPECT_NO_THROW(singleAgentContext->handleRequest(scanContext));

    ASSERT_EQ(scanContext->m_agents.size(), 1);

    auto agent = scanContext->m_agents[0];

    EXPECT_EQ(agent.id, "001");
    EXPECT_EQ(agent.name, "name");
    EXPECT_EQ(agent.version, "v4.4.4");
    EXPECT_EQ(agent.ip, "192.168.0.1");

    spSocketDBWrapperMock.reset();
}

TEST_F(BuildSingleAgentListContextTest, BuildSingleAgentListContextWithElementsClusterOnDifferentNodeName)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();
    nlohmann::json queryResult = R"([{
        "id": 1,
        "name": "name",
        "version": "Wazuh v4.4.4",
        "ip": "192.168.0.1",
        "node_name": "node_1",
        "connection_status": "active"
    }])"_json;

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::SetArgReferee<1>(queryResult));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();

    EXPECT_CALL(*scanContext, clusterNodeName()).WillRepeatedly(testing::Return("node_2"));
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    EXPECT_NO_THROW(singleAgentContext->handleRequest(scanContext));

    ASSERT_EQ(scanContext->m_agents.size(), 0);

    spSocketDBWrapperMock.reset();
}

TEST_F(BuildSingleAgentListContextTest, BuildSingleAgentListContextWithElementsClusterDisconnected)
{
    spSocketDBWrapperMock = std::make_shared<MockSocketDBWrapper>();
    nlohmann::json queryResult = R"([{
        "id": 1,
        "name": "name",
        "version": "Wazuh v4.4.4",
        "ip": "192.168.0.1",
        "node_name": "node_1",
        "connection_status": "disconnected"
    }])"_json;

    EXPECT_CALL(*spSocketDBWrapperMock, query(testing::_, testing::_))
        .Times(1)
        .WillOnce(testing::SetArgReferee<1>(queryResult));

    auto singleAgentContext =
        std::make_shared<TBuildSingleAgentListInfoContext<MockScanContext, TrampolineSocketDBWrapper>>();

    auto scanContext = std::make_shared<MockScanContext>();

    EXPECT_CALL(*scanContext, clusterNodeName()).WillRepeatedly(testing::Return("node_1"));
    EXPECT_CALL(*scanContext, agentId()).WillRepeatedly(testing::Return("001"));

    EXPECT_NO_THROW(singleAgentContext->handleRequest(scanContext));

    ASSERT_EQ(scanContext->m_agents.size(), 0);

    spSocketDBWrapperMock.reset();
}
