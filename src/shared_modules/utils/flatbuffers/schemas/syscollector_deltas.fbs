namespace SyscollectorDeltas;

table dbsync_hotfixes {
    scan_time:string;
    hotfix:string;
    checksum:string;
}

table dbsync_hwinfo {
    scan_time:string;
    board_serial:string;
    cpu_name:string;
    cpu_cores:long;
    cpu_mhz:double;
    ram_total:long;
    ram_free:long;
    ram_usage:long;
    checksum:string;
}

table dbsync_network_address {
    scan_time:string;
    iface:string;
    proto:long;
    address:string;
    netmask:string;
    broadcast:string;
    checksum:string;
    item_id:string;
    metric:string (deprecated);
    dhcp:string (deprecated);
}

table dbsync_network_iface {
    scan_time:string;
    name:string;
    adapter:string;
    type:string;
    state:string;
    mtu:long;
    mac:string;
    tx_packets:long;
    rx_packets:long;
    tx_bytes:long;
    rx_bytes:long;
    tx_errors:long;
    rx_errors:long;
    tx_dropped:long;
    rx_dropped:long;
    checksum:string;
    item_id:string;
}

table dbsync_network_protocol {
    scan_time:string;
    iface:string;
    type:string;
    gateway:string;
    dhcp:string;
    metric:string;
    checksum:string;
    item_id:string;
}

table dbsync_osinfo {
    scan_time:string;
    hostname:string;
    architecture:string;
    os_name:string;
    os_version:string;
    os_codename:string;
    os_major:string;
    os_minor:string;
    os_patch:string;
    os_build:string;
    os_platform:string;
    sysname:string;
    release:string;
    version:string;
    os_release:string;
    os_display_version:string;
    checksum:string;
}

table dbsync_ports {
    scan_time:string;
    protocol:string;
    local_ip:string;
    local_port:long;
    remote_ip:string;
    remote_port:long;
    tx_queue:long;
    rx_queue:long;
    inode:long;
    state:string;
    pid:long;
    process:string;
    checksum:string;
    item_id:string;
}

table dbsync_processes {
    scan_time:string;
    pid:string;
    name:string;
    state:string;
    ppid:long;
    utime:long;
    stime:long;
    cmd:string;
    argvs:string;
    euser:string;
    ruser:string;
    suser:string;
    egroup:string;
    rgroup:string;
    sgroup:string;
    fgroup:string;
    priority:long;
    nice:long;
    size:long;
    vm_size:long;
    resident:long;
    share:long;
    start_time:long;
    pgrp:long;
    session:long;
    nlwp:long;
    tgid:long;
    tty:long;
    processor:long;
    checksum:string;
}

table dbsync_packages {
    scan_time:string;
    name:string;
    version:string;
    vendor:string;
    install_time:string;
    location:string;
    architecture:string;
    groups:string;
    description:string;
    size:long;
    priority:string;
    multiarch:string;
    source:string;
    format:string;
    checksum:string;
    item_id:string;
}

table dbsync_users {
    scan_time:string;
    user_name:string;
    user_full_name:string;
    user_home:string;
    user_id:long = null;
    user_uid_signed:long = null;
    user_uuid:string;
    user_groups:string;
    user_group_id:long = null;
    user_group_id_signed:long = null;
    user_created:double = null;
    user_roles:string;
    user_shell:string;
    user_type:string;
    user_is_hidden:bool = null;
    user_is_remote:bool = null;
    user_last_login:long = null;
    user_auth_failed_count:long = null;
    user_auth_failed_timestamp:double = null;
    user_password_expiration_date:int = null;
    user_password_hash_algorithm:string;
    user_password_inactive_days:int = null;
    user_password_last_change:double = null;
    user_password_max_days_between_changes:int = null;
    user_password_min_days_between_changes:int = null;
    user_password_status:string;
    user_password_warning_days_before_expiration:int = null;
    process_pid:long = null;
    host_ip:string;
    login_status:bool = null;
    login_tty:string;
    login_type:string;
    checksum:string;
}

table dbsync_groups {
    scan_time:string;
    group_id:long = null;
    group_name:string;
    group_description:string;
    group_id_signed:long = null;
    group_uuid:string;
    group_is_hidden:bool = null;
    group_users:string;
    checksum:string;
}

table dbsync_browser_extensions {
    scan_time:string;
    browser_name:string;
    user_id:string;
    package_name:string;
    package_id:string;
    package_version:string;
    package_description:string;
    package_vendor:string;
    package_build_version:string;
    package_path:string;
    browser_profile_name:string;
    browser_profile_path:string;
    package_reference:string;
    package_permissions:string;
    package_type:string;
    package_enabled:string;
    package_autoupdate:bool = null;
    package_persistent:bool = null;
    package_from_webstore:bool = null;
    browser_profile_referenced:bool = null;
    package_installed:string;
    file_hash_sha256:string;
    checksum:string;
    item_id:string;
}

table dbsync_services {
    scan_time:string;
    name:string;
    display_name:string;
    description:string;
    service_type:string;
    start_type:string;
    state:string;
    pid:long = null;
    ppid:long = null;
    binary_path:string;
    load_state:string;
    active_state:string;
    sub_state:string;
    unit_file_state:string;
    status:string;
    user:string;
    can_stop:string;
    can_reload:string;
    service_exit_code:long = null;
    // ECS field mappings (service.id is mapped to name field)
    service_name:string;                      // ECS: service.name (File name of plist for macOS)
    process_executable:string;                // ECS: process.executable (Path to the service executable)
    process_args:string;                      // ECS: process.args (Command line arguments for the service)
    file_path:string;                         // ECS: file.path (Path to the .plist definition file for macOS)
    process_user_name:string;                 // ECS: process.user.name (User account running the job)
    process_group_name:string;                // ECS: process.group.name (Group account running the job)
    service_enabled:string;                   // ECS: service.enabled (unified as text: enabled/disabled for Linux, true/false for macOS)
    service_restart:string;                   // Custom: service.restart (Restart policy: always/on-failure/never)
    service_frequency:long = null;            // Custom: service.frequency (Run frequency in seconds)
    log_file_path:string;                     // Custom: log.file.path (Redirect stdout to a file/pipe)
    error_log_file_path:string;               // Custom: error.log.file.path (Redirect stderr to a file/pipe)
    process_working_dir:string;               // ECS: process.working_dir (Working directory of the job)
    process_root_dir:string;                  // Custom: process.root_dir (Chroot directory before execution)
    service_starts_on_mount:bool = null;      // Custom: service.starts.on_mount (Launches every time a filesystem is mounted)
    service_starts_on_path_modified:string;   // Custom: service.starts.on_path_modified (Launches on path modification)
    service_starts_on_not_empty_directory:string; // Custom: service.starts.on_not_empty_directory (Launches when directories become non-empty)
    service_inetd_compatibility:bool = null;  // Custom: service.inetd_compatibility (Run job as if launched from inetd)
    checksum:string;
}

union Provider {
    dbsync_network_iface,
    dbsync_network_protocol,
    dbsync_network_address,
    dbsync_osinfo,
    dbsync_hwinfo,
    dbsync_ports,
    dbsync_packages,
    dbsync_hotfixes,
    dbsync_processes,
    dbsync_users,
    dbsync_groups,
    dbsync_browser_extensions,
    dbsync_services
}

table AgentInfo {
    agent_id:string;
    agent_ip:string;
    agent_name:string;
    agent_version:string;
}

table Delta {
    agent_info:AgentInfo;
    data:Provider;
    operation:string;
}

root_type Delta;
