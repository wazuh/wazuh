name: decoder/suricata/0

metadata:
  module: suricata
  compatibility: v6.0.0 and higher
  versions:
    - "6"
    - "7"
  author:
    name: Wazuh Inc, info@wazuh.com
    date: May 18 2024
  references:
    - https://suricata.readthedocs.io/en/suricata-6.0.8/output/eve/eve-json-format.html?highlight=eve%20format
  title: Suricata decoder
  description: Decoder for Suricata open source network analysis and threat detection software.

check:
  - tmp.json.event_type: exists()

normalize:
  - map:
      - suricata: rename($tmp.json)
      - tmp: delete()
      - destination.address: $suricata.dest_ip
      - destination.bytes: $suricata.flow.bytes_toclient
      - destination.domain: $suricata.http.hostname
      - destination.ip: $destination.address
      - destination.mac: $suricata.ether.dest_mac
      - destination.mac: replace(':' , '-')
      - destination.packets: $suricata.flow.pkts_toclient
      - destination.port: $suricata.dest_port
      - event.category: array_append(network)
      - event.end: parse_date($suricata.flow.end, %FT%T%z)
      - event.kind: event
      - event.module: suricata
      - event.created: parse_date($suricata.timestamp, %FT%T%z)
      - event.severity: $suricata.alert.severity
      - event.start: parse_date($suricata.flow.start, %FT%T%z)
      - .: kvdb_get_merge(suricata_event_id_to_info, $suricata.event_type)
      - file.name: $suricata.alert.metadata.filename
      - file.path: $suricata.fileinfo.filename
      - file.size: $suricata.fileinfo.size
      - http.request.method: $suricata.http.http_method
      - http.request.referrer: $suricata.http.http_refer
      - http.response.body.bytes: $suricata.http.length
      - http.response.status_code: $suricata.http.status
      - http.version: $suricata.http.protocol
      - suricata.app_proto: downcase($suricata.app_proto)
      - network.transport: downcase($suricata.proto)
      - message: $suricata.alert.category
      - related.hosts: array_append($suricata.http.hostname)
      - related.ip: array_append($suricata.src_ip, $suricata.dest_ip)
      - related.hash: array_append($suricata.tls.server.ja3s, $suricata.tls.client.ja3)
      - rule.category: $suricata.alert.category
      - rule.name: $suricata.alert.signature
      - source.address: $suricata.src_ip
      - source.bytes: $suricata.flow.bytes_toserver
      - source.ip: $suricata.src_ip
      - source.port: $suricata.src_port
      - source.mac: $suricata.ether.src_mac
      - source.mac: replace(':' , '-')
      - source.packets: $suricata.flow.pkts_toserver
      - threat.tactic.id: $suricata.alert.metadata.mitre_tactic_id
      - threat.tactic.name: $suricata.alert.metadata.mitre_tactic_name
      - threat.technique.id: $suricata.alert.metadata.mitre_technique_id
      - threat.technique.name: $suricata.alert.metadata.mitre_technique_name
      - user_agent.original: $suricata.http.http_user_agent
      - url.original: $suricata.http.url
      - url.path: regex_extract($url.original, ([^?]*\)(?:\\?.*\)?)
      - url.query: regex_extract($url.original, ^(?:[^?]*\\?(.*\)\)?)
      - wazuh.decoders: array_append(suricata)

  # TODO: uncomment the lines below when the event field tag can be extracted
  #- check: contains($tags, 'forwarded')
  #  map:
  #    - observer.product: Suricata
  #    - observer.type: ids
  #    - observer.vendor: OISF

  - check: $suricata.app_proto == ftp-data
    map:
      - network.protocol: ftp

  - check: >-
        $suricata.app_proto != failed
        AND $suricata.app_proto != template
        AND $suricata.app_proto != template-rust
    map:
      - network.protocol: $suricata.app_proto

  - check: >-
        $suricata.event_type == http
        AND $suricata.http.status < 400
    map:
      - event.outcome: success

  - check: >-
        $suricata.event_type == http
        AND $suricata.http.status > 400
    map:
      - event.outcome: failure

  - check: $suricata.flow.state == new
    map:
      - event.type: array_append(start)

  - check: $suricata.flow.state == closed
    map:
      - event.type: array_append(end)

  - check: is_number($suricata.alert.signature_id)
    map:
      - rule.id: to_string($suricata.alert.signature_id)

  - check: $source.bytes >= 0 OR $destination.bytes >= 0
    map:
      - network.bytes: 0
      - network.bytes: int_calculate(sum, $source.bytes, $destination.bytes)

  - check: $source.packets >= 0 OR $destination.packets >= 0
    map:
      - network.packets: 0
      - network.packets: int_calculate(sum, $source.packets, $destination.packets)

  - check:
      - suricata.alert.action: is_not_null()
    map:
      - event.type: array_append($suricata.alert.action)

  - check: $network.protocol == http
    map:
      - url.domain: $destination.domain

  # DNS
  - check: $network.protocol == dns
    map:
      - dns.id: to_string($suricata.dns.id)
      - dns.response_code: $suricata.dns.rcode
      - dns.type: $suricata.dns.type

  - check: >-
        $dns.type == query
        OR $suricata.dns.version == 2
    map:
      - dns.question.name: $suricata.dns.rrname
      - dns.question.type: $suricata.dns.rrtype

  # DNS ANSWER V1
  - check: >-
        $dns.type == answer
        AND not_exists($suricata.dns.version)
    map:
      - _answer.name: $suricata.dns.rrname
      - _answer.data: $suricata.dns.rdata
      - _answer.type: $suricata.dns.rrtype
      - _answer.ttl: $suricata.dns.ttl
      - dns.answers: array_append($_answer)

  - check: >-
        $_answer.type == A
        OR $_answer.type == AAAA
    map:
      - dns.resolved_ip: array_append($_answer.data)

  # DNS ANSWER V2
  - check: >-
        $dns.type == answer
        AND $suricata.dns.version == 2
    map:
      - dns.answers: $suricata.dns.answers

  - check: $suricata.dns.rrtype == A OR $suricata.dns.rrtype == AAAA
    map:
      - dns.resolved_ip: array_append($dns.answers.i.rdata)

  - check: $suricata.dns.aa == true
    map:
      - dns.header_flags: array_append(AA)

  - check: $suricata.dns.tc == true
    map:
      - dns.header_flags: array_append(TC)

  - check: $suricata.dns.rd == true
    map:
      - dns.header_flags: array_append(RD)

  - check: $suricata.dns.ra == true
    map:
      - dns.header_flags: array_append(RA)

  # TLS
  - check: $network.protocol == tls
    map:
      # Subject
      - _subject: $suricata.tls.subject
      - _subject: replace(', ', ',')
      - _subject: parse_key_value($_subject, '=', ',' , "'", \\)
      - tls.server.x509.subject.common_name: array_append($_subject.CN)
      - tls.server.x509.subject.country: array_append($_subject.C)
      - tls.server.x509.subject.locality: array_append($_subject.L)
      - tls.server.x509.subject.organization: array_append($_subject.O)
      - tls.server.x509.subject.organizational_unit: array_append($_subject.OU)
      - tls.server.x509.subject.state_or_province: array_append($_subject.ST)

      # Issuer
      - _issuer: $suricata.tls.issuerdn
      - _issuer: replace(', ', ',')
      - _issuer: parse_key_value($_issuer, '=', ',' , "'", \\)
      - tls.server.x509.issuer.country: array_append($_issuer.C)
      - tls.server.x509.issuer.common_name: array_append($_issuer.CN)
      - tls.server.x509.issuer.locality: array_append($_issuer.L)
      - tls.server.x509.issuer.organization: array_append($_issuer.O)
      - tls.server.x509.issuer.organizational_unit: array_append($_issuer.OU)
      - tls.server.x509.issuer.state_or_province: array_append($_issuer.ST)

      - tls.resumed: $suricata.tls.session_resumed
      - tls.server.hash.sha1: upcase($suricata.tls.fingerprint)
      - tls.server.hash.sha1: replace(':' , '')
      - related.hash: array_append($tls.server.hash.sha1)
      - tls.client.server_name: $suricata.tls.sni
      - destination.domain: $suricata.tls.sni
      - related.hosts: array_append($suricata.tls.sni)
      - tls.server.ja3s: $suricata.tls.ja3s.hash
      - related.hash: array_append($tls.server.ja3s)
      - tls.client.ja3: $suricata.tls.ja3.hash
      - related.hash: array_append($tls.client.ja3)
      - tls.server.certificate: $suricata.tls.certificate
      - tls.server.certificate_chain: $suricata.tls.chain
      - tls.server.issuer: $suricata.tls.issuerdn
      - tls.server.subject: $suricata.tls.subject
      - tls.server.x509.serial_number: $suricata.tls.serial
      - tls.server.x509.serial_number: replace(':' , '')
      - tls.server.x509.not_after: parse_date($suricata.tls.notafter, %FT%T)
      - tls.server.x509.not_before: parse_date($suricata.tls.notbefore, %FT%T)
      - tls.server.not_after: parse_date($suricata.tls.notafter, %FT%T)
      - tls.server.not_before: parse_date($suricata.tls.notbefore, %FT%T)

  - check: $suricata.tls.version != UNDETERMINED
    map:
      - _version: split($suricata.tls.version, ' ')
      - tls.version: $_version.1
      - tls.version_protocol: downcase($_version.0)

  - map:
      - event.original: delete()
