name: decoder/system-auth/0

metadata:
  module: system
  dataset: system-auth
  title: system-auth logs
  description: Decoder for system athenticated action logs.
  compatibility: This integration was tested with logs from OS like Ubuntu 20.04, Centos 7, and macOS Sierra.
  versions:
    - any
  author:
    name: Wazuh Inc.
    email: info@wazuh.com
    date: 2023-05-15
  references:
    - https://www.loggly.com/ultimate-guide/linux-logging-basics/

parents:
  - decoder/syslog/0

definitions:
  isAuthProcess: >-
    $process.name == sshd
    OR $process.name == sudo
    OR $process.name == groupadd
    OR $process.name == useradd
    OR $process.name == groupdel
    OR $process.name == groupmod
    OR $process.name == userdel
    OR $process.name == usermod
    OR $process.name == CRON

check: $isAuthProcess

normalize:
  - map:
      - event.dataset: system-auth
      - event.kind: event
      - event.module: system
      - event.outcome: success
      - wazuh.decoders: array_append(system-auth)

  - check:
      - process.name: sshd
    parse|message:
      - <_system.auth.ssh.event> <_system.auth.ssh.method> for <user.name> from <source.ip> port <source.port> ssh2(?:<~>)
      - <_system.auth.ssh.event> user <user.name> from <source.ip>(? port <source.port>)
      - Did not receive identification string from <source.ip>
      - subsystem request for <_system.auth.ssh.subsystem> by user <user.name>
      - '<_system.auth.ssh.session.action>: Too many authentication <_system.auth.ssh.event> for <user.name> [preauth]'
      - "<user.name> [<~>][<~>]: <_system.auth.ssh.event>: <_system.auth.ssh.session.process_id> tty<~/literal/\\/>?<~/literal/s><_system.process.tty.char_device.major>"
      - '<_system.auth.ssh.event>: Read from socket failed: Connection reset by peer [preauth]'
      - 'Received <_system.auth.ssh.event> from <source.ip>: <~>:  [<~>]'

  - check: $_system.auth.ssh.event == Accepted OR $_system.auth.ssh.event == USER_PROCESS
    map:
      - event.action: ssh_login
      - event.category: array_append(authentication, session)
      - event.outcome: success
      - event.type: array_append(info)

  - check: $_system.auth.ssh.event == DEAD_PROCESS OR $_system.auth.ssh.event == disconnect
    map:
      - event.action: ssh_login
      - event.category: array_append(authentication, session)
      - event.outcome: success
      - event.type: array_append(end)

  - check: $_system.auth.ssh.event == Invalid OR $_system.auth.ssh.event == Failed OR $_system.auth.ssh.event == failures OR $_system.auth.ssh.event == fatal
    map:
      - event.action: ssh_login
      - event.category: array_append(authentication)
      - event.outcome: failure
      - event.type: array_append(info)

  - check:
      - process.name: sudo
    parse|message:
      - "<user.name> : <_system.auth.sudo.error> ; TTY=tty<~/literal/\\/>?<~/literal/s><_system.process.tty.char_device.major> ; PWD=<_system.auth.sudo.pwd> ; USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>"
      - "<user.name> : <_system.auth.sudo.error> ; TTY=<_system.auth.sudo.tty> ; PWD=<_system.auth.sudo.pwd> ; USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>"
      - "<user.name> : TTY=<_system.auth.sudo.tty> ; PWD=<_system.auth.sudo.pwd> ; USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>"
      - "<user.name> : TTY=tty<~/literal/\\/>?<~/literal/s><_system.process.tty.char_device.major> ; PWD=<_system.auth.sudo.pwd> ; USER=<user.effective.name> ; COMMAND=<_system.auth.sudo.command>"
    map:
      - event.category: array_append(process)

  - check:
      - message: contains("session opened")
    map:
      - event.action: logged-on

  - check:
      - message: contains("session closed")
    map:
      - event.action: logged-off

  - check:
      - message: contains(pam_)
    parse|message:
      - "pam_unix\\(<~>:<~>\\): authentication <_system.auth.pam.session.action>; logname=<?_system.auth.pam.foruser.name> uid=<?user.id> euid=<?user.effective.id> tty=<?_system.auth.pam.tty> ruser=<?_system.auth.pam.remote.user> rhost=<?source.ip>  user=<?user.name>"
    map:
      - event.category: array_append(authentication)

  - check:
      - message: contains(pam_)
    parse|message:
      - "pam_unix\\(<~>:<~>\\): session <_system.auth.pam.session.action> for user <_system.auth.pam.foruser.name> by <_system.auth.pam.byuser.name>\\(uid=<user.id>\\)"
      - "pam_unix\\(<~>:<~>\\): session <_system.auth.pam.session.action> for user <_system.auth.pam.foruser.name> by \\(uid=<user.id>\\)"
      - "pam_unix\\(<~>:<~>\\): session <_system.auth.pam.session.action> for user <_system.auth.pam.foruser.name>"
    map:
      - event.category: array_append(session)

  - check:
      - message: contains(pam_succeed_if)
    parse|message:
      - "pam_succeed_if\\(<~>:<~>\\): requirement <~> not met by user <user.name>"
    map:
      - event.outcome: failure

  - check:
      - message: contains(PAM)
    parse|message:
      - PAM <~> more authentication <_system.auth.pam.session.action>; logname=<?_system.auth.pam.foruser.name> uid=<?user.id> euid=<?user.effective.id> tty=<?_system.auth.pam.tty> ruser=<?_system.auth.pam.remote.user> rhost=<?source.ip> user=<?user.name>
    map:
      - event.category: array_append(authentication, session)

  - check:
      - message: contains(PAM)
    parse|message:
      - "error: PAM: <~> authentication <~> user <user.name> from <source.address>"

  - check:
      - _system.auth.pam.byuser.name: string_not_equal('')
    map:
      - user.name: $_system.auth.pam.byuser.name
      - user.effective.name: $_system.auth.pam.foruser.name

  - check:
      - _system.auth.pam.byuser.name: not_exists()
    map:
      - user.name: $_system.auth.pam.foruser.name

  - check: $_system.auth.pam.session.action == closed
    map:
      - event.type: array_append(end)

  - check: $process.name == groupadd OR $process.name == useradd
    parse|message:
      - 'new group: name=<group.name>, GID=<group.id>'
      - 'new user: name=<user.name>, UID=<user.id>, GID=<group.id>, home=<_system.auth.useradd.home>, shell=<_system.auth.useradd.shell>(?,<~>)'
      - 'group added to <file.name>: name=<group.name>(?, GID=<group.id>)'
      - <_system.auth.event.outcome> adding user '<user.name>'(?,<~>)

  - check: $process.name == userdel OR $process.name == usermod
    parse|message:
      - <~> user '<user.name>'
      - <~> user '<user.name>'<~>

  - check: $_system.auth.event.outcome == failed OR $_system.auth.pam.session.action == failure OR $_system.auth.pam.session.action == failures
    map:
      - event.outcome: failure

  - check: $process.name == groupadd OR $process.name == groupdel OR $process.name == groupmod OR $process.name == useradd OR $process.name == userdel OR $process.name == usermod
    map:
      - event.category: array_append(iam)

  - check: $process.name == useradd OR $process.name == userdel OR $process.name == usermod
    map:
      - event.type: array_append(user)

  - check: $process.name == groupadd OR $process.name == groupdel OR $process.name == groupmod
    map:
      - event.type: array_append(group)

  - check: $process.name == groupadd OR $process.name == useradd
    map:
      - event.type: array_append(creation)

  - check: $process.name == groupdel OR $process.name == userdel
    map:
      - event.type: array_append(deletion)

  - check: $process.name == groupmod OR $process.name == usermod
    map:
      - event.type: array_append(change)

  - map:
      - user.name: replace(", '')
      - user.name: replace("'", '')
      - user.effective.name: replace(", '')
      - user.effective.name: replace("'", '')
      - source.address: $source.ip
      - source.domain: parse_fqdn($source.address)
      - related.user: array_append_any($user.name, $user.effective.name)
      - related.ip: array_append($source.ip)
      - process.command_line: $_system.auth.sudo.command
      - process.tty.char_device.major: parse_long($_system.process.tty.char_device.major)
      - process.working_directory: $_system.auth.sudo.pwd
