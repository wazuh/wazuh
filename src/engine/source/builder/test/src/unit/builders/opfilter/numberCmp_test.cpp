#include "builders/baseBuilders_test.hpp"

#include "builders/opfilter/opBuilderHelperFilter.hpp"

namespace
{
auto customRefExpected()
{
    return [](const BuildersMocks& mocks)
    {
        EXPECT_CALL(*mocks.ctx, validator());
        EXPECT_CALL(*mocks.validator, hasField(DotPath("ref"))).WillOnce(testing::Return(false));
        return None {};
    };
}

auto typeRefExpected(json::Json::Type type, bool success = true)
{
    return [=](const BuildersMocks& mocks)
    {
        EXPECT_CALL(*mocks.ctx, validator()).Times(testing::AtLeast(1));
        EXPECT_CALL(*mocks.validator, hasField(DotPath("ref"))).WillOnce(testing::Return(true));
        EXPECT_CALL(*mocks.validator, getJsonType(DotPath("ref"))).WillRepeatedly(testing::Return(type));
        return None {};
    };
}

} // namespace

namespace filterbuildtest
{
INSTANTIATE_TEST_SUITE_P(
    Builders,
    FilterBuilderTest,
    testing::Values(
        /*** NumberEqual ***/
        // Wrong number of arguments
        FilterT({makeValue("1"), makeValue("1")}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        FilterT({}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        // Values
        FilterT({makeValue("1")}, opfilter::opBuilderHelperNumberEqual, SUCCESS()),
        FilterT({makeValue(R"("1")")}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        FilterT({makeValue(R"(1.1)")}, opfilter::opBuilderHelperNumberEqual, SUCCESS()),
        FilterT({makeValue(R"(1.0)")}, opfilter::opBuilderHelperNumberEqual, SUCCESS()),
        FilterT({makeValue(R"(true)")}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        FilterT({makeValue(R"(false)")}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        FilterT({makeValue(R"([])")}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        FilterT({makeValue(R"({})")}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        FilterT({makeValue(R"(null)")}, opfilter::opBuilderHelperNumberEqual, FAILURE()),
        // References
        FilterT({makeRef("ref")}, opfilter::opBuilderHelperNumberEqual, SUCCESS(customRefExpected())),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberEqual,
                SUCCESS(typeRefExpected(json::Json::Type::Number))),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberEqual,
                FAILURE(typeRefExpected(json::Json::Type::String, false))),
        /*** NumberGreaterThan ***/
        // Wrong number of arguments
        FilterT({makeValue("1"), makeValue("1")}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        FilterT({}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        // Values
        FilterT({makeValue("1")}, opfilter::opBuilderHelperNumberGreaterThan, SUCCESS()),
        FilterT({makeValue(R"("1")")}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        FilterT({makeValue(R"(1.1)")}, opfilter::opBuilderHelperNumberGreaterThan, SUCCESS()),
        FilterT({makeValue(R"(1.0)")}, opfilter::opBuilderHelperNumberGreaterThan, SUCCESS()),
        FilterT({makeValue(R"(true)")}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        FilterT({makeValue(R"(false)")}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        FilterT({makeValue(R"([])")}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        FilterT({makeValue(R"({})")}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        FilterT({makeValue(R"(null)")}, opfilter::opBuilderHelperNumberGreaterThan, FAILURE()),
        // References
        FilterT({makeRef("ref")}, opfilter::opBuilderHelperNumberGreaterThan, SUCCESS(customRefExpected())),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberGreaterThan,
                SUCCESS(typeRefExpected(json::Json::Type::Number))),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberGreaterThan,
                FAILURE(typeRefExpected(json::Json::Type::String, false))),
        /*** NumberGreaterThanOrEqual ***/
        // Wrong number of arguments
        FilterT({makeValue("1"), makeValue("1")}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        FilterT({}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        // Values
        FilterT({makeValue("1")}, opfilter::opBuilderHelperNumberGreaterThanEqual, SUCCESS()),
        FilterT({makeValue(R"("1")")}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        FilterT({makeValue(R"(1.1)")}, opfilter::opBuilderHelperNumberGreaterThanEqual, SUCCESS()),
        FilterT({makeValue(R"(1.0)")}, opfilter::opBuilderHelperNumberGreaterThanEqual, SUCCESS()),
        FilterT({makeValue(R"(true)")}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        FilterT({makeValue(R"(false)")}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        FilterT({makeValue(R"([])")}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        FilterT({makeValue(R"({})")}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        FilterT({makeValue(R"(null)")}, opfilter::opBuilderHelperNumberGreaterThanEqual, FAILURE()),
        // References
        FilterT({makeRef("ref")}, opfilter::opBuilderHelperNumberGreaterThanEqual, SUCCESS(customRefExpected())),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                SUCCESS(typeRefExpected(json::Json::Type::Number))),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                FAILURE(typeRefExpected(json::Json::Type::String, false))),
        /*** NumberLessThan ***/
        // Wrong number of arguments
        FilterT({makeValue("1"), makeValue("1")}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        FilterT({}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        // Values
        FilterT({makeValue("1")}, opfilter::opBuilderHelperNumberLessThan, SUCCESS()),
        FilterT({makeValue(R"("1")")}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        FilterT({makeValue(R"(1.1)")}, opfilter::opBuilderHelperNumberLessThan, SUCCESS()),
        FilterT({makeValue(R"(1.0)")}, opfilter::opBuilderHelperNumberLessThan, SUCCESS()),
        FilterT({makeValue(R"(true)")}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        FilterT({makeValue(R"(false)")}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        FilterT({makeValue(R"([])")}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        FilterT({makeValue(R"({})")}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        FilterT({makeValue(R"(null)")}, opfilter::opBuilderHelperNumberLessThan, FAILURE()),
        // References
        FilterT({makeRef("ref")}, opfilter::opBuilderHelperNumberLessThan, SUCCESS(customRefExpected())),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberLessThan,
                SUCCESS(typeRefExpected(json::Json::Type::Number))),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberLessThan,
                FAILURE(typeRefExpected(json::Json::Type::String, false))),
        /*** NumberLessThanOrEqual ***/
        // Wrong number of arguments
        FilterT({makeValue("1"), makeValue("1")}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        FilterT({}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        // Values
        FilterT({makeValue("1")}, opfilter::opBuilderHelperNumberLessThanEqual, SUCCESS()),
        FilterT({makeValue(R"("1")")}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        FilterT({makeValue(R"(1.1)")}, opfilter::opBuilderHelperNumberLessThanEqual, SUCCESS()),
        FilterT({makeValue(R"(1.0)")}, opfilter::opBuilderHelperNumberLessThanEqual, SUCCESS()),
        FilterT({makeValue(R"(true)")}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        FilterT({makeValue(R"(false)")}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        FilterT({makeValue(R"([])")}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        FilterT({makeValue(R"({})")}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        FilterT({makeValue(R"(null)")}, opfilter::opBuilderHelperNumberLessThanEqual, FAILURE()),
        // References
        FilterT({makeRef("ref")}, opfilter::opBuilderHelperNumberLessThanEqual, SUCCESS(customRefExpected())),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberLessThanEqual,
                SUCCESS(typeRefExpected(json::Json::Type::Number))),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberLessThanEqual,
                FAILURE(typeRefExpected(json::Json::Type::String, false))),
        /*** NumberNotEqual ***/
        // Wrong number of arguments
        FilterT({makeValue("1"), makeValue("1")}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        FilterT({}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        // Values
        FilterT({makeValue("1")}, opfilter::opBuilderHelperNumberNotEqual, SUCCESS()),
        FilterT({makeValue(R"("1")")}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        FilterT({makeValue(R"(1.1)")}, opfilter::opBuilderHelperNumberNotEqual, SUCCESS()),
        FilterT({makeValue(R"(1.0)")}, opfilter::opBuilderHelperNumberNotEqual, SUCCESS()),
        FilterT({makeValue(R"(true)")}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        FilterT({makeValue(R"(false)")}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        FilterT({makeValue(R"([])")}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        FilterT({makeValue(R"({})")}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        FilterT({makeValue(R"(null)")}, opfilter::opBuilderHelperNumberNotEqual, FAILURE()),
        // References
        FilterT({makeRef("ref")}, opfilter::opBuilderHelperNumberNotEqual, SUCCESS(customRefExpected())),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberNotEqual,
                SUCCESS(typeRefExpected(json::Json::Type::Number))),
        FilterT({makeRef("ref")},
                opfilter::opBuilderHelperNumberNotEqual,
                FAILURE(typeRefExpected(json::Json::Type::String, false)))),
    testNameFormatter<FilterBuilderTest>("NumberCmp"));
} // namespace filterbuildtest

namespace filteroperatestest
{
INSTANTIATE_TEST_SUITE_P(
    Builders,
    FilterOperationTest,
    testing::Values(
        /*** NumberEqual ***/
        FilterT(R"({"target": 1.12})", opfilter::opBuilderHelperNumberEqual, "target", {makeValue("1.12")}, SUCCESS()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberEqual, "target", {makeValue("1")}, SUCCESS()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberEqual, "target", {makeValue("2")}, FAILURE()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberEqual, "notTarget", {makeValue("1")}, FAILURE()),
        FilterT(R"({"target": "1"})", opfilter::opBuilderHelperNumberEqual, "target", {makeValue("1")}, FAILURE()),
        FilterT(R"({"target": 1.12, "ref": 1.12})",
                opfilter::opBuilderHelperNumberEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 1})",
                opfilter::opBuilderHelperNumberEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1.11, "ref": 1.11})",
                opfilter::opBuilderHelperNumberEqual,
                "notTarget",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1.11, "notRef": 1.11})",
                opfilter::opBuilderHelperNumberEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": "1", "ref": 1})",
                opfilter::opBuilderHelperNumberEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": "1"})",
                opfilter::opBuilderHelperNumberEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        /*** NumberGreaterThan ***/
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThan, "target", {makeValue("0")}, SUCCESS()),
        FilterT(R"({"target": 1.13})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeValue("1.11")},
                SUCCESS()),
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThan, "target", {makeValue("0.8")}, SUCCESS()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThan, "target", {makeValue("1")}, FAILURE()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThan, "target", {makeValue("2")}, FAILURE()),
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThan, "notTarget", {makeValue("0")}, FAILURE()),
        FilterT(
            R"({"target": "1"})", opfilter::opBuilderHelperNumberGreaterThan, "target", {makeValue("0")}, FAILURE()),
        FilterT(R"({"target": 1, "ref": 0})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1.15, "ref": 0.8})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 0.8})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 1})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 0})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "notTarget",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "notRef": 0})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": "1", "ref": 0})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": "0"})",
                opfilter::opBuilderHelperNumberGreaterThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        /*** NumberGreaterThanOrEqual ***/
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThanEqual, "target", {makeValue("0")}, SUCCESS()),
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThanEqual, "target", {makeValue("1")}, SUCCESS()),
        FilterT(R"({"target": 1.3})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeValue("0.9")},
                SUCCESS()),
        FilterT(R"({"target": 1.11})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeValue("1.11")},
                SUCCESS()),
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberGreaterThanEqual, "target", {makeValue("2")}, FAILURE()),
        FilterT(R"({"target": 1.7})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeValue("2")},
                FAILURE()),
        FilterT(R"({"target": 1})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "notTarget",
                {makeValue("0")},
                FAILURE()),
        FilterT(R"({"target": "1"})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeValue("0")},
                FAILURE()),
        FilterT(R"({"target": 1, "ref": 0})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 1})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1.0, "ref": 1})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1.5, "ref": 2})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 0})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "notTarget",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "notRef": 0})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": "1", "ref": 0})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": "0"})",
                opfilter::opBuilderHelperNumberGreaterThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        /*** NumberLessThan ***/
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberLessThan, "target", {makeValue("2")}, SUCCESS()),
        FilterT(R"({"target": 1.6})", opfilter::opBuilderHelperNumberLessThan, "target", {makeValue("2")}, SUCCESS()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberLessThan, "target", {makeValue("1")}, FAILURE()),
        FilterT(R"({"target": 1.1})", opfilter::opBuilderHelperNumberLessThan, "target", {makeValue("1.1")}, FAILURE()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberLessThan, "target", {makeValue("0")}, FAILURE()),
        FilterT(R"({"target": 0.8})", opfilter::opBuilderHelperNumberLessThan, "target", {makeValue("0")}, FAILURE()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberLessThan, "notTarget", {makeValue("2")}, FAILURE()),
        FilterT(R"({"target": "1"})", opfilter::opBuilderHelperNumberLessThan, "target", {makeValue("2")}, FAILURE()),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1.5, "ref": 2})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 1})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1.0, "ref": 1.0})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 0})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1.6, "ref": 0.9})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberLessThan,
                "notTarget",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "notRef": 2})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": "1", "ref": 2})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": "2"})",
                opfilter::opBuilderHelperNumberLessThan,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        /*** NumberLessThanOrEqual ***/
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberLessThanEqual, "target", {makeValue("2")}, SUCCESS()),
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberLessThanEqual, "target", {makeValue("1")}, SUCCESS()),
        FilterT(
            R"({"target": 1.5})", opfilter::opBuilderHelperNumberLessThanEqual, "target", {makeValue("2")}, SUCCESS()),
        FilterT(R"({"target": 1.1})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeValue("1.1")},
                SUCCESS()),
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberLessThanEqual, "target", {makeValue("0")}, FAILURE()),
        FilterT(
            R"({"target": 1})", opfilter::opBuilderHelperNumberLessThanEqual, "notTarget", {makeValue("2")}, FAILURE()),
        FilterT(
            R"({"target": "1"})", opfilter::opBuilderHelperNumberLessThanEqual, "target", {makeValue("2")}, FAILURE()),
        FilterT(R"({"target": "1.7"})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeValue("2")},
                FAILURE()),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 1})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1.8, "ref": 2})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1.5, "ref": 1.8})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 0})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "notTarget",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "notRef": 2})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": "1", "ref": 2})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": "2"})",
                opfilter::opBuilderHelperNumberLessThanEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        /*** NumberNotEqual ***/
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberNotEqual, "target", {makeValue("2")}, SUCCESS()),
        FilterT(R"({"target": 1.6})", opfilter::opBuilderHelperNumberNotEqual, "target", {makeValue("2")}, SUCCESS()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberNotEqual, "target", {makeValue("1")}, FAILURE()),
        FilterT(R"({"target": 1.0})", opfilter::opBuilderHelperNumberNotEqual, "target", {makeValue("1")}, FAILURE()),
        FilterT(R"({"target": 1})", opfilter::opBuilderHelperNumberNotEqual, "notTarget", {makeValue("2")}, FAILURE()),
        FilterT(R"({"target": "1"})", opfilter::opBuilderHelperNumberNotEqual, "target", {makeValue("2")}, FAILURE()),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberNotEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1.7, "ref": 2})",
                opfilter::opBuilderHelperNumberNotEqual,
                "target",
                {makeRef("ref")},
                SUCCESS(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 1})",
                opfilter::opBuilderHelperNumberNotEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1.0, "ref": 1.0})",
                opfilter::opBuilderHelperNumberNotEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": 2})",
                opfilter::opBuilderHelperNumberNotEqual,
                "notTarget",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "notRef": 2})",
                opfilter::opBuilderHelperNumberNotEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": "1", "ref": 2})",
                opfilter::opBuilderHelperNumberNotEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected())),
        FilterT(R"({"target": 1, "ref": "2"})",
                opfilter::opBuilderHelperNumberNotEqual,
                "target",
                {makeRef("ref")},
                FAILURE(customRefExpected()))),
    testNameFormatter<FilterOperationTest>("NumberCmp"));
} // namespace filteroperatestest
