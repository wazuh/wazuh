// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metrics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metrics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metrics_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metrics_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace metrics {
class Dump_Request;
struct Dump_RequestDefaultTypeInternal;
extern Dump_RequestDefaultTypeInternal _Dump_Request_default_instance_;
class Dump_Response;
struct Dump_ResponseDefaultTypeInternal;
extern Dump_ResponseDefaultTypeInternal _Dump_Response_default_instance_;
class Enable_Request;
struct Enable_RequestDefaultTypeInternal;
extern Enable_RequestDefaultTypeInternal _Enable_Request_default_instance_;
class Enable_Response;
struct Enable_ResponseDefaultTypeInternal;
extern Enable_ResponseDefaultTypeInternal _Enable_Response_default_instance_;
class Get_Request;
struct Get_RequestDefaultTypeInternal;
extern Get_RequestDefaultTypeInternal _Get_Request_default_instance_;
class Get_Response;
struct Get_ResponseDefaultTypeInternal;
extern Get_ResponseDefaultTypeInternal _Get_Response_default_instance_;
class List_Request;
struct List_RequestDefaultTypeInternal;
extern List_RequestDefaultTypeInternal _List_Request_default_instance_;
class List_Response;
struct List_ResponseDefaultTypeInternal;
extern List_ResponseDefaultTypeInternal _List_Response_default_instance_;
class Test_Request;
struct Test_RequestDefaultTypeInternal;
extern Test_RequestDefaultTypeInternal _Test_Request_default_instance_;
class Test_Response;
struct Test_ResponseDefaultTypeInternal;
extern Test_ResponseDefaultTypeInternal _Test_Response_default_instance_;
}  // namespace metrics
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::metrics::Dump_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Dump_Request>(Arena*);
template<> ::com::wazuh::api::engine::metrics::Dump_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Dump_Response>(Arena*);
template<> ::com::wazuh::api::engine::metrics::Enable_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Enable_Request>(Arena*);
template<> ::com::wazuh::api::engine::metrics::Enable_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Enable_Response>(Arena*);
template<> ::com::wazuh::api::engine::metrics::Get_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Get_Request>(Arena*);
template<> ::com::wazuh::api::engine::metrics::Get_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Get_Response>(Arena*);
template<> ::com::wazuh::api::engine::metrics::List_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::List_Request>(Arena*);
template<> ::com::wazuh::api::engine::metrics::List_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::List_Response>(Arena*);
template<> ::com::wazuh::api::engine::metrics::Test_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Test_Request>(Arena*);
template<> ::com::wazuh::api::engine::metrics::Test_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::metrics::Test_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace metrics {

// ===================================================================

class Dump_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Dump_Request) */ {
 public:
  inline Dump_Request() : Dump_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Dump_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dump_Request(const Dump_Request& from);
  Dump_Request(Dump_Request&& from) noexcept
    : Dump_Request() {
    *this = ::std::move(from);
  }

  inline Dump_Request& operator=(const Dump_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dump_Request& operator=(Dump_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dump_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dump_Request* internal_default_instance() {
    return reinterpret_cast<const Dump_Request*>(
               &_Dump_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Dump_Request& a, Dump_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Dump_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dump_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dump_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dump_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Dump_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Dump_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Dump_Request";
  }
  protected:
  explicit Dump_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Dump_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Dump_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Dump_Response) */ {
 public:
  inline Dump_Response() : Dump_Response(nullptr) {}
  ~Dump_Response() override;
  explicit PROTOBUF_CONSTEXPR Dump_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dump_Response(const Dump_Response& from);
  Dump_Response(Dump_Response&& from) noexcept
    : Dump_Response() {
    *this = ::std::move(from);
  }

  inline Dump_Response& operator=(const Dump_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dump_Response& operator=(Dump_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Dump_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dump_Response* internal_default_instance() {
    return reinterpret_cast<const Dump_Response*>(
               &_Dump_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Dump_Response& a, Dump_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Dump_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dump_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Dump_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Dump_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Dump_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Dump_Response& from) {
    Dump_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dump_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Dump_Response";
  }
  protected:
  explicit Dump_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kValueFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .google.protobuf.Value value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_value();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::Value* value);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_value();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Dump_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::Value* value_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Get_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Get_Request) */ {
 public:
  inline Get_Request() : Get_Request(nullptr) {}
  ~Get_Request() override;
  explicit PROTOBUF_CONSTEXPR Get_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Get_Request(const Get_Request& from);
  Get_Request(Get_Request&& from) noexcept
    : Get_Request() {
    *this = ::std::move(from);
  }

  inline Get_Request& operator=(const Get_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get_Request& operator=(Get_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Get_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Get_Request* internal_default_instance() {
    return reinterpret_cast<const Get_Request*>(
               &_Get_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Get_Request& a, Get_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Get_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Get_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Get_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Get_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Get_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Get_Request& from) {
    Get_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Get_Request";
  }
  protected:
  explicit Get_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeNameFieldNumber = 1,
    kInstrumentNameFieldNumber = 2,
  };
  // optional string scopeName = 1;
  bool has_scopename() const;
  private:
  bool _internal_has_scopename() const;
  public:
  void clear_scopename();
  const std::string& scopename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scopename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scopename();
  PROTOBUF_NODISCARD std::string* release_scopename();
  void set_allocated_scopename(std::string* scopename);
  private:
  const std::string& _internal_scopename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scopename(const std::string& value);
  std::string* _internal_mutable_scopename();
  public:

  // optional string instrumentName = 2;
  bool has_instrumentname() const;
  private:
  bool _internal_has_instrumentname() const;
  public:
  void clear_instrumentname();
  const std::string& instrumentname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrumentname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrumentname();
  PROTOBUF_NODISCARD std::string* release_instrumentname();
  void set_allocated_instrumentname(std::string* instrumentname);
  private:
  const std::string& _internal_instrumentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrumentname(const std::string& value);
  std::string* _internal_mutable_instrumentname();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Get_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scopename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Get_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Get_Response) */ {
 public:
  inline Get_Response() : Get_Response(nullptr) {}
  ~Get_Response() override;
  explicit PROTOBUF_CONSTEXPR Get_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Get_Response(const Get_Response& from);
  Get_Response(Get_Response&& from) noexcept
    : Get_Response() {
    *this = ::std::move(from);
  }

  inline Get_Response& operator=(const Get_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Get_Response& operator=(Get_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Get_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Get_Response* internal_default_instance() {
    return reinterpret_cast<const Get_Response*>(
               &_Get_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Get_Response& a, Get_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Get_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Get_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Get_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Get_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Get_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Get_Response& from) {
    Get_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Get_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Get_Response";
  }
  protected:
  explicit Get_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kValueFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .google.protobuf.Value value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_value();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::Value* value);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_value();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Get_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::Value* value_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Enable_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Enable_Request) */ {
 public:
  inline Enable_Request() : Enable_Request(nullptr) {}
  ~Enable_Request() override;
  explicit PROTOBUF_CONSTEXPR Enable_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Enable_Request(const Enable_Request& from);
  Enable_Request(Enable_Request&& from) noexcept
    : Enable_Request() {
    *this = ::std::move(from);
  }

  inline Enable_Request& operator=(const Enable_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enable_Request& operator=(Enable_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Enable_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enable_Request* internal_default_instance() {
    return reinterpret_cast<const Enable_Request*>(
               &_Enable_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Enable_Request& a, Enable_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Enable_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enable_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enable_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enable_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Enable_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Enable_Request& from) {
    Enable_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enable_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Enable_Request";
  }
  protected:
  explicit Enable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScopeNameFieldNumber = 1,
    kInstrumentNameFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional string scopeName = 1;
  bool has_scopename() const;
  private:
  bool _internal_has_scopename() const;
  public:
  void clear_scopename();
  const std::string& scopename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scopename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scopename();
  PROTOBUF_NODISCARD std::string* release_scopename();
  void set_allocated_scopename(std::string* scopename);
  private:
  const std::string& _internal_scopename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scopename(const std::string& value);
  std::string* _internal_mutable_scopename();
  public:

  // optional string instrumentName = 2;
  bool has_instrumentname() const;
  private:
  bool _internal_has_instrumentname() const;
  public:
  void clear_instrumentname();
  const std::string& instrumentname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrumentname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrumentname();
  PROTOBUF_NODISCARD std::string* release_instrumentname();
  void set_allocated_instrumentname(std::string* instrumentname);
  private:
  const std::string& _internal_instrumentname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrumentname(const std::string& value);
  std::string* _internal_mutable_instrumentname();
  public:

  // optional bool status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Enable_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scopename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrumentname_;
    bool status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Enable_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Enable_Response) */ {
 public:
  inline Enable_Response() : Enable_Response(nullptr) {}
  ~Enable_Response() override;
  explicit PROTOBUF_CONSTEXPR Enable_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Enable_Response(const Enable_Response& from);
  Enable_Response(Enable_Response&& from) noexcept
    : Enable_Response() {
    *this = ::std::move(from);
  }

  inline Enable_Response& operator=(const Enable_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Enable_Response& operator=(Enable_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Enable_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Enable_Response* internal_default_instance() {
    return reinterpret_cast<const Enable_Response*>(
               &_Enable_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Enable_Response& a, Enable_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Enable_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Enable_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Enable_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Enable_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Enable_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Enable_Response& from) {
    Enable_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Enable_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Enable_Response";
  }
  protected:
  explicit Enable_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kContentFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Enable_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class List_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.List_Request) */ {
 public:
  inline List_Request() : List_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR List_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  List_Request(const List_Request& from);
  List_Request(List_Request&& from) noexcept
    : List_Request() {
    *this = ::std::move(from);
  }

  inline List_Request& operator=(const List_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline List_Request& operator=(List_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const List_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const List_Request* internal_default_instance() {
    return reinterpret_cast<const List_Request*>(
               &_List_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(List_Request& a, List_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(List_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(List_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  List_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<List_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const List_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const List_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.List_Request";
  }
  protected:
  explicit List_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.List_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class List_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.List_Response) */ {
 public:
  inline List_Response() : List_Response(nullptr) {}
  ~List_Response() override;
  explicit PROTOBUF_CONSTEXPR List_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  List_Response(const List_Response& from);
  List_Response(List_Response&& from) noexcept
    : List_Response() {
    *this = ::std::move(from);
  }

  inline List_Response& operator=(const List_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline List_Response& operator=(List_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const List_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const List_Response* internal_default_instance() {
    return reinterpret_cast<const List_Response*>(
               &_List_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(List_Response& a, List_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(List_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(List_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  List_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<List_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const List_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const List_Response& from) {
    List_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(List_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.List_Response";
  }
  protected:
  explicit List_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kValueFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .google.protobuf.Value value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_value();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::Value* value);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_value();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.List_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::Value* value_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Test_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Test_Request) */ {
 public:
  inline Test_Request() : Test_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Test_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Test_Request(const Test_Request& from);
  Test_Request(Test_Request&& from) noexcept
    : Test_Request() {
    *this = ::std::move(from);
  }

  inline Test_Request& operator=(const Test_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test_Request& operator=(Test_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Test_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Test_Request* internal_default_instance() {
    return reinterpret_cast<const Test_Request*>(
               &_Test_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Test_Request& a, Test_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Test_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Test_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Test_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Test_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Test_Request";
  }
  protected:
  explicit Test_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Test_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_metrics_2eproto;
};
// -------------------------------------------------------------------

class Test_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.metrics.Test_Response) */ {
 public:
  inline Test_Response() : Test_Response(nullptr) {}
  ~Test_Response() override;
  explicit PROTOBUF_CONSTEXPR Test_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Test_Response(const Test_Response& from);
  Test_Response(Test_Response&& from) noexcept
    : Test_Response() {
    *this = ::std::move(from);
  }

  inline Test_Response& operator=(const Test_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test_Response& operator=(Test_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Test_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Test_Response* internal_default_instance() {
    return reinterpret_cast<const Test_Response*>(
               &_Test_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Test_Response& a, Test_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Test_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Test_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Test_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Test_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Test_Response& from) {
    Test_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.metrics.Test_Response";
  }
  protected:
  explicit Test_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string content = 3;
  int content_size() const;
  private:
  int _internal_content_size() const;
  public:
  void clear_content();
  const std::string& content(int index) const;
  std::string* mutable_content(int index);
  void set_content(int index, const std::string& value);
  void set_content(int index, std::string&& value);
  void set_content(int index, const char* value);
  void set_content(int index, const char* value, size_t size);
  std::string* add_content();
  void add_content(const std::string& value);
  void add_content(std::string&& value);
  void add_content(const char* value);
  void add_content(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& content() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_content();
  private:
  const std::string& _internal_content(int index) const;
  std::string* _internal_add_content();
  public:

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.metrics.Test_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metrics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Dump_Request

// -------------------------------------------------------------------

// Dump_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void Dump_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus Dump_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus Dump_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Dump_Response.status)
  return _internal_status();
}
inline void Dump_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void Dump_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Dump_Response.status)
}

// optional string error = 2;
inline bool Dump_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Dump_Response::has_error() const {
  return _internal_has_error();
}
inline void Dump_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Dump_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Dump_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Dump_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Dump_Response.error)
}
inline std::string* Dump_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Dump_Response.error)
  return _s;
}
inline const std::string& Dump_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void Dump_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Dump_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* Dump_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Dump_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Dump_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Dump_Response.error)
}

// optional .google.protobuf.Value value = 3;
inline bool Dump_Response::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool Dump_Response::has_value() const {
  return _internal_has_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Dump_Response::_internal_value() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Dump_Response::value() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Dump_Response.value)
  return _internal_value();
}
inline void Dump_Response::unsafe_arena_set_allocated_value(
    ::PROTOBUF_NAMESPACE_ID::Value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.metrics.Dump_Response.value)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Dump_Response::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Dump_Response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Dump_Response.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Dump_Response::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Dump_Response::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Dump_Response.value)
  return _msg;
}
inline void Dump_Response::set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Dump_Response.value)
}

// -------------------------------------------------------------------

// Get_Request

// optional string scopeName = 1;
inline bool Get_Request::_internal_has_scopename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Get_Request::has_scopename() const {
  return _internal_has_scopename();
}
inline void Get_Request::clear_scopename() {
  _impl_.scopename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Get_Request::scopename() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Get_Request.scopeName)
  return _internal_scopename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Get_Request::set_scopename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.scopename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Get_Request.scopeName)
}
inline std::string* Get_Request::mutable_scopename() {
  std::string* _s = _internal_mutable_scopename();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Get_Request.scopeName)
  return _s;
}
inline const std::string& Get_Request::_internal_scopename() const {
  return _impl_.scopename_.Get();
}
inline void Get_Request::_internal_set_scopename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scopename_.Set(value, GetArenaForAllocation());
}
inline std::string* Get_Request::_internal_mutable_scopename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.scopename_.Mutable(GetArenaForAllocation());
}
inline std::string* Get_Request::release_scopename() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Get_Request.scopeName)
  if (!_internal_has_scopename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.scopename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scopename_.IsDefault()) {
    _impl_.scopename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Get_Request::set_allocated_scopename(std::string* scopename) {
  if (scopename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scopename_.SetAllocated(scopename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scopename_.IsDefault()) {
    _impl_.scopename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Get_Request.scopeName)
}

// optional string instrumentName = 2;
inline bool Get_Request::_internal_has_instrumentname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Get_Request::has_instrumentname() const {
  return _internal_has_instrumentname();
}
inline void Get_Request::clear_instrumentname() {
  _impl_.instrumentname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Get_Request::instrumentname() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Get_Request.instrumentName)
  return _internal_instrumentname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Get_Request::set_instrumentname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.instrumentname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Get_Request.instrumentName)
}
inline std::string* Get_Request::mutable_instrumentname() {
  std::string* _s = _internal_mutable_instrumentname();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Get_Request.instrumentName)
  return _s;
}
inline const std::string& Get_Request::_internal_instrumentname() const {
  return _impl_.instrumentname_.Get();
}
inline void Get_Request::_internal_set_instrumentname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrumentname_.Set(value, GetArenaForAllocation());
}
inline std::string* Get_Request::_internal_mutable_instrumentname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.instrumentname_.Mutable(GetArenaForAllocation());
}
inline std::string* Get_Request::release_instrumentname() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Get_Request.instrumentName)
  if (!_internal_has_instrumentname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.instrumentname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrumentname_.IsDefault()) {
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Get_Request::set_allocated_instrumentname(std::string* instrumentname) {
  if (instrumentname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instrumentname_.SetAllocated(instrumentname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrumentname_.IsDefault()) {
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Get_Request.instrumentName)
}

// -------------------------------------------------------------------

// Get_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void Get_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus Get_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus Get_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Get_Response.status)
  return _internal_status();
}
inline void Get_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void Get_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Get_Response.status)
}

// optional string error = 2;
inline bool Get_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Get_Response::has_error() const {
  return _internal_has_error();
}
inline void Get_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Get_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Get_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Get_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Get_Response.error)
}
inline std::string* Get_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Get_Response.error)
  return _s;
}
inline const std::string& Get_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void Get_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Get_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* Get_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Get_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Get_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Get_Response.error)
}

// optional .google.protobuf.Value value = 3;
inline bool Get_Response::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool Get_Response::has_value() const {
  return _internal_has_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Get_Response::_internal_value() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Get_Response::value() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Get_Response.value)
  return _internal_value();
}
inline void Get_Response::unsafe_arena_set_allocated_value(
    ::PROTOBUF_NAMESPACE_ID::Value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.metrics.Get_Response.value)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Get_Response::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Get_Response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Get_Response.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Get_Response::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Get_Response::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Get_Response.value)
  return _msg;
}
inline void Get_Response::set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Get_Response.value)
}

// -------------------------------------------------------------------

// Enable_Request

// optional string scopeName = 1;
inline bool Enable_Request::_internal_has_scopename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Enable_Request::has_scopename() const {
  return _internal_has_scopename();
}
inline void Enable_Request::clear_scopename() {
  _impl_.scopename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Enable_Request::scopename() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Enable_Request.scopeName)
  return _internal_scopename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Enable_Request::set_scopename(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.scopename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Enable_Request.scopeName)
}
inline std::string* Enable_Request::mutable_scopename() {
  std::string* _s = _internal_mutable_scopename();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Enable_Request.scopeName)
  return _s;
}
inline const std::string& Enable_Request::_internal_scopename() const {
  return _impl_.scopename_.Get();
}
inline void Enable_Request::_internal_set_scopename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.scopename_.Set(value, GetArenaForAllocation());
}
inline std::string* Enable_Request::_internal_mutable_scopename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.scopename_.Mutable(GetArenaForAllocation());
}
inline std::string* Enable_Request::release_scopename() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Enable_Request.scopeName)
  if (!_internal_has_scopename()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.scopename_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scopename_.IsDefault()) {
    _impl_.scopename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Enable_Request::set_allocated_scopename(std::string* scopename) {
  if (scopename != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scopename_.SetAllocated(scopename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.scopename_.IsDefault()) {
    _impl_.scopename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Enable_Request.scopeName)
}

// optional string instrumentName = 2;
inline bool Enable_Request::_internal_has_instrumentname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Enable_Request::has_instrumentname() const {
  return _internal_has_instrumentname();
}
inline void Enable_Request::clear_instrumentname() {
  _impl_.instrumentname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Enable_Request::instrumentname() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Enable_Request.instrumentName)
  return _internal_instrumentname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Enable_Request::set_instrumentname(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.instrumentname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Enable_Request.instrumentName)
}
inline std::string* Enable_Request::mutable_instrumentname() {
  std::string* _s = _internal_mutable_instrumentname();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Enable_Request.instrumentName)
  return _s;
}
inline const std::string& Enable_Request::_internal_instrumentname() const {
  return _impl_.instrumentname_.Get();
}
inline void Enable_Request::_internal_set_instrumentname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrumentname_.Set(value, GetArenaForAllocation());
}
inline std::string* Enable_Request::_internal_mutable_instrumentname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.instrumentname_.Mutable(GetArenaForAllocation());
}
inline std::string* Enable_Request::release_instrumentname() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Enable_Request.instrumentName)
  if (!_internal_has_instrumentname()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.instrumentname_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrumentname_.IsDefault()) {
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Enable_Request::set_allocated_instrumentname(std::string* instrumentname) {
  if (instrumentname != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instrumentname_.SetAllocated(instrumentname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.instrumentname_.IsDefault()) {
    _impl_.instrumentname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Enable_Request.instrumentName)
}

// optional bool status = 3;
inline bool Enable_Request::_internal_has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Enable_Request::has_status() const {
  return _internal_has_status();
}
inline void Enable_Request::clear_status() {
  _impl_.status_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool Enable_Request::_internal_status() const {
  return _impl_.status_;
}
inline bool Enable_Request::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Enable_Request.status)
  return _internal_status();
}
inline void Enable_Request::_internal_set_status(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}
inline void Enable_Request::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Enable_Request.status)
}

// -------------------------------------------------------------------

// Enable_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void Enable_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus Enable_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus Enable_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Enable_Response.status)
  return _internal_status();
}
inline void Enable_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void Enable_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Enable_Response.status)
}

// optional string error = 2;
inline bool Enable_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Enable_Response::has_error() const {
  return _internal_has_error();
}
inline void Enable_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Enable_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Enable_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Enable_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Enable_Response.error)
}
inline std::string* Enable_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Enable_Response.error)
  return _s;
}
inline const std::string& Enable_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void Enable_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Enable_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* Enable_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Enable_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Enable_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Enable_Response.error)
}

// optional string content = 3;
inline bool Enable_Response::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Enable_Response::has_content() const {
  return _internal_has_content();
}
inline void Enable_Response::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Enable_Response::content() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Enable_Response.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Enable_Response::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Enable_Response.content)
}
inline std::string* Enable_Response::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Enable_Response.content)
  return _s;
}
inline const std::string& Enable_Response::_internal_content() const {
  return _impl_.content_.Get();
}
inline void Enable_Response::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* Enable_Response::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* Enable_Response::release_content() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Enable_Response.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Enable_Response::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Enable_Response.content)
}

// -------------------------------------------------------------------

// List_Request

// -------------------------------------------------------------------

// List_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void List_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus List_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus List_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.List_Response.status)
  return _internal_status();
}
inline void List_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void List_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.List_Response.status)
}

// optional string error = 2;
inline bool List_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool List_Response::has_error() const {
  return _internal_has_error();
}
inline void List_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& List_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.List_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void List_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.List_Response.error)
}
inline std::string* List_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.List_Response.error)
  return _s;
}
inline const std::string& List_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void List_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* List_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* List_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.List_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void List_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.List_Response.error)
}

// optional .google.protobuf.Value value = 3;
inline bool List_Response::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool List_Response::has_value() const {
  return _internal_has_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& List_Response::_internal_value() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& List_Response::value() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.List_Response.value)
  return _internal_value();
}
inline void List_Response::unsafe_arena_set_allocated_value(
    ::PROTOBUF_NAMESPACE_ID::Value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.metrics.List_Response.value)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* List_Response::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* List_Response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.List_Response.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* List_Response::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* List_Response::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.List_Response.value)
  return _msg;
}
inline void List_Response::set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.List_Response.value)
}

// -------------------------------------------------------------------

// Test_Request

// -------------------------------------------------------------------

// Test_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void Test_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus Test_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus Test_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Test_Response.status)
  return _internal_status();
}
inline void Test_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void Test_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Test_Response.status)
}

// optional string error = 2;
inline bool Test_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Test_Response::has_error() const {
  return _internal_has_error();
}
inline void Test_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Test_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Test_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Test_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Test_Response.error)
}
inline std::string* Test_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Test_Response.error)
  return _s;
}
inline const std::string& Test_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void Test_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* Test_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* Test_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.metrics.Test_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Test_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.metrics.Test_Response.error)
}

// repeated string content = 3;
inline int Test_Response::_internal_content_size() const {
  return _impl_.content_.size();
}
inline int Test_Response::content_size() const {
  return _internal_content_size();
}
inline void Test_Response::clear_content() {
  _impl_.content_.Clear();
}
inline std::string* Test_Response::add_content() {
  std::string* _s = _internal_add_content();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.metrics.Test_Response.content)
  return _s;
}
inline const std::string& Test_Response::_internal_content(int index) const {
  return _impl_.content_.Get(index);
}
inline const std::string& Test_Response::content(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.metrics.Test_Response.content)
  return _internal_content(index);
}
inline std::string* Test_Response::mutable_content(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.metrics.Test_Response.content)
  return _impl_.content_.Mutable(index);
}
inline void Test_Response::set_content(int index, const std::string& value) {
  _impl_.content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline void Test_Response::set_content(int index, std::string&& value) {
  _impl_.content_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline void Test_Response::set_content(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.content_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline void Test_Response::set_content(int index, const char* value, size_t size) {
  _impl_.content_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline std::string* Test_Response::_internal_add_content() {
  return _impl_.content_.Add();
}
inline void Test_Response::add_content(const std::string& value) {
  _impl_.content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline void Test_Response::add_content(std::string&& value) {
  _impl_.content_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline void Test_Response::add_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.content_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline void Test_Response::add_content(const char* value, size_t size) {
  _impl_.content_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.metrics.Test_Response.content)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Test_Response::content() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.metrics.Test_Response.content)
  return _impl_.content_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Test_Response::mutable_content() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.metrics.Test_Response.content)
  return &_impl_.content_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metrics
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metrics_2eproto
