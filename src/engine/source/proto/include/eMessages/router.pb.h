// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace router {
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class EntryPost;
struct EntryPostDefaultTypeInternal;
extern EntryPostDefaultTypeInternal _EntryPost_default_instance_;
class EpsDisable_Request;
struct EpsDisable_RequestDefaultTypeInternal;
extern EpsDisable_RequestDefaultTypeInternal _EpsDisable_Request_default_instance_;
class EpsEnable_Request;
struct EpsEnable_RequestDefaultTypeInternal;
extern EpsEnable_RequestDefaultTypeInternal _EpsEnable_Request_default_instance_;
class EpsGet_Request;
struct EpsGet_RequestDefaultTypeInternal;
extern EpsGet_RequestDefaultTypeInternal _EpsGet_Request_default_instance_;
class EpsGet_Response;
struct EpsGet_ResponseDefaultTypeInternal;
extern EpsGet_ResponseDefaultTypeInternal _EpsGet_Response_default_instance_;
class EpsUpdate_Request;
struct EpsUpdate_RequestDefaultTypeInternal;
extern EpsUpdate_RequestDefaultTypeInternal _EpsUpdate_Request_default_instance_;
class QueuePost_Request;
struct QueuePost_RequestDefaultTypeInternal;
extern QueuePost_RequestDefaultTypeInternal _QueuePost_Request_default_instance_;
class RouteDelete_Request;
struct RouteDelete_RequestDefaultTypeInternal;
extern RouteDelete_RequestDefaultTypeInternal _RouteDelete_Request_default_instance_;
class RouteGet_Request;
struct RouteGet_RequestDefaultTypeInternal;
extern RouteGet_RequestDefaultTypeInternal _RouteGet_Request_default_instance_;
class RouteGet_Response;
struct RouteGet_ResponseDefaultTypeInternal;
extern RouteGet_ResponseDefaultTypeInternal _RouteGet_Response_default_instance_;
class RoutePatchPriority_Request;
struct RoutePatchPriority_RequestDefaultTypeInternal;
extern RoutePatchPriority_RequestDefaultTypeInternal _RoutePatchPriority_Request_default_instance_;
class RoutePost_Request;
struct RoutePost_RequestDefaultTypeInternal;
extern RoutePost_RequestDefaultTypeInternal _RoutePost_Request_default_instance_;
class RouteReload_Request;
struct RouteReload_RequestDefaultTypeInternal;
extern RouteReload_RequestDefaultTypeInternal _RouteReload_Request_default_instance_;
class TableGet_Request;
struct TableGet_RequestDefaultTypeInternal;
extern TableGet_RequestDefaultTypeInternal _TableGet_Request_default_instance_;
class TableGet_Response;
struct TableGet_ResponseDefaultTypeInternal;
extern TableGet_ResponseDefaultTypeInternal _TableGet_Response_default_instance_;
}  // namespace router
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::router::Entry* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::Entry>(Arena*);
template<> ::com::wazuh::api::engine::router::EntryPost* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::EntryPost>(Arena*);
template<> ::com::wazuh::api::engine::router::EpsDisable_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::EpsDisable_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::EpsEnable_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::EpsEnable_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::EpsGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::EpsGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::EpsGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::EpsGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::router::EpsUpdate_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::EpsUpdate_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::QueuePost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::QueuePost_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::RouteDelete_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RouteDelete_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::RouteGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RouteGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::RouteGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RouteGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::router::RoutePatchPriority_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RoutePatchPriority_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::RoutePost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RoutePost_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::RouteReload_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::RouteReload_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::TableGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::TableGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::router::TableGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::router::TableGet_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace router {

enum State : int {
  STATE_UNKNOWN = 0,
  DISABLED = 1,
  ENABLED = 2,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool State_IsValid(int value);
constexpr State State_MIN = STATE_UNKNOWN;
constexpr State State_MAX = ENABLED;
constexpr int State_ARRAYSIZE = State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor();
template<typename T>
inline const std::string& State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    State_descriptor(), enum_t_value);
}
inline bool State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
enum Sync : int {
  SYNC_UNKNOWN = 0,
  UPDATED = 1,
  OUTDATED = 2,
  ERROR = 3,
  Sync_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Sync_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Sync_IsValid(int value);
constexpr Sync Sync_MIN = SYNC_UNKNOWN;
constexpr Sync Sync_MAX = ERROR;
constexpr int Sync_ARRAYSIZE = Sync_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sync_descriptor();
template<typename T>
inline const std::string& Sync_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sync>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sync_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sync_descriptor(), enum_t_value);
}
inline bool Sync_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Sync* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sync>(
    Sync_descriptor(), name, value);
}
// ===================================================================

class EntryPost final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.EntryPost) */ {
 public:
  inline EntryPost() : EntryPost(nullptr) {}
  ~EntryPost() override;
  explicit PROTOBUF_CONSTEXPR EntryPost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EntryPost(const EntryPost& from);
  EntryPost(EntryPost&& from) noexcept
    : EntryPost() {
    *this = ::std::move(from);
  }

  inline EntryPost& operator=(const EntryPost& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntryPost& operator=(EntryPost&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntryPost& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntryPost* internal_default_instance() {
    return reinterpret_cast<const EntryPost*>(
               &_EntryPost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EntryPost& a, EntryPost& b) {
    a.Swap(&b);
  }
  inline void Swap(EntryPost* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntryPost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntryPost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntryPost>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EntryPost& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EntryPost& from) {
    EntryPost::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EntryPost* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.EntryPost";
  }
  protected:
  explicit EntryPost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kFilterFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kPriorityFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string policy = 2;
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // string filter = 3;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // optional string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 priority = 4;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.EntryPost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t priority_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  explicit PROTOBUF_CONSTEXPR Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entry& from) {
    Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kFilterFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kPriorityFieldNumber = 4,
    kPolicySyncFieldNumber = 6,
    kEntryStatusFieldNumber = 7,
    kUptimeFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string policy = 2;
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // string filter = 3;
  void clear_filter();
  const std::string& filter() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter();
  PROTOBUF_NODISCARD std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  private:
  const std::string& _internal_filter() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // optional string description = 5;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 priority = 4;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // .com.wazuh.api.engine.router.Sync policy_sync = 6;
  void clear_policy_sync();
  ::com::wazuh::api::engine::router::Sync policy_sync() const;
  void set_policy_sync(::com::wazuh::api::engine::router::Sync value);
  private:
  ::com::wazuh::api::engine::router::Sync _internal_policy_sync() const;
  void _internal_set_policy_sync(::com::wazuh::api::engine::router::Sync value);
  public:

  // .com.wazuh.api.engine.router.State entry_status = 7;
  void clear_entry_status();
  ::com::wazuh::api::engine::router::State entry_status() const;
  void set_entry_status(::com::wazuh::api::engine::router::State value);
  private:
  ::com::wazuh::api::engine::router::State _internal_entry_status() const;
  void _internal_set_entry_status(::com::wazuh::api::engine::router::State value);
  public:

  // uint32 uptime = 8;
  void clear_uptime();
  uint32_t uptime() const;
  void set_uptime(uint32_t value);
  private:
  uint32_t _internal_uptime() const;
  void _internal_set_uptime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t priority_;
    int policy_sync_;
    int entry_status_;
    uint32_t uptime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RoutePost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RoutePost_Request) */ {
 public:
  inline RoutePost_Request() : RoutePost_Request(nullptr) {}
  ~RoutePost_Request() override;
  explicit PROTOBUF_CONSTEXPR RoutePost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutePost_Request(const RoutePost_Request& from);
  RoutePost_Request(RoutePost_Request&& from) noexcept
    : RoutePost_Request() {
    *this = ::std::move(from);
  }

  inline RoutePost_Request& operator=(const RoutePost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutePost_Request& operator=(RoutePost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutePost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutePost_Request* internal_default_instance() {
    return reinterpret_cast<const RoutePost_Request*>(
               &_RoutePost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoutePost_Request& a, RoutePost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutePost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutePost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutePost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutePost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutePost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutePost_Request& from) {
    RoutePost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutePost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RoutePost_Request";
  }
  protected:
  explicit RoutePost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
  };
  // optional .com.wazuh.api.engine.router.EntryPost route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::com::wazuh::api::engine::router::EntryPost& route() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::router::EntryPost* release_route();
  ::com::wazuh::api::engine::router::EntryPost* mutable_route();
  void set_allocated_route(::com::wazuh::api::engine::router::EntryPost* route);
  private:
  const ::com::wazuh::api::engine::router::EntryPost& _internal_route() const;
  ::com::wazuh::api::engine::router::EntryPost* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::com::wazuh::api::engine::router::EntryPost* route);
  ::com::wazuh::api::engine::router::EntryPost* unsafe_arena_release_route();

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RoutePost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::wazuh::api::engine::router::EntryPost* route_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteDelete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RouteDelete_Request) */ {
 public:
  inline RouteDelete_Request() : RouteDelete_Request(nullptr) {}
  ~RouteDelete_Request() override;
  explicit PROTOBUF_CONSTEXPR RouteDelete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteDelete_Request(const RouteDelete_Request& from);
  RouteDelete_Request(RouteDelete_Request&& from) noexcept
    : RouteDelete_Request() {
    *this = ::std::move(from);
  }

  inline RouteDelete_Request& operator=(const RouteDelete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteDelete_Request& operator=(RouteDelete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteDelete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteDelete_Request* internal_default_instance() {
    return reinterpret_cast<const RouteDelete_Request*>(
               &_RouteDelete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RouteDelete_Request& a, RouteDelete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteDelete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteDelete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteDelete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteDelete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteDelete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteDelete_Request& from) {
    RouteDelete_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteDelete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RouteDelete_Request";
  }
  protected:
  explicit RouteDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RouteDelete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RouteGet_Request) */ {
 public:
  inline RouteGet_Request() : RouteGet_Request(nullptr) {}
  ~RouteGet_Request() override;
  explicit PROTOBUF_CONSTEXPR RouteGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteGet_Request(const RouteGet_Request& from);
  RouteGet_Request(RouteGet_Request&& from) noexcept
    : RouteGet_Request() {
    *this = ::std::move(from);
  }

  inline RouteGet_Request& operator=(const RouteGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteGet_Request& operator=(RouteGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteGet_Request* internal_default_instance() {
    return reinterpret_cast<const RouteGet_Request*>(
               &_RouteGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteGet_Request& a, RouteGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteGet_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteGet_Request& from) {
    RouteGet_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteGet_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RouteGet_Request";
  }
  protected:
  explicit RouteGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RouteGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RouteGet_Response) */ {
 public:
  inline RouteGet_Response() : RouteGet_Response(nullptr) {}
  ~RouteGet_Response() override;
  explicit PROTOBUF_CONSTEXPR RouteGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteGet_Response(const RouteGet_Response& from);
  RouteGet_Response(RouteGet_Response&& from) noexcept
    : RouteGet_Response() {
    *this = ::std::move(from);
  }

  inline RouteGet_Response& operator=(const RouteGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteGet_Response& operator=(RouteGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteGet_Response* internal_default_instance() {
    return reinterpret_cast<const RouteGet_Response*>(
               &_RouteGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RouteGet_Response& a, RouteGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteGet_Response& from) {
    RouteGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RouteGet_Response";
  }
  protected:
  explicit RouteGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kRouteFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .com.wazuh.api.engine.router.Entry route = 3;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::com::wazuh::api::engine::router::Entry& route() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::router::Entry* release_route();
  ::com::wazuh::api::engine::router::Entry* mutable_route();
  void set_allocated_route(::com::wazuh::api::engine::router::Entry* route);
  private:
  const ::com::wazuh::api::engine::router::Entry& _internal_route() const;
  ::com::wazuh::api::engine::router::Entry* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::com::wazuh::api::engine::router::Entry* route);
  ::com::wazuh::api::engine::router::Entry* unsafe_arena_release_route();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RouteGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::com::wazuh::api::engine::router::Entry* route_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteReload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RouteReload_Request) */ {
 public:
  inline RouteReload_Request() : RouteReload_Request(nullptr) {}
  ~RouteReload_Request() override;
  explicit PROTOBUF_CONSTEXPR RouteReload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RouteReload_Request(const RouteReload_Request& from);
  RouteReload_Request(RouteReload_Request&& from) noexcept
    : RouteReload_Request() {
    *this = ::std::move(from);
  }

  inline RouteReload_Request& operator=(const RouteReload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteReload_Request& operator=(RouteReload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RouteReload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RouteReload_Request* internal_default_instance() {
    return reinterpret_cast<const RouteReload_Request*>(
               &_RouteReload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RouteReload_Request& a, RouteReload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteReload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteReload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RouteReload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RouteReload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RouteReload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RouteReload_Request& from) {
    RouteReload_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteReload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RouteReload_Request";
  }
  protected:
  explicit RouteReload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RouteReload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RoutePatchPriority_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.RoutePatchPriority_Request) */ {
 public:
  inline RoutePatchPriority_Request() : RoutePatchPriority_Request(nullptr) {}
  ~RoutePatchPriority_Request() override;
  explicit PROTOBUF_CONSTEXPR RoutePatchPriority_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutePatchPriority_Request(const RoutePatchPriority_Request& from);
  RoutePatchPriority_Request(RoutePatchPriority_Request&& from) noexcept
    : RoutePatchPriority_Request() {
    *this = ::std::move(from);
  }

  inline RoutePatchPriority_Request& operator=(const RoutePatchPriority_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutePatchPriority_Request& operator=(RoutePatchPriority_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutePatchPriority_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutePatchPriority_Request* internal_default_instance() {
    return reinterpret_cast<const RoutePatchPriority_Request*>(
               &_RoutePatchPriority_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RoutePatchPriority_Request& a, RoutePatchPriority_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutePatchPriority_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutePatchPriority_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutePatchPriority_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutePatchPriority_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutePatchPriority_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutePatchPriority_Request& from) {
    RoutePatchPriority_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutePatchPriority_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.RoutePatchPriority_Request";
  }
  protected:
  explicit RoutePatchPriority_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPriorityFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 priority = 2;
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.RoutePatchPriority_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class TableGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.TableGet_Request) */ {
 public:
  inline TableGet_Request() : TableGet_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TableGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableGet_Request(const TableGet_Request& from);
  TableGet_Request(TableGet_Request&& from) noexcept
    : TableGet_Request() {
    *this = ::std::move(from);
  }

  inline TableGet_Request& operator=(const TableGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableGet_Request& operator=(TableGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableGet_Request* internal_default_instance() {
    return reinterpret_cast<const TableGet_Request*>(
               &_TableGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TableGet_Request& a, TableGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(TableGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TableGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TableGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.TableGet_Request";
  }
  protected:
  explicit TableGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.TableGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class TableGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.TableGet_Response) */ {
 public:
  inline TableGet_Response() : TableGet_Response(nullptr) {}
  ~TableGet_Response() override;
  explicit PROTOBUF_CONSTEXPR TableGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableGet_Response(const TableGet_Response& from);
  TableGet_Response(TableGet_Response&& from) noexcept
    : TableGet_Response() {
    *this = ::std::move(from);
  }

  inline TableGet_Response& operator=(const TableGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableGet_Response& operator=(TableGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableGet_Response* internal_default_instance() {
    return reinterpret_cast<const TableGet_Response*>(
               &_TableGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TableGet_Response& a, TableGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(TableGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableGet_Response& from) {
    TableGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.TableGet_Response";
  }
  protected:
  explicit TableGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .com.wazuh.api.engine.router.Entry table = 3;
  int table_size() const;
  private:
  int _internal_table_size() const;
  public:
  void clear_table();
  ::com::wazuh::api::engine::router::Entry* mutable_table(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::router::Entry >*
      mutable_table();
  private:
  const ::com::wazuh::api::engine::router::Entry& _internal_table(int index) const;
  ::com::wazuh::api::engine::router::Entry* _internal_add_table();
  public:
  const ::com::wazuh::api::engine::router::Entry& table(int index) const;
  ::com::wazuh::api::engine::router::Entry* add_table();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::router::Entry >&
      table() const;

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.TableGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::router::Entry > table_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class QueuePost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.QueuePost_Request) */ {
 public:
  inline QueuePost_Request() : QueuePost_Request(nullptr) {}
  ~QueuePost_Request() override;
  explicit PROTOBUF_CONSTEXPR QueuePost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueuePost_Request(const QueuePost_Request& from);
  QueuePost_Request(QueuePost_Request&& from) noexcept
    : QueuePost_Request() {
    *this = ::std::move(from);
  }

  inline QueuePost_Request& operator=(const QueuePost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueuePost_Request& operator=(QueuePost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueuePost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueuePost_Request* internal_default_instance() {
    return reinterpret_cast<const QueuePost_Request*>(
               &_QueuePost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueuePost_Request& a, QueuePost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(QueuePost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueuePost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueuePost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueuePost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueuePost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueuePost_Request& from) {
    QueuePost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueuePost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.QueuePost_Request";
  }
  protected:
  explicit QueuePost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWazuhEventFieldNumber = 1,
  };
  // string wazuh_event = 1;
  void clear_wazuh_event();
  const std::string& wazuh_event() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wazuh_event(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wazuh_event();
  PROTOBUF_NODISCARD std::string* release_wazuh_event();
  void set_allocated_wazuh_event(std::string* wazuh_event);
  private:
  const std::string& _internal_wazuh_event() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wazuh_event(const std::string& value);
  std::string* _internal_mutable_wazuh_event();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.QueuePost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wazuh_event_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class EpsUpdate_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.EpsUpdate_Request) */ {
 public:
  inline EpsUpdate_Request() : EpsUpdate_Request(nullptr) {}
  ~EpsUpdate_Request() override;
  explicit PROTOBUF_CONSTEXPR EpsUpdate_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpsUpdate_Request(const EpsUpdate_Request& from);
  EpsUpdate_Request(EpsUpdate_Request&& from) noexcept
    : EpsUpdate_Request() {
    *this = ::std::move(from);
  }

  inline EpsUpdate_Request& operator=(const EpsUpdate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpsUpdate_Request& operator=(EpsUpdate_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpsUpdate_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpsUpdate_Request* internal_default_instance() {
    return reinterpret_cast<const EpsUpdate_Request*>(
               &_EpsUpdate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EpsUpdate_Request& a, EpsUpdate_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(EpsUpdate_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpsUpdate_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpsUpdate_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpsUpdate_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EpsUpdate_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EpsUpdate_Request& from) {
    EpsUpdate_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpsUpdate_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.EpsUpdate_Request";
  }
  protected:
  explicit EpsUpdate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpsFieldNumber = 1,
    kRefreshIntervalFieldNumber = 2,
  };
  // uint32 eps = 1;
  void clear_eps();
  uint32_t eps() const;
  void set_eps(uint32_t value);
  private:
  uint32_t _internal_eps() const;
  void _internal_set_eps(uint32_t value);
  public:

  // uint32 refresh_interval = 2;
  void clear_refresh_interval();
  uint32_t refresh_interval() const;
  void set_refresh_interval(uint32_t value);
  private:
  uint32_t _internal_refresh_interval() const;
  void _internal_set_refresh_interval(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.EpsUpdate_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t eps_;
    uint32_t refresh_interval_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class EpsGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.EpsGet_Request) */ {
 public:
  inline EpsGet_Request() : EpsGet_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EpsGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpsGet_Request(const EpsGet_Request& from);
  EpsGet_Request(EpsGet_Request&& from) noexcept
    : EpsGet_Request() {
    *this = ::std::move(from);
  }

  inline EpsGet_Request& operator=(const EpsGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpsGet_Request& operator=(EpsGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpsGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpsGet_Request* internal_default_instance() {
    return reinterpret_cast<const EpsGet_Request*>(
               &_EpsGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EpsGet_Request& a, EpsGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(EpsGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpsGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpsGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpsGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EpsGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EpsGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.EpsGet_Request";
  }
  protected:
  explicit EpsGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.EpsGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class EpsGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.EpsGet_Response) */ {
 public:
  inline EpsGet_Response() : EpsGet_Response(nullptr) {}
  ~EpsGet_Response() override;
  explicit PROTOBUF_CONSTEXPR EpsGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpsGet_Response(const EpsGet_Response& from);
  EpsGet_Response(EpsGet_Response&& from) noexcept
    : EpsGet_Response() {
    *this = ::std::move(from);
  }

  inline EpsGet_Response& operator=(const EpsGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpsGet_Response& operator=(EpsGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpsGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpsGet_Response* internal_default_instance() {
    return reinterpret_cast<const EpsGet_Response*>(
               &_EpsGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EpsGet_Response& a, EpsGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(EpsGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpsGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpsGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpsGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EpsGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EpsGet_Response& from) {
    EpsGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EpsGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.EpsGet_Response";
  }
  protected:
  explicit EpsGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
    kEpsFieldNumber = 3,
    kRefreshIntervalFieldNumber = 4,
    kEnabledFieldNumber = 5,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // uint32 eps = 3;
  void clear_eps();
  uint32_t eps() const;
  void set_eps(uint32_t value);
  private:
  uint32_t _internal_eps() const;
  void _internal_set_eps(uint32_t value);
  public:

  // uint32 refresh_interval = 4;
  void clear_refresh_interval();
  uint32_t refresh_interval() const;
  void set_refresh_interval(uint32_t value);
  private:
  uint32_t _internal_refresh_interval() const;
  void _internal_set_refresh_interval(uint32_t value);
  public:

  // bool enabled = 5;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.EpsGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
    uint32_t eps_;
    uint32_t refresh_interval_;
    bool enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class EpsEnable_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.EpsEnable_Request) */ {
 public:
  inline EpsEnable_Request() : EpsEnable_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EpsEnable_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpsEnable_Request(const EpsEnable_Request& from);
  EpsEnable_Request(EpsEnable_Request&& from) noexcept
    : EpsEnable_Request() {
    *this = ::std::move(from);
  }

  inline EpsEnable_Request& operator=(const EpsEnable_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpsEnable_Request& operator=(EpsEnable_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpsEnable_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpsEnable_Request* internal_default_instance() {
    return reinterpret_cast<const EpsEnable_Request*>(
               &_EpsEnable_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EpsEnable_Request& a, EpsEnable_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(EpsEnable_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpsEnable_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpsEnable_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpsEnable_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EpsEnable_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EpsEnable_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.EpsEnable_Request";
  }
  protected:
  explicit EpsEnable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.EpsEnable_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class EpsDisable_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.router.EpsDisable_Request) */ {
 public:
  inline EpsDisable_Request() : EpsDisable_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR EpsDisable_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EpsDisable_Request(const EpsDisable_Request& from);
  EpsDisable_Request(EpsDisable_Request&& from) noexcept
    : EpsDisable_Request() {
    *this = ::std::move(from);
  }

  inline EpsDisable_Request& operator=(const EpsDisable_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline EpsDisable_Request& operator=(EpsDisable_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EpsDisable_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const EpsDisable_Request* internal_default_instance() {
    return reinterpret_cast<const EpsDisable_Request*>(
               &_EpsDisable_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EpsDisable_Request& a, EpsDisable_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(EpsDisable_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EpsDisable_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EpsDisable_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EpsDisable_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const EpsDisable_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const EpsDisable_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.router.EpsDisable_Request";
  }
  protected:
  explicit EpsDisable_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.router.EpsDisable_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EntryPost

// string name = 1;
inline void EntryPost::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EntryPost::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EntryPost.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryPost::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EntryPost.name)
}
inline std::string* EntryPost::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.EntryPost.name)
  return _s;
}
inline const std::string& EntryPost::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EntryPost::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EntryPost::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EntryPost::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.EntryPost.name)
  return _impl_.name_.Release();
}
inline void EntryPost::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.EntryPost.name)
}

// string policy = 2;
inline void EntryPost::clear_policy() {
  _impl_.policy_.ClearToEmpty();
}
inline const std::string& EntryPost::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EntryPost.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryPost::set_policy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EntryPost.policy)
}
inline std::string* EntryPost::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.EntryPost.policy)
  return _s;
}
inline const std::string& EntryPost::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void EntryPost::_internal_set_policy(const std::string& value) {
  
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* EntryPost::_internal_mutable_policy() {
  
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* EntryPost::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.EntryPost.policy)
  return _impl_.policy_.Release();
}
inline void EntryPost::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    
  } else {
    
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.EntryPost.policy)
}

// string filter = 3;
inline void EntryPost::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& EntryPost::filter() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EntryPost.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryPost::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EntryPost.filter)
}
inline std::string* EntryPost::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.EntryPost.filter)
  return _s;
}
inline const std::string& EntryPost::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void EntryPost::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* EntryPost::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* EntryPost::release_filter() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.EntryPost.filter)
  return _impl_.filter_.Release();
}
inline void EntryPost::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.EntryPost.filter)
}

// uint32 priority = 4;
inline void EntryPost::clear_priority() {
  _impl_.priority_ = 0u;
}
inline uint32_t EntryPost::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t EntryPost::priority() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EntryPost.priority)
  return _internal_priority();
}
inline void EntryPost::_internal_set_priority(uint32_t value) {
  
  _impl_.priority_ = value;
}
inline void EntryPost::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EntryPost.priority)
}

// optional string description = 5;
inline bool EntryPost::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EntryPost::has_description() const {
  return _internal_has_description();
}
inline void EntryPost::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EntryPost::description() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EntryPost.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EntryPost::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EntryPost.description)
}
inline std::string* EntryPost::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.EntryPost.description)
  return _s;
}
inline const std::string& EntryPost::_internal_description() const {
  return _impl_.description_.Get();
}
inline void EntryPost::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* EntryPost::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* EntryPost::release_description() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.EntryPost.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EntryPost::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.EntryPost.description)
}

// -------------------------------------------------------------------

// Entry

// string name = 1;
inline void Entry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Entry::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.name)
}
inline std::string* Entry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Entry.name)
  return _s;
}
inline const std::string& Entry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Entry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Entry.name)
  return _impl_.name_.Release();
}
inline void Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Entry.name)
}

// string policy = 2;
inline void Entry::clear_policy() {
  _impl_.policy_.ClearToEmpty();
}
inline const std::string& Entry::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_policy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.policy)
}
inline std::string* Entry::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Entry.policy)
  return _s;
}
inline const std::string& Entry::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void Entry::_internal_set_policy(const std::string& value) {
  
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_policy() {
  
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Entry.policy)
  return _impl_.policy_.Release();
}
inline void Entry::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    
  } else {
    
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Entry.policy)
}

// string filter = 3;
inline void Entry::clear_filter() {
  _impl_.filter_.ClearToEmpty();
}
inline const std::string& Entry::filter() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.filter)
  return _internal_filter();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_filter(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.filter)
}
inline std::string* Entry::mutable_filter() {
  std::string* _s = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Entry.filter)
  return _s;
}
inline const std::string& Entry::_internal_filter() const {
  return _impl_.filter_.Get();
}
inline void Entry::_internal_set_filter(const std::string& value) {
  
  _impl_.filter_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_filter() {
  
  return _impl_.filter_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_filter() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Entry.filter)
  return _impl_.filter_.Release();
}
inline void Entry::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  _impl_.filter_.SetAllocated(filter, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_.IsDefault()) {
    _impl_.filter_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Entry.filter)
}

// uint32 priority = 4;
inline void Entry::clear_priority() {
  _impl_.priority_ = 0u;
}
inline uint32_t Entry::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t Entry::priority() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.priority)
  return _internal_priority();
}
inline void Entry::_internal_set_priority(uint32_t value) {
  
  _impl_.priority_ = value;
}
inline void Entry::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.priority)
}

// optional string description = 5;
inline bool Entry::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Entry::has_description() const {
  return _internal_has_description();
}
inline void Entry::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entry::description() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.description)
}
inline std::string* Entry::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.Entry.description)
  return _s;
}
inline const std::string& Entry::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Entry::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_description() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.Entry.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Entry::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.Entry.description)
}

// .com.wazuh.api.engine.router.Sync policy_sync = 6;
inline void Entry::clear_policy_sync() {
  _impl_.policy_sync_ = 0;
}
inline ::com::wazuh::api::engine::router::Sync Entry::_internal_policy_sync() const {
  return static_cast< ::com::wazuh::api::engine::router::Sync >(_impl_.policy_sync_);
}
inline ::com::wazuh::api::engine::router::Sync Entry::policy_sync() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.policy_sync)
  return _internal_policy_sync();
}
inline void Entry::_internal_set_policy_sync(::com::wazuh::api::engine::router::Sync value) {
  
  _impl_.policy_sync_ = value;
}
inline void Entry::set_policy_sync(::com::wazuh::api::engine::router::Sync value) {
  _internal_set_policy_sync(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.policy_sync)
}

// .com.wazuh.api.engine.router.State entry_status = 7;
inline void Entry::clear_entry_status() {
  _impl_.entry_status_ = 0;
}
inline ::com::wazuh::api::engine::router::State Entry::_internal_entry_status() const {
  return static_cast< ::com::wazuh::api::engine::router::State >(_impl_.entry_status_);
}
inline ::com::wazuh::api::engine::router::State Entry::entry_status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.entry_status)
  return _internal_entry_status();
}
inline void Entry::_internal_set_entry_status(::com::wazuh::api::engine::router::State value) {
  
  _impl_.entry_status_ = value;
}
inline void Entry::set_entry_status(::com::wazuh::api::engine::router::State value) {
  _internal_set_entry_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.entry_status)
}

// uint32 uptime = 8;
inline void Entry::clear_uptime() {
  _impl_.uptime_ = 0u;
}
inline uint32_t Entry::_internal_uptime() const {
  return _impl_.uptime_;
}
inline uint32_t Entry::uptime() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.Entry.uptime)
  return _internal_uptime();
}
inline void Entry::_internal_set_uptime(uint32_t value) {
  
  _impl_.uptime_ = value;
}
inline void Entry::set_uptime(uint32_t value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.Entry.uptime)
}

// -------------------------------------------------------------------

// RoutePost_Request

// optional .com.wazuh.api.engine.router.EntryPost route = 1;
inline bool RoutePost_Request::_internal_has_route() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.route_ != nullptr);
  return value;
}
inline bool RoutePost_Request::has_route() const {
  return _internal_has_route();
}
inline void RoutePost_Request::clear_route() {
  if (_impl_.route_ != nullptr) _impl_.route_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::wazuh::api::engine::router::EntryPost& RoutePost_Request::_internal_route() const {
  const ::com::wazuh::api::engine::router::EntryPost* p = _impl_.route_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::router::EntryPost&>(
      ::com::wazuh::api::engine::router::_EntryPost_default_instance_);
}
inline const ::com::wazuh::api::engine::router::EntryPost& RoutePost_Request::route() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RoutePost_Request.route)
  return _internal_route();
}
inline void RoutePost_Request::unsafe_arena_set_allocated_route(
    ::com::wazuh::api::engine::router::EntryPost* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_);
  }
  _impl_.route_ = route;
  if (route) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.router.RoutePost_Request.route)
}
inline ::com::wazuh::api::engine::router::EntryPost* RoutePost_Request::release_route() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::wazuh::api::engine::router::EntryPost* temp = _impl_.route_;
  _impl_.route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::router::EntryPost* RoutePost_Request::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RoutePost_Request.route)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::wazuh::api::engine::router::EntryPost* temp = _impl_.route_;
  _impl_.route_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::router::EntryPost* RoutePost_Request::_internal_mutable_route() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.route_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::router::EntryPost>(GetArenaForAllocation());
    _impl_.route_ = p;
  }
  return _impl_.route_;
}
inline ::com::wazuh::api::engine::router::EntryPost* RoutePost_Request::mutable_route() {
  ::com::wazuh::api::engine::router::EntryPost* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RoutePost_Request.route)
  return _msg;
}
inline void RoutePost_Request::set_allocated_route(::com::wazuh::api::engine::router::EntryPost* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.route_;
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(route);
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.route_ = route;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RoutePost_Request.route)
}

// -------------------------------------------------------------------

// RouteDelete_Request

// string name = 1;
inline void RouteDelete_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RouteDelete_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteDelete_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteDelete_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteDelete_Request.name)
}
inline std::string* RouteDelete_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteDelete_Request.name)
  return _s;
}
inline const std::string& RouteDelete_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RouteDelete_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteDelete_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteDelete_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteDelete_Request.name)
  return _impl_.name_.Release();
}
inline void RouteDelete_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteDelete_Request.name)
}

// -------------------------------------------------------------------

// RouteGet_Request

// string name = 1;
inline void RouteGet_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RouteGet_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteGet_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteGet_Request.name)
}
inline std::string* RouteGet_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteGet_Request.name)
  return _s;
}
inline const std::string& RouteGet_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RouteGet_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteGet_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteGet_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteGet_Request.name)
  return _impl_.name_.Release();
}
inline void RouteGet_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteGet_Request.name)
}

// -------------------------------------------------------------------

// RouteGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void RouteGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus RouteGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus RouteGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Response.status)
  return _internal_status();
}
inline void RouteGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void RouteGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteGet_Response.status)
}

// optional string error = 2;
inline bool RouteGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RouteGet_Response::has_error() const {
  return _internal_has_error();
}
inline void RouteGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RouteGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteGet_Response.error)
}
inline std::string* RouteGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteGet_Response.error)
  return _s;
}
inline const std::string& RouteGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RouteGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RouteGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteGet_Response.error)
}

// optional .com.wazuh.api.engine.router.Entry route = 3;
inline bool RouteGet_Response::_internal_has_route() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.route_ != nullptr);
  return value;
}
inline bool RouteGet_Response::has_route() const {
  return _internal_has_route();
}
inline void RouteGet_Response::clear_route() {
  if (_impl_.route_ != nullptr) _impl_.route_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::router::Entry& RouteGet_Response::_internal_route() const {
  const ::com::wazuh::api::engine::router::Entry* p = _impl_.route_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::router::Entry&>(
      ::com::wazuh::api::engine::router::_Entry_default_instance_);
}
inline const ::com::wazuh::api::engine::router::Entry& RouteGet_Response::route() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteGet_Response.route)
  return _internal_route();
}
inline void RouteGet_Response::unsafe_arena_set_allocated_route(
    ::com::wazuh::api::engine::router::Entry* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.route_);
  }
  _impl_.route_ = route;
  if (route) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.router.RouteGet_Response.route)
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::release_route() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::router::Entry* temp = _impl_.route_;
  _impl_.route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteGet_Response.route)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::router::Entry* temp = _impl_.route_;
  _impl_.route_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::_internal_mutable_route() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.route_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::router::Entry>(GetArenaForAllocation());
    _impl_.route_ = p;
  }
  return _impl_.route_;
}
inline ::com::wazuh::api::engine::router::Entry* RouteGet_Response::mutable_route() {
  ::com::wazuh::api::engine::router::Entry* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteGet_Response.route)
  return _msg;
}
inline void RouteGet_Response::set_allocated_route(::com::wazuh::api::engine::router::Entry* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.route_;
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(route);
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.route_ = route;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteGet_Response.route)
}

// -------------------------------------------------------------------

// RouteReload_Request

// string name = 1;
inline void RouteReload_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RouteReload_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RouteReload_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RouteReload_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RouteReload_Request.name)
}
inline std::string* RouteReload_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RouteReload_Request.name)
  return _s;
}
inline const std::string& RouteReload_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RouteReload_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RouteReload_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RouteReload_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RouteReload_Request.name)
  return _impl_.name_.Release();
}
inline void RouteReload_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RouteReload_Request.name)
}

// -------------------------------------------------------------------

// RoutePatchPriority_Request

// string name = 1;
inline void RoutePatchPriority_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RoutePatchPriority_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RoutePatchPriority_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoutePatchPriority_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RoutePatchPriority_Request.name)
}
inline std::string* RoutePatchPriority_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.RoutePatchPriority_Request.name)
  return _s;
}
inline const std::string& RoutePatchPriority_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RoutePatchPriority_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RoutePatchPriority_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RoutePatchPriority_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.RoutePatchPriority_Request.name)
  return _impl_.name_.Release();
}
inline void RoutePatchPriority_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.RoutePatchPriority_Request.name)
}

// uint32 priority = 2;
inline void RoutePatchPriority_Request::clear_priority() {
  _impl_.priority_ = 0u;
}
inline uint32_t RoutePatchPriority_Request::_internal_priority() const {
  return _impl_.priority_;
}
inline uint32_t RoutePatchPriority_Request::priority() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.RoutePatchPriority_Request.priority)
  return _internal_priority();
}
inline void RoutePatchPriority_Request::_internal_set_priority(uint32_t value) {
  
  _impl_.priority_ = value;
}
inline void RoutePatchPriority_Request::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.RoutePatchPriority_Request.priority)
}

// -------------------------------------------------------------------

// TableGet_Request

// -------------------------------------------------------------------

// TableGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void TableGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus TableGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus TableGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.TableGet_Response.status)
  return _internal_status();
}
inline void TableGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void TableGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.TableGet_Response.status)
}

// optional string error = 2;
inline bool TableGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableGet_Response::has_error() const {
  return _internal_has_error();
}
inline void TableGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.TableGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.TableGet_Response.error)
}
inline std::string* TableGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.TableGet_Response.error)
  return _s;
}
inline const std::string& TableGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void TableGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* TableGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* TableGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.TableGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TableGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.TableGet_Response.error)
}

// repeated .com.wazuh.api.engine.router.Entry table = 3;
inline int TableGet_Response::_internal_table_size() const {
  return _impl_.table_.size();
}
inline int TableGet_Response::table_size() const {
  return _internal_table_size();
}
inline void TableGet_Response::clear_table() {
  _impl_.table_.Clear();
}
inline ::com::wazuh::api::engine::router::Entry* TableGet_Response::mutable_table(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.TableGet_Response.table)
  return _impl_.table_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::router::Entry >*
TableGet_Response::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.router.TableGet_Response.table)
  return &_impl_.table_;
}
inline const ::com::wazuh::api::engine::router::Entry& TableGet_Response::_internal_table(int index) const {
  return _impl_.table_.Get(index);
}
inline const ::com::wazuh::api::engine::router::Entry& TableGet_Response::table(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.TableGet_Response.table)
  return _internal_table(index);
}
inline ::com::wazuh::api::engine::router::Entry* TableGet_Response::_internal_add_table() {
  return _impl_.table_.Add();
}
inline ::com::wazuh::api::engine::router::Entry* TableGet_Response::add_table() {
  ::com::wazuh::api::engine::router::Entry* _add = _internal_add_table();
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.router.TableGet_Response.table)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::router::Entry >&
TableGet_Response::table() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.router.TableGet_Response.table)
  return _impl_.table_;
}

// -------------------------------------------------------------------

// QueuePost_Request

// string wazuh_event = 1;
inline void QueuePost_Request::clear_wazuh_event() {
  _impl_.wazuh_event_.ClearToEmpty();
}
inline const std::string& QueuePost_Request::wazuh_event() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.QueuePost_Request.wazuh_event)
  return _internal_wazuh_event();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueuePost_Request::set_wazuh_event(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wazuh_event_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.QueuePost_Request.wazuh_event)
}
inline std::string* QueuePost_Request::mutable_wazuh_event() {
  std::string* _s = _internal_mutable_wazuh_event();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.QueuePost_Request.wazuh_event)
  return _s;
}
inline const std::string& QueuePost_Request::_internal_wazuh_event() const {
  return _impl_.wazuh_event_.Get();
}
inline void QueuePost_Request::_internal_set_wazuh_event(const std::string& value) {
  
  _impl_.wazuh_event_.Set(value, GetArenaForAllocation());
}
inline std::string* QueuePost_Request::_internal_mutable_wazuh_event() {
  
  return _impl_.wazuh_event_.Mutable(GetArenaForAllocation());
}
inline std::string* QueuePost_Request::release_wazuh_event() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.QueuePost_Request.wazuh_event)
  return _impl_.wazuh_event_.Release();
}
inline void QueuePost_Request::set_allocated_wazuh_event(std::string* wazuh_event) {
  if (wazuh_event != nullptr) {
    
  } else {
    
  }
  _impl_.wazuh_event_.SetAllocated(wazuh_event, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wazuh_event_.IsDefault()) {
    _impl_.wazuh_event_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.QueuePost_Request.wazuh_event)
}

// -------------------------------------------------------------------

// EpsUpdate_Request

// uint32 eps = 1;
inline void EpsUpdate_Request::clear_eps() {
  _impl_.eps_ = 0u;
}
inline uint32_t EpsUpdate_Request::_internal_eps() const {
  return _impl_.eps_;
}
inline uint32_t EpsUpdate_Request::eps() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EpsUpdate_Request.eps)
  return _internal_eps();
}
inline void EpsUpdate_Request::_internal_set_eps(uint32_t value) {
  
  _impl_.eps_ = value;
}
inline void EpsUpdate_Request::set_eps(uint32_t value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EpsUpdate_Request.eps)
}

// uint32 refresh_interval = 2;
inline void EpsUpdate_Request::clear_refresh_interval() {
  _impl_.refresh_interval_ = 0u;
}
inline uint32_t EpsUpdate_Request::_internal_refresh_interval() const {
  return _impl_.refresh_interval_;
}
inline uint32_t EpsUpdate_Request::refresh_interval() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EpsUpdate_Request.refresh_interval)
  return _internal_refresh_interval();
}
inline void EpsUpdate_Request::_internal_set_refresh_interval(uint32_t value) {
  
  _impl_.refresh_interval_ = value;
}
inline void EpsUpdate_Request::set_refresh_interval(uint32_t value) {
  _internal_set_refresh_interval(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EpsUpdate_Request.refresh_interval)
}

// -------------------------------------------------------------------

// EpsGet_Request

// -------------------------------------------------------------------

// EpsGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void EpsGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus EpsGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus EpsGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EpsGet_Response.status)
  return _internal_status();
}
inline void EpsGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void EpsGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EpsGet_Response.status)
}

// optional string error = 2;
inline bool EpsGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EpsGet_Response::has_error() const {
  return _internal_has_error();
}
inline void EpsGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EpsGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EpsGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EpsGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EpsGet_Response.error)
}
inline std::string* EpsGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.router.EpsGet_Response.error)
  return _s;
}
inline const std::string& EpsGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void EpsGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* EpsGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* EpsGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.router.EpsGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EpsGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.router.EpsGet_Response.error)
}

// uint32 eps = 3;
inline void EpsGet_Response::clear_eps() {
  _impl_.eps_ = 0u;
}
inline uint32_t EpsGet_Response::_internal_eps() const {
  return _impl_.eps_;
}
inline uint32_t EpsGet_Response::eps() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EpsGet_Response.eps)
  return _internal_eps();
}
inline void EpsGet_Response::_internal_set_eps(uint32_t value) {
  
  _impl_.eps_ = value;
}
inline void EpsGet_Response::set_eps(uint32_t value) {
  _internal_set_eps(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EpsGet_Response.eps)
}

// uint32 refresh_interval = 4;
inline void EpsGet_Response::clear_refresh_interval() {
  _impl_.refresh_interval_ = 0u;
}
inline uint32_t EpsGet_Response::_internal_refresh_interval() const {
  return _impl_.refresh_interval_;
}
inline uint32_t EpsGet_Response::refresh_interval() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EpsGet_Response.refresh_interval)
  return _internal_refresh_interval();
}
inline void EpsGet_Response::_internal_set_refresh_interval(uint32_t value) {
  
  _impl_.refresh_interval_ = value;
}
inline void EpsGet_Response::set_refresh_interval(uint32_t value) {
  _internal_set_refresh_interval(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EpsGet_Response.refresh_interval)
}

// bool enabled = 5;
inline void EpsGet_Response::clear_enabled() {
  _impl_.enabled_ = false;
}
inline bool EpsGet_Response::_internal_enabled() const {
  return _impl_.enabled_;
}
inline bool EpsGet_Response::enabled() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.router.EpsGet_Response.enabled)
  return _internal_enabled();
}
inline void EpsGet_Response::_internal_set_enabled(bool value) {
  
  _impl_.enabled_ = value;
}
inline void EpsGet_Response::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.router.EpsGet_Response.enabled)
}

// -------------------------------------------------------------------

// EpsEnable_Request

// -------------------------------------------------------------------

// EpsDisable_Request

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace router
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::wazuh::api::engine::router::State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::router::State>() {
  return ::com::wazuh::api::engine::router::State_descriptor();
}
template <> struct is_proto_enum< ::com::wazuh::api::engine::router::Sync> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::router::Sync>() {
  return ::com::wazuh::api::engine::router::Sync_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
