// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_catalog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_catalog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_catalog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_catalog_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_catalog_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace catalog {
class NamespacesGet_Request;
struct NamespacesGet_RequestDefaultTypeInternal;
extern NamespacesGet_RequestDefaultTypeInternal _NamespacesGet_Request_default_instance_;
class NamespacesGet_Response;
struct NamespacesGet_ResponseDefaultTypeInternal;
extern NamespacesGet_ResponseDefaultTypeInternal _NamespacesGet_Response_default_instance_;
class ResourceDelete_Request;
struct ResourceDelete_RequestDefaultTypeInternal;
extern ResourceDelete_RequestDefaultTypeInternal _ResourceDelete_Request_default_instance_;
class ResourceGet_Request;
struct ResourceGet_RequestDefaultTypeInternal;
extern ResourceGet_RequestDefaultTypeInternal _ResourceGet_Request_default_instance_;
class ResourceGet_Response;
struct ResourceGet_ResponseDefaultTypeInternal;
extern ResourceGet_ResponseDefaultTypeInternal _ResourceGet_Response_default_instance_;
class ResourcePost_Request;
struct ResourcePost_RequestDefaultTypeInternal;
extern ResourcePost_RequestDefaultTypeInternal _ResourcePost_Request_default_instance_;
class ResourcePut_Request;
struct ResourcePut_RequestDefaultTypeInternal;
extern ResourcePut_RequestDefaultTypeInternal _ResourcePut_Request_default_instance_;
class ResourceValidate_Request;
struct ResourceValidate_RequestDefaultTypeInternal;
extern ResourceValidate_RequestDefaultTypeInternal _ResourceValidate_Request_default_instance_;
}  // namespace catalog
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::catalog::NamespacesGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::NamespacesGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::catalog::NamespacesGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::NamespacesGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::catalog::ResourceDelete_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::ResourceDelete_Request>(Arena*);
template<> ::com::wazuh::api::engine::catalog::ResourceGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::ResourceGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::catalog::ResourceGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::ResourceGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::catalog::ResourcePost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::ResourcePost_Request>(Arena*);
template<> ::com::wazuh::api::engine::catalog::ResourcePut_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::ResourcePut_Request>(Arena*);
template<> ::com::wazuh::api::engine::catalog::ResourceValidate_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::catalog::ResourceValidate_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace catalog {

enum ResourceFormat : int {
  json = 0,
  yaml = 1,
  yml = 1,
  ResourceFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResourceFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResourceFormat_IsValid(int value);
constexpr ResourceFormat ResourceFormat_MIN = json;
constexpr ResourceFormat ResourceFormat_MAX = yaml;
constexpr int ResourceFormat_ARRAYSIZE = ResourceFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceFormat_descriptor();
template<typename T>
inline const std::string& ResourceFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceFormat_descriptor(), enum_t_value);
}
inline bool ResourceFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceFormat>(
    ResourceFormat_descriptor(), name, value);
}
enum ResourceType : int {
  UNKNOWN = 0,
  decoder = 1,
  rule = 2,
  filter = 3,
  output = 4,
  schema = 5,
  collection = 6,
  integration = 7,
  ResourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ResourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ResourceType_IsValid(int value);
constexpr ResourceType ResourceType_MIN = UNKNOWN;
constexpr ResourceType ResourceType_MAX = integration;
constexpr int ResourceType_ARRAYSIZE = ResourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResourceType_descriptor();
template<typename T>
inline const std::string& ResourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResourceType_descriptor(), enum_t_value);
}
inline bool ResourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ResourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResourceType>(
    ResourceType_descriptor(), name, value);
}
// ===================================================================

class ResourcePost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.ResourcePost_Request) */ {
 public:
  inline ResourcePost_Request() : ResourcePost_Request(nullptr) {}
  ~ResourcePost_Request() override;
  explicit PROTOBUF_CONSTEXPR ResourcePost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourcePost_Request(const ResourcePost_Request& from);
  ResourcePost_Request(ResourcePost_Request&& from) noexcept
    : ResourcePost_Request() {
    *this = ::std::move(from);
  }

  inline ResourcePost_Request& operator=(const ResourcePost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcePost_Request& operator=(ResourcePost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourcePost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourcePost_Request* internal_default_instance() {
    return reinterpret_cast<const ResourcePost_Request*>(
               &_ResourcePost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResourcePost_Request& a, ResourcePost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcePost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcePost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourcePost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourcePost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourcePost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourcePost_Request& from) {
    ResourcePost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcePost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.ResourcePost_Request";
  }
  protected:
  explicit ResourcePost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 3,
    kNamespaceidFieldNumber = 4,
    kTypeFieldNumber = 1,
    kFormatFieldNumber = 2,
  };
  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional string namespaceid = 4;
  bool has_namespaceid() const;
  private:
  bool _internal_has_namespaceid() const;
  public:
  void clear_namespaceid();
  const std::string& namespaceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespaceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespaceid();
  PROTOBUF_NODISCARD std::string* release_namespaceid();
  void set_allocated_namespaceid(std::string* namespaceid);
  private:
  const std::string& _internal_namespaceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespaceid(const std::string& value);
  std::string* _internal_mutable_namespaceid();
  public:

  // optional .com.wazuh.api.engine.catalog.ResourceType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::com::wazuh::api::engine::catalog::ResourceType type() const;
  void set_type(::com::wazuh::api::engine::catalog::ResourceType value);
  private:
  ::com::wazuh::api::engine::catalog::ResourceType _internal_type() const;
  void _internal_set_type(::com::wazuh::api::engine::catalog::ResourceType value);
  public:

  // optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::com::wazuh::api::engine::catalog::ResourceFormat format() const;
  void set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  private:
  ::com::wazuh::api::engine::catalog::ResourceFormat _internal_format() const;
  void _internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.ResourcePost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespaceid_;
    int type_;
    int format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_catalog_2eproto;
};
// -------------------------------------------------------------------

class ResourceGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.ResourceGet_Request) */ {
 public:
  inline ResourceGet_Request() : ResourceGet_Request(nullptr) {}
  ~ResourceGet_Request() override;
  explicit PROTOBUF_CONSTEXPR ResourceGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceGet_Request(const ResourceGet_Request& from);
  ResourceGet_Request(ResourceGet_Request&& from) noexcept
    : ResourceGet_Request() {
    *this = ::std::move(from);
  }

  inline ResourceGet_Request& operator=(const ResourceGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceGet_Request& operator=(ResourceGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceGet_Request* internal_default_instance() {
    return reinterpret_cast<const ResourceGet_Request*>(
               &_ResourceGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResourceGet_Request& a, ResourceGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceGet_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceGet_Request& from) {
    ResourceGet_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceGet_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.ResourceGet_Request";
  }
  protected:
  explicit ResourceGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNamespaceidFieldNumber = 3,
    kFormatFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string namespaceid = 3;
  bool has_namespaceid() const;
  private:
  bool _internal_has_namespaceid() const;
  public:
  void clear_namespaceid();
  const std::string& namespaceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespaceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespaceid();
  PROTOBUF_NODISCARD std::string* release_namespaceid();
  void set_allocated_namespaceid(std::string* namespaceid);
  private:
  const std::string& _internal_namespaceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespaceid(const std::string& value);
  std::string* _internal_mutable_namespaceid();
  public:

  // optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::com::wazuh::api::engine::catalog::ResourceFormat format() const;
  void set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  private:
  ::com::wazuh::api::engine::catalog::ResourceFormat _internal_format() const;
  void _internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.ResourceGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespaceid_;
    int format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_catalog_2eproto;
};
// -------------------------------------------------------------------

class ResourceGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.ResourceGet_Response) */ {
 public:
  inline ResourceGet_Response() : ResourceGet_Response(nullptr) {}
  ~ResourceGet_Response() override;
  explicit PROTOBUF_CONSTEXPR ResourceGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceGet_Response(const ResourceGet_Response& from);
  ResourceGet_Response(ResourceGet_Response&& from) noexcept
    : ResourceGet_Response() {
    *this = ::std::move(from);
  }

  inline ResourceGet_Response& operator=(const ResourceGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceGet_Response& operator=(ResourceGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceGet_Response* internal_default_instance() {
    return reinterpret_cast<const ResourceGet_Response*>(
               &_ResourceGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResourceGet_Response& a, ResourceGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceGet_Response& from) {
    ResourceGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.ResourceGet_Response";
  }
  protected:
  explicit ResourceGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kContentFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.ResourceGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_catalog_2eproto;
};
// -------------------------------------------------------------------

class ResourcePut_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.ResourcePut_Request) */ {
 public:
  inline ResourcePut_Request() : ResourcePut_Request(nullptr) {}
  ~ResourcePut_Request() override;
  explicit PROTOBUF_CONSTEXPR ResourcePut_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourcePut_Request(const ResourcePut_Request& from);
  ResourcePut_Request(ResourcePut_Request&& from) noexcept
    : ResourcePut_Request() {
    *this = ::std::move(from);
  }

  inline ResourcePut_Request& operator=(const ResourcePut_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcePut_Request& operator=(ResourcePut_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourcePut_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourcePut_Request* internal_default_instance() {
    return reinterpret_cast<const ResourcePut_Request*>(
               &_ResourcePut_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResourcePut_Request& a, ResourcePut_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcePut_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcePut_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourcePut_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourcePut_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourcePut_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourcePut_Request& from) {
    ResourcePut_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcePut_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.ResourcePut_Request";
  }
  protected:
  explicit ResourcePut_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 3,
    kNamespaceidFieldNumber = 4,
    kFormatFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional string namespaceid = 4;
  bool has_namespaceid() const;
  private:
  bool _internal_has_namespaceid() const;
  public:
  void clear_namespaceid();
  const std::string& namespaceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespaceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespaceid();
  PROTOBUF_NODISCARD std::string* release_namespaceid();
  void set_allocated_namespaceid(std::string* namespaceid);
  private:
  const std::string& _internal_namespaceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespaceid(const std::string& value);
  std::string* _internal_mutable_namespaceid();
  public:

  // optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::com::wazuh::api::engine::catalog::ResourceFormat format() const;
  void set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  private:
  ::com::wazuh::api::engine::catalog::ResourceFormat _internal_format() const;
  void _internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.ResourcePut_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespaceid_;
    int format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_catalog_2eproto;
};
// -------------------------------------------------------------------

class ResourceDelete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.ResourceDelete_Request) */ {
 public:
  inline ResourceDelete_Request() : ResourceDelete_Request(nullptr) {}
  ~ResourceDelete_Request() override;
  explicit PROTOBUF_CONSTEXPR ResourceDelete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceDelete_Request(const ResourceDelete_Request& from);
  ResourceDelete_Request(ResourceDelete_Request&& from) noexcept
    : ResourceDelete_Request() {
    *this = ::std::move(from);
  }

  inline ResourceDelete_Request& operator=(const ResourceDelete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceDelete_Request& operator=(ResourceDelete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceDelete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceDelete_Request* internal_default_instance() {
    return reinterpret_cast<const ResourceDelete_Request*>(
               &_ResourceDelete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceDelete_Request& a, ResourceDelete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceDelete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceDelete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceDelete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceDelete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceDelete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceDelete_Request& from) {
    ResourceDelete_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceDelete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.ResourceDelete_Request";
  }
  protected:
  explicit ResourceDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kNamespaceidFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string namespaceid = 2;
  bool has_namespaceid() const;
  private:
  bool _internal_has_namespaceid() const;
  public:
  void clear_namespaceid();
  const std::string& namespaceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespaceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespaceid();
  PROTOBUF_NODISCARD std::string* release_namespaceid();
  void set_allocated_namespaceid(std::string* namespaceid);
  private:
  const std::string& _internal_namespaceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespaceid(const std::string& value);
  std::string* _internal_mutable_namespaceid();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.ResourceDelete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespaceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_catalog_2eproto;
};
// -------------------------------------------------------------------

class ResourceValidate_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.ResourceValidate_Request) */ {
 public:
  inline ResourceValidate_Request() : ResourceValidate_Request(nullptr) {}
  ~ResourceValidate_Request() override;
  explicit PROTOBUF_CONSTEXPR ResourceValidate_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceValidate_Request(const ResourceValidate_Request& from);
  ResourceValidate_Request(ResourceValidate_Request&& from) noexcept
    : ResourceValidate_Request() {
    *this = ::std::move(from);
  }

  inline ResourceValidate_Request& operator=(const ResourceValidate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceValidate_Request& operator=(ResourceValidate_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceValidate_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceValidate_Request* internal_default_instance() {
    return reinterpret_cast<const ResourceValidate_Request*>(
               &_ResourceValidate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResourceValidate_Request& a, ResourceValidate_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceValidate_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceValidate_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceValidate_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceValidate_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceValidate_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResourceValidate_Request& from) {
    ResourceValidate_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceValidate_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.ResourceValidate_Request";
  }
  protected:
  explicit ResourceValidate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kContentFieldNumber = 3,
    kNamespaceidFieldNumber = 4,
    kFormatFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string content = 3;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional string namespaceid = 4;
  bool has_namespaceid() const;
  private:
  bool _internal_has_namespaceid() const;
  public:
  void clear_namespaceid();
  const std::string& namespaceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespaceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespaceid();
  PROTOBUF_NODISCARD std::string* release_namespaceid();
  void set_allocated_namespaceid(std::string* namespaceid);
  private:
  const std::string& _internal_namespaceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespaceid(const std::string& value);
  std::string* _internal_mutable_namespaceid();
  public:

  // optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::com::wazuh::api::engine::catalog::ResourceFormat format() const;
  void set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  private:
  ::com::wazuh::api::engine::catalog::ResourceFormat _internal_format() const;
  void _internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.ResourceValidate_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespaceid_;
    int format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_catalog_2eproto;
};
// -------------------------------------------------------------------

class NamespacesGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.NamespacesGet_Request) */ {
 public:
  inline NamespacesGet_Request() : NamespacesGet_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR NamespacesGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamespacesGet_Request(const NamespacesGet_Request& from);
  NamespacesGet_Request(NamespacesGet_Request&& from) noexcept
    : NamespacesGet_Request() {
    *this = ::std::move(from);
  }

  inline NamespacesGet_Request& operator=(const NamespacesGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamespacesGet_Request& operator=(NamespacesGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamespacesGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamespacesGet_Request* internal_default_instance() {
    return reinterpret_cast<const NamespacesGet_Request*>(
               &_NamespacesGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NamespacesGet_Request& a, NamespacesGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(NamespacesGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamespacesGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamespacesGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamespacesGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const NamespacesGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const NamespacesGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.NamespacesGet_Request";
  }
  protected:
  explicit NamespacesGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.NamespacesGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_catalog_2eproto;
};
// -------------------------------------------------------------------

class NamespacesGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.catalog.NamespacesGet_Response) */ {
 public:
  inline NamespacesGet_Response() : NamespacesGet_Response(nullptr) {}
  ~NamespacesGet_Response() override;
  explicit PROTOBUF_CONSTEXPR NamespacesGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamespacesGet_Response(const NamespacesGet_Response& from);
  NamespacesGet_Response(NamespacesGet_Response&& from) noexcept
    : NamespacesGet_Response() {
    *this = ::std::move(from);
  }

  inline NamespacesGet_Response& operator=(const NamespacesGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamespacesGet_Response& operator=(NamespacesGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NamespacesGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamespacesGet_Response* internal_default_instance() {
    return reinterpret_cast<const NamespacesGet_Response*>(
               &_NamespacesGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NamespacesGet_Response& a, NamespacesGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(NamespacesGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamespacesGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NamespacesGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NamespacesGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NamespacesGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NamespacesGet_Response& from) {
    NamespacesGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamespacesGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.catalog.NamespacesGet_Response";
  }
  protected:
  explicit NamespacesGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespacesFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string namespaces = 3;
  int namespaces_size() const;
  private:
  int _internal_namespaces_size() const;
  public:
  void clear_namespaces();
  const std::string& namespaces(int index) const;
  std::string* mutable_namespaces(int index);
  void set_namespaces(int index, const std::string& value);
  void set_namespaces(int index, std::string&& value);
  void set_namespaces(int index, const char* value);
  void set_namespaces(int index, const char* value, size_t size);
  std::string* add_namespaces();
  void add_namespaces(const std::string& value);
  void add_namespaces(std::string&& value);
  void add_namespaces(const char* value);
  void add_namespaces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& namespaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_namespaces();
  private:
  const std::string& _internal_namespaces(int index) const;
  std::string* _internal_add_namespaces();
  public:

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.catalog.NamespacesGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> namespaces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_catalog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResourcePost_Request

// optional .com.wazuh.api.engine.catalog.ResourceType type = 1;
inline bool ResourcePost_Request::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourcePost_Request::has_type() const {
  return _internal_has_type();
}
inline void ResourcePost_Request::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::com::wazuh::api::engine::catalog::ResourceType ResourcePost_Request::_internal_type() const {
  return static_cast< ::com::wazuh::api::engine::catalog::ResourceType >(_impl_.type_);
}
inline ::com::wazuh::api::engine::catalog::ResourceType ResourcePost_Request::type() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePost_Request.type)
  return _internal_type();
}
inline void ResourcePost_Request::_internal_set_type(::com::wazuh::api::engine::catalog::ResourceType value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.type_ = value;
}
inline void ResourcePost_Request::set_type(::com::wazuh::api::engine::catalog::ResourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePost_Request.type)
}

// optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
inline bool ResourcePost_Request::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResourcePost_Request::has_format() const {
  return _internal_has_format();
}
inline void ResourcePost_Request::clear_format() {
  _impl_.format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourcePost_Request::_internal_format() const {
  return static_cast< ::com::wazuh::api::engine::catalog::ResourceFormat >(_impl_.format_);
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourcePost_Request::format() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePost_Request.format)
  return _internal_format();
}
inline void ResourcePost_Request::_internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.format_ = value;
}
inline void ResourcePost_Request::set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePost_Request.format)
}

// optional string content = 3;
inline bool ResourcePost_Request::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourcePost_Request::has_content() const {
  return _internal_has_content();
}
inline void ResourcePost_Request::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourcePost_Request::content() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePost_Request.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourcePost_Request::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePost_Request.content)
}
inline std::string* ResourcePost_Request::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourcePost_Request.content)
  return _s;
}
inline const std::string& ResourcePost_Request::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ResourcePost_Request::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourcePost_Request::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourcePost_Request::release_content() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourcePost_Request.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourcePost_Request::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourcePost_Request.content)
}

// optional string namespaceid = 4;
inline bool ResourcePost_Request::_internal_has_namespaceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourcePost_Request::has_namespaceid() const {
  return _internal_has_namespaceid();
}
inline void ResourcePost_Request::clear_namespaceid() {
  _impl_.namespaceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourcePost_Request::namespaceid() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePost_Request.namespaceid)
  return _internal_namespaceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourcePost_Request::set_namespaceid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.namespaceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePost_Request.namespaceid)
}
inline std::string* ResourcePost_Request::mutable_namespaceid() {
  std::string* _s = _internal_mutable_namespaceid();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourcePost_Request.namespaceid)
  return _s;
}
inline const std::string& ResourcePost_Request::_internal_namespaceid() const {
  return _impl_.namespaceid_.Get();
}
inline void ResourcePost_Request::_internal_set_namespaceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.namespaceid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourcePost_Request::_internal_mutable_namespaceid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.namespaceid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourcePost_Request::release_namespaceid() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourcePost_Request.namespaceid)
  if (!_internal_has_namespaceid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.namespaceid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourcePost_Request::set_allocated_namespaceid(std::string* namespaceid) {
  if (namespaceid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.namespaceid_.SetAllocated(namespaceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourcePost_Request.namespaceid)
}

// -------------------------------------------------------------------

// ResourceGet_Request

// optional string name = 1;
inline bool ResourceGet_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceGet_Request::has_name() const {
  return _internal_has_name();
}
inline void ResourceGet_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceGet_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceGet_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceGet_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceGet_Request.name)
}
inline std::string* ResourceGet_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceGet_Request.name)
  return _s;
}
inline const std::string& ResourceGet_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResourceGet_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceGet_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceGet_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceGet_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceGet_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceGet_Request.name)
}

// optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
inline bool ResourceGet_Request::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceGet_Request::has_format() const {
  return _internal_has_format();
}
inline void ResourceGet_Request::clear_format() {
  _impl_.format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourceGet_Request::_internal_format() const {
  return static_cast< ::com::wazuh::api::engine::catalog::ResourceFormat >(_impl_.format_);
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourceGet_Request::format() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceGet_Request.format)
  return _internal_format();
}
inline void ResourceGet_Request::_internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.format_ = value;
}
inline void ResourceGet_Request::set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceGet_Request.format)
}

// optional string namespaceid = 3;
inline bool ResourceGet_Request::_internal_has_namespaceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceGet_Request::has_namespaceid() const {
  return _internal_has_namespaceid();
}
inline void ResourceGet_Request::clear_namespaceid() {
  _impl_.namespaceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceGet_Request::namespaceid() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceGet_Request.namespaceid)
  return _internal_namespaceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceGet_Request::set_namespaceid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.namespaceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceGet_Request.namespaceid)
}
inline std::string* ResourceGet_Request::mutable_namespaceid() {
  std::string* _s = _internal_mutable_namespaceid();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceGet_Request.namespaceid)
  return _s;
}
inline const std::string& ResourceGet_Request::_internal_namespaceid() const {
  return _impl_.namespaceid_.Get();
}
inline void ResourceGet_Request::_internal_set_namespaceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.namespaceid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceGet_Request::_internal_mutable_namespaceid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.namespaceid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceGet_Request::release_namespaceid() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceGet_Request.namespaceid)
  if (!_internal_has_namespaceid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.namespaceid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceGet_Request::set_allocated_namespaceid(std::string* namespaceid) {
  if (namespaceid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.namespaceid_.SetAllocated(namespaceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceGet_Request.namespaceid)
}

// -------------------------------------------------------------------

// ResourceGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void ResourceGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus ResourceGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus ResourceGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceGet_Response.status)
  return _internal_status();
}
inline void ResourceGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void ResourceGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceGet_Response.status)
}

// optional string error = 2;
inline bool ResourceGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceGet_Response::has_error() const {
  return _internal_has_error();
}
inline void ResourceGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceGet_Response.error)
}
inline std::string* ResourceGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceGet_Response.error)
  return _s;
}
inline const std::string& ResourceGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void ResourceGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceGet_Response.error)
}

// optional string content = 3;
inline bool ResourceGet_Response::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceGet_Response::has_content() const {
  return _internal_has_content();
}
inline void ResourceGet_Response::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceGet_Response::content() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceGet_Response.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceGet_Response::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceGet_Response.content)
}
inline std::string* ResourceGet_Response::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceGet_Response.content)
  return _s;
}
inline const std::string& ResourceGet_Response::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ResourceGet_Response::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceGet_Response::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceGet_Response::release_content() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceGet_Response.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceGet_Response::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceGet_Response.content)
}

// -------------------------------------------------------------------

// ResourcePut_Request

// optional string name = 1;
inline bool ResourcePut_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourcePut_Request::has_name() const {
  return _internal_has_name();
}
inline void ResourcePut_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourcePut_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePut_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourcePut_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePut_Request.name)
}
inline std::string* ResourcePut_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourcePut_Request.name)
  return _s;
}
inline const std::string& ResourcePut_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResourcePut_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourcePut_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourcePut_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourcePut_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourcePut_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourcePut_Request.name)
}

// optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
inline bool ResourcePut_Request::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResourcePut_Request::has_format() const {
  return _internal_has_format();
}
inline void ResourcePut_Request::clear_format() {
  _impl_.format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourcePut_Request::_internal_format() const {
  return static_cast< ::com::wazuh::api::engine::catalog::ResourceFormat >(_impl_.format_);
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourcePut_Request::format() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePut_Request.format)
  return _internal_format();
}
inline void ResourcePut_Request::_internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.format_ = value;
}
inline void ResourcePut_Request::set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePut_Request.format)
}

// optional string content = 3;
inline bool ResourcePut_Request::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourcePut_Request::has_content() const {
  return _internal_has_content();
}
inline void ResourcePut_Request::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourcePut_Request::content() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePut_Request.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourcePut_Request::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePut_Request.content)
}
inline std::string* ResourcePut_Request::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourcePut_Request.content)
  return _s;
}
inline const std::string& ResourcePut_Request::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ResourcePut_Request::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourcePut_Request::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourcePut_Request::release_content() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourcePut_Request.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourcePut_Request::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourcePut_Request.content)
}

// optional string namespaceid = 4;
inline bool ResourcePut_Request::_internal_has_namespaceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourcePut_Request::has_namespaceid() const {
  return _internal_has_namespaceid();
}
inline void ResourcePut_Request::clear_namespaceid() {
  _impl_.namespaceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ResourcePut_Request::namespaceid() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourcePut_Request.namespaceid)
  return _internal_namespaceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourcePut_Request::set_namespaceid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.namespaceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourcePut_Request.namespaceid)
}
inline std::string* ResourcePut_Request::mutable_namespaceid() {
  std::string* _s = _internal_mutable_namespaceid();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourcePut_Request.namespaceid)
  return _s;
}
inline const std::string& ResourcePut_Request::_internal_namespaceid() const {
  return _impl_.namespaceid_.Get();
}
inline void ResourcePut_Request::_internal_set_namespaceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.namespaceid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourcePut_Request::_internal_mutable_namespaceid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.namespaceid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourcePut_Request::release_namespaceid() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourcePut_Request.namespaceid)
  if (!_internal_has_namespaceid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.namespaceid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourcePut_Request::set_allocated_namespaceid(std::string* namespaceid) {
  if (namespaceid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.namespaceid_.SetAllocated(namespaceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourcePut_Request.namespaceid)
}

// -------------------------------------------------------------------

// ResourceDelete_Request

// optional string name = 1;
inline bool ResourceDelete_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceDelete_Request::has_name() const {
  return _internal_has_name();
}
inline void ResourceDelete_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceDelete_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceDelete_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceDelete_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceDelete_Request.name)
}
inline std::string* ResourceDelete_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceDelete_Request.name)
  return _s;
}
inline const std::string& ResourceDelete_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResourceDelete_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceDelete_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceDelete_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceDelete_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceDelete_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceDelete_Request.name)
}

// optional string namespaceid = 2;
inline bool ResourceDelete_Request::_internal_has_namespaceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceDelete_Request::has_namespaceid() const {
  return _internal_has_namespaceid();
}
inline void ResourceDelete_Request::clear_namespaceid() {
  _impl_.namespaceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceDelete_Request::namespaceid() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceDelete_Request.namespaceid)
  return _internal_namespaceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceDelete_Request::set_namespaceid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.namespaceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceDelete_Request.namespaceid)
}
inline std::string* ResourceDelete_Request::mutable_namespaceid() {
  std::string* _s = _internal_mutable_namespaceid();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceDelete_Request.namespaceid)
  return _s;
}
inline const std::string& ResourceDelete_Request::_internal_namespaceid() const {
  return _impl_.namespaceid_.Get();
}
inline void ResourceDelete_Request::_internal_set_namespaceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.namespaceid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceDelete_Request::_internal_mutable_namespaceid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.namespaceid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceDelete_Request::release_namespaceid() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceDelete_Request.namespaceid)
  if (!_internal_has_namespaceid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.namespaceid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceDelete_Request::set_allocated_namespaceid(std::string* namespaceid) {
  if (namespaceid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.namespaceid_.SetAllocated(namespaceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceDelete_Request.namespaceid)
}

// -------------------------------------------------------------------

// ResourceValidate_Request

// optional string name = 1;
inline bool ResourceValidate_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ResourceValidate_Request::has_name() const {
  return _internal_has_name();
}
inline void ResourceValidate_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ResourceValidate_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceValidate_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceValidate_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceValidate_Request.name)
}
inline std::string* ResourceValidate_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceValidate_Request.name)
  return _s;
}
inline const std::string& ResourceValidate_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ResourceValidate_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceValidate_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceValidate_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceValidate_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceValidate_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceValidate_Request.name)
}

// optional .com.wazuh.api.engine.catalog.ResourceFormat format = 2;
inline bool ResourceValidate_Request::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ResourceValidate_Request::has_format() const {
  return _internal_has_format();
}
inline void ResourceValidate_Request::clear_format() {
  _impl_.format_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourceValidate_Request::_internal_format() const {
  return static_cast< ::com::wazuh::api::engine::catalog::ResourceFormat >(_impl_.format_);
}
inline ::com::wazuh::api::engine::catalog::ResourceFormat ResourceValidate_Request::format() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceValidate_Request.format)
  return _internal_format();
}
inline void ResourceValidate_Request::_internal_set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.format_ = value;
}
inline void ResourceValidate_Request::set_format(::com::wazuh::api::engine::catalog::ResourceFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceValidate_Request.format)
}

// optional string content = 3;
inline bool ResourceValidate_Request::_internal_has_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ResourceValidate_Request::has_content() const {
  return _internal_has_content();
}
inline void ResourceValidate_Request::clear_content() {
  _impl_.content_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ResourceValidate_Request::content() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceValidate_Request.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceValidate_Request::set_content(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.content_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceValidate_Request.content)
}
inline std::string* ResourceValidate_Request::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceValidate_Request.content)
  return _s;
}
inline const std::string& ResourceValidate_Request::_internal_content() const {
  return _impl_.content_.Get();
}
inline void ResourceValidate_Request::_internal_set_content(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.content_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceValidate_Request::_internal_mutable_content() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.content_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceValidate_Request::release_content() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceValidate_Request.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.content_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceValidate_Request::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.content_.SetAllocated(content, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.content_.IsDefault()) {
    _impl_.content_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceValidate_Request.content)
}

// optional string namespaceid = 4;
inline bool ResourceValidate_Request::_internal_has_namespaceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ResourceValidate_Request::has_namespaceid() const {
  return _internal_has_namespaceid();
}
inline void ResourceValidate_Request::clear_namespaceid() {
  _impl_.namespaceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ResourceValidate_Request::namespaceid() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.ResourceValidate_Request.namespaceid)
  return _internal_namespaceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceValidate_Request::set_namespaceid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.namespaceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.ResourceValidate_Request.namespaceid)
}
inline std::string* ResourceValidate_Request::mutable_namespaceid() {
  std::string* _s = _internal_mutable_namespaceid();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.ResourceValidate_Request.namespaceid)
  return _s;
}
inline const std::string& ResourceValidate_Request::_internal_namespaceid() const {
  return _impl_.namespaceid_.Get();
}
inline void ResourceValidate_Request::_internal_set_namespaceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.namespaceid_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceValidate_Request::_internal_mutable_namespaceid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.namespaceid_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceValidate_Request::release_namespaceid() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.ResourceValidate_Request.namespaceid)
  if (!_internal_has_namespaceid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.namespaceid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ResourceValidate_Request::set_allocated_namespaceid(std::string* namespaceid) {
  if (namespaceid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.namespaceid_.SetAllocated(namespaceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.namespaceid_.IsDefault()) {
    _impl_.namespaceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.ResourceValidate_Request.namespaceid)
}

// -------------------------------------------------------------------

// NamespacesGet_Request

// -------------------------------------------------------------------

// NamespacesGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void NamespacesGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus NamespacesGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus NamespacesGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.NamespacesGet_Response.status)
  return _internal_status();
}
inline void NamespacesGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void NamespacesGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.NamespacesGet_Response.status)
}

// optional string error = 2;
inline bool NamespacesGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NamespacesGet_Response::has_error() const {
  return _internal_has_error();
}
inline void NamespacesGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NamespacesGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.NamespacesGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NamespacesGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.NamespacesGet_Response.error)
}
inline std::string* NamespacesGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.NamespacesGet_Response.error)
  return _s;
}
inline const std::string& NamespacesGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void NamespacesGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* NamespacesGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* NamespacesGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.catalog.NamespacesGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NamespacesGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.catalog.NamespacesGet_Response.error)
}

// repeated string namespaces = 3;
inline int NamespacesGet_Response::_internal_namespaces_size() const {
  return _impl_.namespaces_.size();
}
inline int NamespacesGet_Response::namespaces_size() const {
  return _internal_namespaces_size();
}
inline void NamespacesGet_Response::clear_namespaces() {
  _impl_.namespaces_.Clear();
}
inline std::string* NamespacesGet_Response::add_namespaces() {
  std::string* _s = _internal_add_namespaces();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
  return _s;
}
inline const std::string& NamespacesGet_Response::_internal_namespaces(int index) const {
  return _impl_.namespaces_.Get(index);
}
inline const std::string& NamespacesGet_Response::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
  return _internal_namespaces(index);
}
inline std::string* NamespacesGet_Response::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
  return _impl_.namespaces_.Mutable(index);
}
inline void NamespacesGet_Response::set_namespaces(int index, const std::string& value) {
  _impl_.namespaces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline void NamespacesGet_Response::set_namespaces(int index, std::string&& value) {
  _impl_.namespaces_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline void NamespacesGet_Response::set_namespaces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.namespaces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline void NamespacesGet_Response::set_namespaces(int index, const char* value, size_t size) {
  _impl_.namespaces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline std::string* NamespacesGet_Response::_internal_add_namespaces() {
  return _impl_.namespaces_.Add();
}
inline void NamespacesGet_Response::add_namespaces(const std::string& value) {
  _impl_.namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline void NamespacesGet_Response::add_namespaces(std::string&& value) {
  _impl_.namespaces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline void NamespacesGet_Response::add_namespaces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline void NamespacesGet_Response::add_namespaces(const char* value, size_t size) {
  _impl_.namespaces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NamespacesGet_Response::namespaces() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
  return _impl_.namespaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NamespacesGet_Response::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.catalog.NamespacesGet_Response.namespaces)
  return &_impl_.namespaces_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace catalog
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::wazuh::api::engine::catalog::ResourceFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::catalog::ResourceFormat>() {
  return ::com::wazuh::api::engine::catalog::ResourceFormat_descriptor();
}
template <> struct is_proto_enum< ::com::wazuh::api::engine::catalog::ResourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::catalog::ResourceType>() {
  return ::com::wazuh::api::engine::catalog::ResourceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_catalog_2eproto
