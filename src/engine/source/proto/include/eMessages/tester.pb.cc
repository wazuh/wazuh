// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tester.proto

#include "tester.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace tester {
PROTOBUF_CONSTEXPR SessionPost::SessionPost(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.policy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lifetime_)*/0u} {}
struct SessionPostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionPostDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionPostDefaultTypeInternal() {}
  union {
    SessionPost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionPostDefaultTypeInternal _SessionPost_default_instance_;
PROTOBUF_CONSTEXPR Session::Session(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.policy_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lifetime_)*/0u
  , /*decltype(_impl_.policy_sync_)*/0
  , /*decltype(_impl_.entry_status_)*/0
  , /*decltype(_impl_.last_use_)*/0u} {}
struct SessionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionDefaultTypeInternal() {}
  union {
    Session _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionDefaultTypeInternal _Session_default_instance_;
PROTOBUF_CONSTEXPR Result_AssetTrace::Result_AssetTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.traces_)*/{}
  , /*decltype(_impl_.asset_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Result_AssetTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Result_AssetTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Result_AssetTraceDefaultTypeInternal() {}
  union {
    Result_AssetTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Result_AssetTraceDefaultTypeInternal _Result_AssetTrace_default_instance_;
PROTOBUF_CONSTEXPR Result::Result(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_traces_)*/{}
  , /*decltype(_impl_.output_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResultDefaultTypeInternal() {}
  union {
    Result _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResultDefaultTypeInternal _Result_default_instance_;
PROTOBUF_CONSTEXPR SessionPost_Request::SessionPost_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.session_)*/nullptr} {}
struct SessionPost_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionPost_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionPost_RequestDefaultTypeInternal() {}
  union {
    SessionPost_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionPost_RequestDefaultTypeInternal _SessionPost_Request_default_instance_;
PROTOBUF_CONSTEXPR SessionDelete_Request::SessionDelete_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionDelete_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionDelete_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionDelete_RequestDefaultTypeInternal() {}
  union {
    SessionDelete_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionDelete_RequestDefaultTypeInternal _SessionDelete_Request_default_instance_;
PROTOBUF_CONSTEXPR SessionGet_Request::SessionGet_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionGet_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionGet_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionGet_RequestDefaultTypeInternal() {}
  union {
    SessionGet_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionGet_RequestDefaultTypeInternal _SessionGet_Request_default_instance_;
PROTOBUF_CONSTEXPR SessionGet_Response::SessionGet_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.session_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct SessionGet_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionGet_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionGet_ResponseDefaultTypeInternal() {}
  union {
    SessionGet_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionGet_ResponseDefaultTypeInternal _SessionGet_Response_default_instance_;
PROTOBUF_CONSTEXPR SessionReload_Request::SessionReload_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionReload_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionReload_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionReload_RequestDefaultTypeInternal() {}
  union {
    SessionReload_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionReload_RequestDefaultTypeInternal _SessionReload_Request_default_instance_;
PROTOBUF_CONSTEXPR TableGet_Request::TableGet_Request(
    ::_pbi::ConstantInitialized) {}
struct TableGet_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableGet_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableGet_RequestDefaultTypeInternal() {}
  union {
    TableGet_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableGet_RequestDefaultTypeInternal _TableGet_Request_default_instance_;
PROTOBUF_CONSTEXPR TableGet_Response::TableGet_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sessions_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0} {}
struct TableGet_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableGet_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableGet_ResponseDefaultTypeInternal() {}
  union {
    TableGet_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableGet_ResponseDefaultTypeInternal _TableGet_Response_default_instance_;
PROTOBUF_CONSTEXPR RunPost_Request::RunPost_Request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asset_trace_)*/{}
  , /*decltype(_impl_.namespaces_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.location_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.queue_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trace_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunPost_RequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunPost_RequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunPost_RequestDefaultTypeInternal() {}
  union {
    RunPost_Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunPost_RequestDefaultTypeInternal _RunPost_Request_default_instance_;
PROTOBUF_CONSTEXPR RunPost_Response::RunPost_Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/nullptr
  , /*decltype(_impl_.status_)*/0} {}
struct RunPost_ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunPost_ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunPost_ResponseDefaultTypeInternal() {}
  union {
    RunPost_Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunPost_ResponseDefaultTypeInternal _RunPost_Response_default_instance_;
}  // namespace tester
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
static ::_pb::Metadata file_level_metadata_tester_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tester_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tester_2eproto = nullptr;

const uint32_t TableStruct_tester_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost, _impl_.policy_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost, _impl_.lifetime_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost, _impl_.description_),
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_.policy_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_.lifetime_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_.policy_sync_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_.entry_status_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Session, _impl_.last_use_),
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Result_AssetTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Result_AssetTrace, _impl_.asset_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Result_AssetTrace, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Result_AssetTrace, _impl_.traces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Result, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::Result, _impl_.asset_traces_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost_Request, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionPost_Request, _impl_.session_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionDelete_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionDelete_Request, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionGet_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionGet_Request, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionGet_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionGet_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionGet_Response, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionGet_Response, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionGet_Response, _impl_.session_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionReload_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::SessionReload_Request, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::TableGet_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::TableGet_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::TableGet_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::TableGet_Response, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::TableGet_Response, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::TableGet_Response, _impl_.sessions_),
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _impl_.location_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _impl_.queue_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _impl_.trace_level_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _impl_.asset_trace_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Request, _impl_.namespaces_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Response, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Response, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Response, _impl_.error_),
  PROTOBUF_FIELD_OFFSET(::com::wazuh::api::engine::tester::RunPost_Response, _impl_.result_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::com::wazuh::api::engine::tester::SessionPost)},
  { 14, 27, -1, sizeof(::com::wazuh::api::engine::tester::Session)},
  { 34, -1, -1, sizeof(::com::wazuh::api::engine::tester::Result_AssetTrace)},
  { 43, -1, -1, sizeof(::com::wazuh::api::engine::tester::Result)},
  { 51, 58, -1, sizeof(::com::wazuh::api::engine::tester::SessionPost_Request)},
  { 59, -1, -1, sizeof(::com::wazuh::api::engine::tester::SessionDelete_Request)},
  { 66, -1, -1, sizeof(::com::wazuh::api::engine::tester::SessionGet_Request)},
  { 73, 82, -1, sizeof(::com::wazuh::api::engine::tester::SessionGet_Response)},
  { 85, -1, -1, sizeof(::com::wazuh::api::engine::tester::SessionReload_Request)},
  { 92, -1, -1, sizeof(::com::wazuh::api::engine::tester::TableGet_Request)},
  { 98, 107, -1, sizeof(::com::wazuh::api::engine::tester::TableGet_Response)},
  { 110, -1, -1, sizeof(::com::wazuh::api::engine::tester::RunPost_Request)},
  { 123, 132, -1, sizeof(::com::wazuh::api::engine::tester::RunPost_Response)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::com::wazuh::api::engine::tester::_SessionPost_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_Session_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_Result_AssetTrace_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_Result_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_SessionPost_Request_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_SessionDelete_Request_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_SessionGet_Request_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_SessionGet_Response_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_SessionReload_Request_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_TableGet_Request_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_TableGet_Response_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_RunPost_Request_default_instance_._instance,
  &::com::wazuh::api::engine::tester::_RunPost_Response_default_instance_._instance,
};

const char descriptor_table_protodef_tester_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014tester.proto\022\033com.wazuh.api.engine.tes"
  "ter\032\014engine.proto\"g\n\013SessionPost\022\014\n\004name"
  "\030\001 \001(\t\022\016\n\006policy\030\002 \001(\t\022\020\n\010lifetime\030\003 \001(\r"
  "\022\030\n\013description\030\004 \001(\tH\000\210\001\001B\016\n\014_descripti"
  "on\"\347\001\n\007Session\022\014\n\004name\030\001 \001(\t\022\016\n\006policy\030\002"
  " \001(\t\022\020\n\010lifetime\030\003 \001(\r\022\030\n\013description\030\004 "
  "\001(\tH\000\210\001\001\0226\n\013policy_sync\030\006 \001(\0162!.com.wazu"
  "h.api.engine.tester.Sync\0228\n\014entry_status"
  "\030\007 \001(\0162\".com.wazuh.api.engine.tester.Sta"
  "te\022\020\n\010last_use\030\010 \001(\rB\016\n\014_description\"\234\001\n"
  "\006Result\022\016\n\006output\030\001 \001(\t\022D\n\014asset_traces\030"
  "\002 \003(\0132..com.wazuh.api.engine.tester.Resu"
  "lt.AssetTrace\032<\n\nAssetTrace\022\r\n\005asset\030\001 \001"
  "(\t\022\017\n\007success\030\002 \001(\010\022\016\n\006traces\030\003 \003(\t\"a\n\023S"
  "essionPost_Request\022>\n\007session\030\001 \001(\0132(.co"
  "m.wazuh.api.engine.tester.SessionPostH\000\210"
  "\001\001B\n\n\010_session\"%\n\025SessionDelete_Request\022"
  "\014\n\004name\030\001 \001(\t\"\"\n\022SessionGet_Request\022\014\n\004n"
  "ame\030\001 \001(\t\"\257\001\n\023SessionGet_Response\0222\n\006sta"
  "tus\030\001 \001(\0162\".com.wazuh.api.engine.ReturnS"
  "tatus\022\022\n\005error\030\002 \001(\tH\000\210\001\001\022:\n\007session\030\003 \001"
  "(\0132$.com.wazuh.api.engine.tester.Session"
  "H\001\210\001\001B\010\n\006_errorB\n\n\010_session\"%\n\025SessionRe"
  "load_Request\022\014\n\004name\030\001 \001(\t\"\022\n\020TableGet_R"
  "equest\"\235\001\n\021TableGet_Response\0222\n\006status\030\001"
  " \001(\0162\".com.wazuh.api.engine.ReturnStatus"
  "\022\022\n\005error\030\002 \001(\tH\000\210\001\001\0226\n\010sessions\030\003 \003(\0132$"
  ".com.wazuh.api.engine.tester.SessionB\010\n\006"
  "_error\"\270\001\n\017RunPost_Request\022\014\n\004name\030\001 \001(\t"
  "\022\017\n\007message\030\002 \001(\t\022\020\n\010location\030\003 \001(\t\022\r\n\005q"
  "ueue\030\004 \001(\t\022<\n\013trace_level\030\005 \001(\0162\'.com.wa"
  "zuh.api.engine.tester.TraceLevel\022\023\n\013asse"
  "t_trace\030\006 \003(\t\022\022\n\nnamespaces\030\007 \003(\t\"\251\001\n\020Ru"
  "nPost_Response\0222\n\006status\030\001 \001(\0162\".com.waz"
  "uh.api.engine.ReturnStatus\022\022\n\005error\030\002 \001("
  "\tH\000\210\001\001\0228\n\006result\030\003 \001(\0132#.com.wazuh.api.e"
  "ngine.tester.ResultH\001\210\001\001B\010\n\006_errorB\t\n\007_r"
  "esult*5\n\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\014\n\010DIS"
  "ABLED\020\001\022\013\n\007ENABLED\020\002*>\n\004Sync\022\020\n\014SYNC_UNK"
  "NOWN\020\000\022\013\n\007UPDATED\020\001\022\014\n\010OUTDATED\020\002\022\t\n\005ERR"
  "OR\020\003*/\n\nTraceLevel\022\010\n\004NONE\020\000\022\016\n\nASSET_ON"
  "LY\020\001\022\007\n\003ALL\020\002b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tester_2eproto_deps[1] = {
  &::descriptor_table_engine_2eproto,
};
static ::_pbi::once_flag descriptor_table_tester_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tester_2eproto = {
    false, false, 1661, descriptor_table_protodef_tester_2eproto,
    "tester.proto",
    &descriptor_table_tester_2eproto_once, descriptor_table_tester_2eproto_deps, 1, 13,
    schemas, file_default_instances, TableStruct_tester_2eproto::offsets,
    file_level_metadata_tester_2eproto, file_level_enum_descriptors_tester_2eproto,
    file_level_service_descriptors_tester_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tester_2eproto_getter() {
  return &descriptor_table_tester_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tester_2eproto(&descriptor_table_tester_2eproto);
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace tester {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tester_2eproto);
  return file_level_enum_descriptors_tester_2eproto[0];
}
bool State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sync_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tester_2eproto);
  return file_level_enum_descriptors_tester_2eproto[1];
}
bool Sync_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tester_2eproto);
  return file_level_enum_descriptors_tester_2eproto[2];
}
bool TraceLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SessionPost::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionPost>()._impl_._has_bits_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SessionPost::SessionPost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.SessionPost)
}
SessionPost::SessionPost(const SessionPost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionPost* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.lifetime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policy().empty()) {
    _this->_impl_.policy_.Set(from._internal_policy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.lifetime_ = from._impl_.lifetime_;
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.SessionPost)
}

inline void SessionPost::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.lifetime_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionPost::~SessionPost() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.SessionPost)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionPost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.policy_.Destroy();
  _impl_.description_.Destroy();
}

void SessionPost::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionPost::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.SessionPost)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.policy_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.description_.ClearNonDefaultToEmpty();
  }
  _impl_.lifetime_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionPost::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.SessionPost.name"));
        } else
          goto handle_unusual;
        continue;
      // string policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_policy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.SessionPost.policy"));
        } else
          goto handle_unusual;
        continue;
      // uint32 lifetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.SessionPost.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionPost::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.SessionPost)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.SessionPost.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string policy = 2;
  if (!this->_internal_policy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy().data(), static_cast<int>(this->_internal_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.SessionPost.policy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_policy(), target);
  }

  // uint32 lifetime = 3;
  if (this->_internal_lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lifetime(), target);
  }

  // optional string description = 4;
  if (_internal_has_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.SessionPost.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.SessionPost)
  return target;
}

size_t SessionPost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.SessionPost)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string policy = 2;
  if (!this->_internal_policy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy());
  }

  // optional string description = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 lifetime = 3;
  if (this->_internal_lifetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lifetime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionPost::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionPost::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionPost::GetClassData() const { return &_class_data_; }


void SessionPost::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionPost*>(&to_msg);
  auto& from = static_cast<const SessionPost&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.SessionPost)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_policy().empty()) {
    _this->_internal_set_policy(from._internal_policy());
  }
  if (from._internal_has_description()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_lifetime() != 0) {
    _this->_internal_set_lifetime(from._internal_lifetime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionPost::CopyFrom(const SessionPost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.SessionPost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionPost::IsInitialized() const {
  return true;
}

void SessionPost::InternalSwap(SessionPost* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.policy_, lhs_arena,
      &other->_impl_.policy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.lifetime_, other->_impl_.lifetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionPost::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[0]);
}

// ===================================================================

class Session::_Internal {
 public:
  using HasBits = decltype(std::declval<Session>()._impl_._has_bits_);
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Session::Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.Session)
}
Session::Session(const Session& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Session* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.lifetime_){}
    , decltype(_impl_.policy_sync_){}
    , decltype(_impl_.entry_status_){}
    , decltype(_impl_.last_use_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policy().empty()) {
    _this->_impl_.policy_.Set(from._internal_policy(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.lifetime_, &from._impl_.lifetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_use_) -
    reinterpret_cast<char*>(&_impl_.lifetime_)) + sizeof(_impl_.last_use_));
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.Session)
}

inline void Session::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.policy_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.lifetime_){0u}
    , decltype(_impl_.policy_sync_){0}
    , decltype(_impl_.entry_status_){0}
    , decltype(_impl_.last_use_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.policy_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.policy_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.Session)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Session::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.policy_.Destroy();
  _impl_.description_.Destroy();
}

void Session::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.Session)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.policy_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.description_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_use_) -
      reinterpret_cast<char*>(&_impl_.lifetime_)) + sizeof(_impl_.last_use_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Session::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.Session.name"));
        } else
          goto handle_unusual;
        continue;
      // string policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_policy();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.Session.policy"));
        } else
          goto handle_unusual;
        continue;
      // uint32 lifetime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.Session.description"));
        } else
          goto handle_unusual;
        continue;
      // .com.wazuh.api.engine.tester.Sync policy_sync = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_policy_sync(static_cast<::com::wazuh::api::engine::tester::Sync>(val));
        } else
          goto handle_unusual;
        continue;
      // .com.wazuh.api.engine.tester.State entry_status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_entry_status(static_cast<::com::wazuh::api::engine::tester::State>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 last_use = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.last_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Session::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.Session)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.Session.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string policy = 2;
  if (!this->_internal_policy().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy().data(), static_cast<int>(this->_internal_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.Session.policy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_policy(), target);
  }

  // uint32 lifetime = 3;
  if (this->_internal_lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_lifetime(), target);
  }

  // optional string description = 4;
  if (_internal_has_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.Session.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .com.wazuh.api.engine.tester.Sync policy_sync = 6;
  if (this->_internal_policy_sync() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_policy_sync(), target);
  }

  // .com.wazuh.api.engine.tester.State entry_status = 7;
  if (this->_internal_entry_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_entry_status(), target);
  }

  // uint32 last_use = 8;
  if (this->_internal_last_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_last_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.Session)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string policy = 2;
  if (!this->_internal_policy().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy());
  }

  // optional string description = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // uint32 lifetime = 3;
  if (this->_internal_lifetime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_lifetime());
  }

  // .com.wazuh.api.engine.tester.Sync policy_sync = 6;
  if (this->_internal_policy_sync() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_policy_sync());
  }

  // .com.wazuh.api.engine.tester.State entry_status = 7;
  if (this->_internal_entry_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_entry_status());
  }

  // uint32 last_use = 8;
  if (this->_internal_last_use() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_use());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Session::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Session::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Session::GetClassData() const { return &_class_data_; }


void Session::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Session*>(&to_msg);
  auto& from = static_cast<const Session&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.Session)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_policy().empty()) {
    _this->_internal_set_policy(from._internal_policy());
  }
  if (from._internal_has_description()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_lifetime() != 0) {
    _this->_internal_set_lifetime(from._internal_lifetime());
  }
  if (from._internal_policy_sync() != 0) {
    _this->_internal_set_policy_sync(from._internal_policy_sync());
  }
  if (from._internal_entry_status() != 0) {
    _this->_internal_set_entry_status(from._internal_entry_status());
  }
  if (from._internal_last_use() != 0) {
    _this->_internal_set_last_use(from._internal_last_use());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::InternalSwap(Session* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.policy_, lhs_arena,
      &other->_impl_.policy_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Session, _impl_.last_use_)
      + sizeof(Session::_impl_.last_use_)
      - PROTOBUF_FIELD_OFFSET(Session, _impl_.lifetime_)>(
          reinterpret_cast<char*>(&_impl_.lifetime_),
          reinterpret_cast<char*>(&other->_impl_.lifetime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Session::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[1]);
}

// ===================================================================

class Result_AssetTrace::_Internal {
 public:
};

Result_AssetTrace::Result_AssetTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.Result.AssetTrace)
}
Result_AssetTrace::Result_AssetTrace(const Result_AssetTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result_AssetTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.traces_){from._impl_.traces_}
    , decltype(_impl_.asset_){}
    , decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset().empty()) {
    _this->_impl_.asset_.Set(from._internal_asset(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.Result.AssetTrace)
}

inline void Result_AssetTrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.traces_){arena}
    , decltype(_impl_.asset_){}
    , decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.asset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result_AssetTrace::~Result_AssetTrace() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.Result.AssetTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result_AssetTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traces_.~RepeatedPtrField();
  _impl_.asset_.Destroy();
}

void Result_AssetTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result_AssetTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.Result.AssetTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traces_.Clear();
  _impl_.asset_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result_AssetTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string asset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_asset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.Result.AssetTrace.asset"));
        } else
          goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string traces = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_traces();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.Result.AssetTrace.traces"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result_AssetTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.Result.AssetTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset = 1;
  if (!this->_internal_asset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.Result.AssetTrace.asset");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset(), target);
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // repeated string traces = 3;
  for (int i = 0, n = this->_internal_traces_size(); i < n; i++) {
    const auto& s = this->_internal_traces(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.Result.AssetTrace.traces");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.Result.AssetTrace)
  return target;
}

size_t Result_AssetTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.Result.AssetTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string traces = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.traces_.size());
  for (int i = 0, n = _impl_.traces_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.traces_.Get(i));
  }

  // string asset = 1;
  if (!this->_internal_asset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // bool success = 2;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result_AssetTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result_AssetTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result_AssetTrace::GetClassData() const { return &_class_data_; }


void Result_AssetTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result_AssetTrace*>(&to_msg);
  auto& from = static_cast<const Result_AssetTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.Result.AssetTrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.traces_.MergeFrom(from._impl_.traces_);
  if (!from._internal_asset().empty()) {
    _this->_internal_set_asset(from._internal_asset());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result_AssetTrace::CopyFrom(const Result_AssetTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.Result.AssetTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result_AssetTrace::IsInitialized() const {
  return true;
}

void Result_AssetTrace::InternalSwap(Result_AssetTrace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.traces_.InternalSwap(&other->_impl_.traces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asset_, lhs_arena,
      &other->_impl_.asset_, rhs_arena
  );
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Result_AssetTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[2]);
}

// ===================================================================

class Result::_Internal {
 public:
};

Result::Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.Result)
}
Result::Result(const Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Result* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_traces_){from._impl_.asset_traces_}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output().empty()) {
    _this->_impl_.output_.Set(from._internal_output(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.Result)
}

inline void Result::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_traces_){arena}
    , decltype(_impl_.output_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.output_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.output_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.Result)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Result::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_traces_.~RepeatedPtrField();
  _impl_.output_.Destroy();
}

void Result::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Result::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.Result)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_traces_.Clear();
  _impl_.output_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Result::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string output = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_output();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.Result.output"));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.wazuh.api.engine.tester.Result.AssetTrace asset_traces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asset_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Result::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.Result)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string output = 1;
  if (!this->_internal_output().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output().data(), static_cast<int>(this->_internal_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.Result.output");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output(), target);
  }

  // repeated .com.wazuh.api.engine.tester.Result.AssetTrace asset_traces = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asset_traces_size()); i < n; i++) {
    const auto& repfield = this->_internal_asset_traces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.Result)
  return target;
}

size_t Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.Result)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.wazuh.api.engine.tester.Result.AssetTrace asset_traces = 2;
  total_size += 1UL * this->_internal_asset_traces_size();
  for (const auto& msg : this->_impl_.asset_traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string output = 1;
  if (!this->_internal_output().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Result::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Result::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Result::GetClassData() const { return &_class_data_; }


void Result::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Result*>(&to_msg);
  auto& from = static_cast<const Result&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.Result)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asset_traces_.MergeFrom(from._impl_.asset_traces_);
  if (!from._internal_output().empty()) {
    _this->_internal_set_output(from._internal_output());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Result::CopyFrom(const Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {
  return true;
}

void Result::InternalSwap(Result* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.asset_traces_.InternalSwap(&other->_impl_.asset_traces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.output_, lhs_arena,
      &other->_impl_.output_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Result::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[3]);
}

// ===================================================================

class SessionPost_Request::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionPost_Request>()._impl_._has_bits_);
  static const ::com::wazuh::api::engine::tester::SessionPost& session(const SessionPost_Request* msg);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::wazuh::api::engine::tester::SessionPost&
SessionPost_Request::_Internal::session(const SessionPost_Request* msg) {
  return *msg->_impl_.session_;
}
SessionPost_Request::SessionPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.SessionPost_Request)
}
SessionPost_Request::SessionPost_Request(const SessionPost_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionPost_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.session_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_session()) {
    _this->_impl_.session_ = new ::com::wazuh::api::engine::tester::SessionPost(*from._impl_.session_);
  }
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.SessionPost_Request)
}

inline void SessionPost_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.session_){nullptr}
  };
}

SessionPost_Request::~SessionPost_Request() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.SessionPost_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionPost_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.session_;
}

void SessionPost_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionPost_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.SessionPost_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.session_ != nullptr);
    _impl_.session_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionPost_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.wazuh.api.engine.tester.SessionPost session = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionPost_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.SessionPost_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .com.wazuh.api.engine.tester.SessionPost session = 1;
  if (_internal_has_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::session(this),
        _Internal::session(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.SessionPost_Request)
  return target;
}

size_t SessionPost_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.SessionPost_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.wazuh.api.engine.tester.SessionPost session = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.session_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionPost_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionPost_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionPost_Request::GetClassData() const { return &_class_data_; }


void SessionPost_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionPost_Request*>(&to_msg);
  auto& from = static_cast<const SessionPost_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.SessionPost_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_session()) {
    _this->_internal_mutable_session()->::com::wazuh::api::engine::tester::SessionPost::MergeFrom(
        from._internal_session());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionPost_Request::CopyFrom(const SessionPost_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.SessionPost_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionPost_Request::IsInitialized() const {
  return true;
}

void SessionPost_Request::InternalSwap(SessionPost_Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.session_, other->_impl_.session_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionPost_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[4]);
}

// ===================================================================

class SessionDelete_Request::_Internal {
 public:
};

SessionDelete_Request::SessionDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.SessionDelete_Request)
}
SessionDelete_Request::SessionDelete_Request(const SessionDelete_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionDelete_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.SessionDelete_Request)
}

inline void SessionDelete_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionDelete_Request::~SessionDelete_Request() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.SessionDelete_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionDelete_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SessionDelete_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionDelete_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.SessionDelete_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionDelete_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.SessionDelete_Request.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionDelete_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.SessionDelete_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.SessionDelete_Request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.SessionDelete_Request)
  return target;
}

size_t SessionDelete_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.SessionDelete_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionDelete_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionDelete_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionDelete_Request::GetClassData() const { return &_class_data_; }


void SessionDelete_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionDelete_Request*>(&to_msg);
  auto& from = static_cast<const SessionDelete_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.SessionDelete_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionDelete_Request::CopyFrom(const SessionDelete_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.SessionDelete_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionDelete_Request::IsInitialized() const {
  return true;
}

void SessionDelete_Request::InternalSwap(SessionDelete_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionDelete_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[5]);
}

// ===================================================================

class SessionGet_Request::_Internal {
 public:
};

SessionGet_Request::SessionGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.SessionGet_Request)
}
SessionGet_Request::SessionGet_Request(const SessionGet_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionGet_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.SessionGet_Request)
}

inline void SessionGet_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionGet_Request::~SessionGet_Request() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.SessionGet_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionGet_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SessionGet_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionGet_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.SessionGet_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionGet_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.SessionGet_Request.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionGet_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.SessionGet_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.SessionGet_Request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.SessionGet_Request)
  return target;
}

size_t SessionGet_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.SessionGet_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionGet_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionGet_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionGet_Request::GetClassData() const { return &_class_data_; }


void SessionGet_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionGet_Request*>(&to_msg);
  auto& from = static_cast<const SessionGet_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.SessionGet_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionGet_Request::CopyFrom(const SessionGet_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.SessionGet_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionGet_Request::IsInitialized() const {
  return true;
}

void SessionGet_Request::InternalSwap(SessionGet_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionGet_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[6]);
}

// ===================================================================

class SessionGet_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionGet_Response>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::wazuh::api::engine::tester::Session& session(const SessionGet_Response* msg);
  static void set_has_session(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::wazuh::api::engine::tester::Session&
SessionGet_Response::_Internal::session(const SessionGet_Response* msg) {
  return *msg->_impl_.session_;
}
SessionGet_Response::SessionGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.SessionGet_Response)
}
SessionGet_Response::SessionGet_Response(const SessionGet_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionGet_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.session_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_session()) {
    _this->_impl_.session_ = new ::com::wazuh::api::engine::tester::Session(*from._impl_.session_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.SessionGet_Response)
}

inline void SessionGet_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.session_){nullptr}
    , decltype(_impl_.status_){0}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionGet_Response::~SessionGet_Response() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.SessionGet_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionGet_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.session_;
}

void SessionGet_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionGet_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.SessionGet_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.session_ != nullptr);
      _impl_.session_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionGet_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.wazuh.api.engine.ReturnStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::wazuh::api::engine::ReturnStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.SessionGet_Response.error"));
        } else
          goto handle_unusual;
        continue;
      // optional .com.wazuh.api.engine.tester.Session session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionGet_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.SessionGet_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string error = 2;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.SessionGet_Response.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // optional .com.wazuh.api.engine.tester.Session session = 3;
  if (_internal_has_session()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::session(this),
        _Internal::session(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.SessionGet_Response)
  return target;
}

size_t SessionGet_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.SessionGet_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // optional .com.wazuh.api.engine.tester.Session session = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.session_);
    }

  }
  // .com.wazuh.api.engine.ReturnStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionGet_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionGet_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionGet_Response::GetClassData() const { return &_class_data_; }


void SessionGet_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionGet_Response*>(&to_msg);
  auto& from = static_cast<const SessionGet_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.SessionGet_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_session()->::com::wazuh::api::engine::tester::Session::MergeFrom(
          from._internal_session());
    }
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionGet_Response::CopyFrom(const SessionGet_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.SessionGet_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionGet_Response::IsInitialized() const {
  return true;
}

void SessionGet_Response::InternalSwap(SessionGet_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionGet_Response, _impl_.status_)
      + sizeof(SessionGet_Response::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(SessionGet_Response, _impl_.session_)>(
          reinterpret_cast<char*>(&_impl_.session_),
          reinterpret_cast<char*>(&other->_impl_.session_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionGet_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[7]);
}

// ===================================================================

class SessionReload_Request::_Internal {
 public:
};

SessionReload_Request::SessionReload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.SessionReload_Request)
}
SessionReload_Request::SessionReload_Request(const SessionReload_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionReload_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.SessionReload_Request)
}

inline void SessionReload_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionReload_Request::~SessionReload_Request() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.SessionReload_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionReload_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void SessionReload_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionReload_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.SessionReload_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionReload_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.SessionReload_Request.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionReload_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.SessionReload_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.SessionReload_Request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.SessionReload_Request)
  return target;
}

size_t SessionReload_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.SessionReload_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionReload_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionReload_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionReload_Request::GetClassData() const { return &_class_data_; }


void SessionReload_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionReload_Request*>(&to_msg);
  auto& from = static_cast<const SessionReload_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.SessionReload_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionReload_Request::CopyFrom(const SessionReload_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.SessionReload_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionReload_Request::IsInitialized() const {
  return true;
}

void SessionReload_Request::InternalSwap(SessionReload_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionReload_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[8]);
}

// ===================================================================

class TableGet_Request::_Internal {
 public:
};

TableGet_Request::TableGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.TableGet_Request)
}
TableGet_Request::TableGet_Request(const TableGet_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TableGet_Request* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.TableGet_Request)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableGet_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableGet_Request::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TableGet_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[9]);
}

// ===================================================================

class TableGet_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<TableGet_Response>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TableGet_Response::TableGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.TableGet_Response)
}
TableGet_Response::TableGet_Response(const TableGet_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableGet_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessions_){from._impl_.sessions_}
    , decltype(_impl_.error_){}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.TableGet_Response)
}

inline void TableGet_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessions_){arena}
    , decltype(_impl_.error_){}
    , decltype(_impl_.status_){0}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableGet_Response::~TableGet_Response() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.TableGet_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableGet_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessions_.~RepeatedPtrField();
  _impl_.error_.Destroy();
}

void TableGet_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableGet_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.TableGet_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sessions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.error_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableGet_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.wazuh.api.engine.ReturnStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::wazuh::api::engine::ReturnStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.TableGet_Response.error"));
        } else
          goto handle_unusual;
        continue;
      // repeated .com.wazuh.api.engine.tester.Session sessions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableGet_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.TableGet_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string error = 2;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.TableGet_Response.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // repeated .com.wazuh.api.engine.tester.Session sessions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sessions_size()); i < n; i++) {
    const auto& repfield = this->_internal_sessions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.TableGet_Response)
  return target;
}

size_t TableGet_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.TableGet_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.wazuh.api.engine.tester.Session sessions = 3;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->_impl_.sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string error = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableGet_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableGet_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableGet_Response::GetClassData() const { return &_class_data_; }


void TableGet_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableGet_Response*>(&to_msg);
  auto& from = static_cast<const TableGet_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.TableGet_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sessions_.MergeFrom(from._impl_.sessions_);
  if (from._internal_has_error()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableGet_Response::CopyFrom(const TableGet_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.TableGet_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableGet_Response::IsInitialized() const {
  return true;
}

void TableGet_Response::InternalSwap(TableGet_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sessions_.InternalSwap(&other->_impl_.sessions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableGet_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[10]);
}

// ===================================================================

class RunPost_Request::_Internal {
 public:
};

RunPost_Request::RunPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.RunPost_Request)
}
RunPost_Request::RunPost_Request(const RunPost_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunPost_Request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_trace_){from._impl_.asset_trace_}
    , decltype(_impl_.namespaces_){from._impl_.namespaces_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.queue_){}
    , decltype(_impl_.trace_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), 
      _this->GetArenaForAllocation());
  }
  _impl_.queue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_queue().empty()) {
    _this->_impl_.queue_.Set(from._internal_queue(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.trace_level_ = from._impl_.trace_level_;
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.RunPost_Request)
}

inline void RunPost_Request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.asset_trace_){arena}
    , decltype(_impl_.namespaces_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.location_){}
    , decltype(_impl_.queue_){}
    , decltype(_impl_.trace_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.location_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.queue_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.queue_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunPost_Request::~RunPost_Request() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.RunPost_Request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunPost_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asset_trace_.~RepeatedPtrField();
  _impl_.namespaces_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.message_.Destroy();
  _impl_.location_.Destroy();
  _impl_.queue_.Destroy();
}

void RunPost_Request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunPost_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.RunPost_Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_trace_.Clear();
  _impl_.namespaces_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _impl_.queue_.ClearToEmpty();
  _impl_.trace_level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunPost_Request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.RunPost_Request.name"));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.RunPost_Request.message"));
        } else
          goto handle_unusual;
        continue;
      // string location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.RunPost_Request.location"));
        } else
          goto handle_unusual;
        continue;
      // string queue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_queue();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.RunPost_Request.queue"));
        } else
          goto handle_unusual;
        continue;
      // .com.wazuh.api.engine.tester.TraceLevel trace_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trace_level(static_cast<::com::wazuh::api::engine::tester::TraceLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string asset_trace = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_asset_trace();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.RunPost_Request.asset_trace"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string namespaces = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_namespaces();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.RunPost_Request.namespaces"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunPost_Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.RunPost_Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.RunPost_Request.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.RunPost_Request.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string location = 3;
  if (!this->_internal_location().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.RunPost_Request.location");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_location(), target);
  }

  // string queue = 4;
  if (!this->_internal_queue().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_queue().data(), static_cast<int>(this->_internal_queue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.RunPost_Request.queue");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_queue(), target);
  }

  // .com.wazuh.api.engine.tester.TraceLevel trace_level = 5;
  if (this->_internal_trace_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_trace_level(), target);
  }

  // repeated string asset_trace = 6;
  for (int i = 0, n = this->_internal_asset_trace_size(); i < n; i++) {
    const auto& s = this->_internal_asset_trace(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.RunPost_Request.asset_trace");
    target = stream->WriteString(6, s, target);
  }

  // repeated string namespaces = 7;
  for (int i = 0, n = this->_internal_namespaces_size(); i < n; i++) {
    const auto& s = this->_internal_namespaces(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.RunPost_Request.namespaces");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.RunPost_Request)
  return target;
}

size_t RunPost_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.RunPost_Request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string asset_trace = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.asset_trace_.size());
  for (int i = 0, n = _impl_.asset_trace_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.asset_trace_.Get(i));
  }

  // repeated string namespaces = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.namespaces_.size());
  for (int i = 0, n = _impl_.namespaces_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.namespaces_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string location = 3;
  if (!this->_internal_location().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  // string queue = 4;
  if (!this->_internal_queue().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_queue());
  }

  // .com.wazuh.api.engine.tester.TraceLevel trace_level = 5;
  if (this->_internal_trace_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_trace_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunPost_Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunPost_Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunPost_Request::GetClassData() const { return &_class_data_; }


void RunPost_Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunPost_Request*>(&to_msg);
  auto& from = static_cast<const RunPost_Request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.RunPost_Request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asset_trace_.MergeFrom(from._impl_.asset_trace_);
  _this->_impl_.namespaces_.MergeFrom(from._impl_.namespaces_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (!from._internal_queue().empty()) {
    _this->_internal_set_queue(from._internal_queue());
  }
  if (from._internal_trace_level() != 0) {
    _this->_internal_set_trace_level(from._internal_trace_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunPost_Request::CopyFrom(const RunPost_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.RunPost_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPost_Request::IsInitialized() const {
  return true;
}

void RunPost_Request::InternalSwap(RunPost_Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.asset_trace_.InternalSwap(&other->_impl_.asset_trace_);
  _impl_.namespaces_.InternalSwap(&other->_impl_.namespaces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.location_, lhs_arena,
      &other->_impl_.location_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.queue_, lhs_arena,
      &other->_impl_.queue_, rhs_arena
  );
  swap(_impl_.trace_level_, other->_impl_.trace_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunPost_Request::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[11]);
}

// ===================================================================

class RunPost_Response::_Internal {
 public:
  using HasBits = decltype(std::declval<RunPost_Response>()._impl_._has_bits_);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::wazuh::api::engine::tester::Result& result(const RunPost_Response* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::wazuh::api::engine::tester::Result&
RunPost_Response::_Internal::result(const RunPost_Response* msg) {
  return *msg->_impl_.result_;
}
RunPost_Response::RunPost_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:com.wazuh.api.engine.tester.RunPost_Response)
}
RunPost_Response::RunPost_Response(const RunPost_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunPost_Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.status_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_error()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_result()) {
    _this->_impl_.result_ = new ::com::wazuh::api::engine::tester::Result(*from._impl_.result_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:com.wazuh.api.engine.tester.RunPost_Response)
}

inline void RunPost_Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_){}
    , decltype(_impl_.result_){nullptr}
    , decltype(_impl_.status_){0}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunPost_Response::~RunPost_Response() {
  // @@protoc_insertion_point(destructor:com.wazuh.api.engine.tester.RunPost_Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunPost_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
  if (this != internal_default_instance()) delete _impl_.result_;
}

void RunPost_Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunPost_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:com.wazuh.api.engine.tester.RunPost_Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.result_ != nullptr);
      _impl_.result_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunPost_Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .com.wazuh.api.engine.ReturnStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::wazuh::api::engine::ReturnStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // optional string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "com.wazuh.api.engine.tester.RunPost_Response.error"));
        } else
          goto handle_unusual;
        continue;
      // optional .com.wazuh.api.engine.tester.Result result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunPost_Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.wazuh.api.engine.tester.RunPost_Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // optional string error = 2;
  if (_internal_has_error()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.wazuh.api.engine.tester.RunPost_Response.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  // optional .com.wazuh.api.engine.tester.Result result = 3;
  if (_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.wazuh.api.engine.tester.RunPost_Response)
  return target;
}

size_t RunPost_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.wazuh.api.engine.tester.RunPost_Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_error());
    }

    // optional .com.wazuh.api.engine.tester.Result result = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.result_);
    }

  }
  // .com.wazuh.api.engine.ReturnStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunPost_Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunPost_Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunPost_Response::GetClassData() const { return &_class_data_; }


void RunPost_Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunPost_Response*>(&to_msg);
  auto& from = static_cast<const RunPost_Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:com.wazuh.api.engine.tester.RunPost_Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error(from._internal_error());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_result()->::com::wazuh::api::engine::tester::Result::MergeFrom(
          from._internal_result());
    }
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunPost_Response::CopyFrom(const RunPost_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.wazuh.api.engine.tester.RunPost_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunPost_Response::IsInitialized() const {
  return true;
}

void RunPost_Response::InternalSwap(RunPost_Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunPost_Response, _impl_.status_)
      + sizeof(RunPost_Response::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(RunPost_Response, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunPost_Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tester_2eproto_getter, &descriptor_table_tester_2eproto_once,
      file_level_metadata_tester_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tester
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::SessionPost*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::SessionPost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::SessionPost >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::Session*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::Session >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::Session >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::Result_AssetTrace*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::Result_AssetTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::Result_AssetTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::Result*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::Result >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::Result >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::SessionPost_Request*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::SessionPost_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::SessionPost_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::SessionDelete_Request*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::SessionDelete_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::SessionDelete_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::SessionGet_Request*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::SessionGet_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::SessionGet_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::SessionGet_Response*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::SessionGet_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::SessionGet_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::SessionReload_Request*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::SessionReload_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::SessionReload_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::TableGet_Request*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::TableGet_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::TableGet_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::TableGet_Response*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::TableGet_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::TableGet_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::RunPost_Request*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::RunPost_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::RunPost_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::com::wazuh::api::engine::tester::RunPost_Response*
Arena::CreateMaybeMessage< ::com::wazuh::api::engine::tester::RunPost_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::wazuh::api::engine::tester::RunPost_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
