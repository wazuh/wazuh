// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvdb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvdb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvdb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvdb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvdb_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvdb_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace kvdb {
class Entry;
struct EntryDefaultTypeInternal;
extern EntryDefaultTypeInternal _Entry_default_instance_;
class dbDelete_Request;
struct dbDelete_RequestDefaultTypeInternal;
extern dbDelete_RequestDefaultTypeInternal _dbDelete_Request_default_instance_;
class dbGet_Request;
struct dbGet_RequestDefaultTypeInternal;
extern dbGet_RequestDefaultTypeInternal _dbGet_Request_default_instance_;
class dbGet_Response;
struct dbGet_ResponseDefaultTypeInternal;
extern dbGet_ResponseDefaultTypeInternal _dbGet_Response_default_instance_;
class dbPut_Request;
struct dbPut_RequestDefaultTypeInternal;
extern dbPut_RequestDefaultTypeInternal _dbPut_Request_default_instance_;
class dbSearch_Request;
struct dbSearch_RequestDefaultTypeInternal;
extern dbSearch_RequestDefaultTypeInternal _dbSearch_Request_default_instance_;
class dbSearch_Response;
struct dbSearch_ResponseDefaultTypeInternal;
extern dbSearch_ResponseDefaultTypeInternal _dbSearch_Response_default_instance_;
class managerDelete_Request;
struct managerDelete_RequestDefaultTypeInternal;
extern managerDelete_RequestDefaultTypeInternal _managerDelete_Request_default_instance_;
class managerDump_Request;
struct managerDump_RequestDefaultTypeInternal;
extern managerDump_RequestDefaultTypeInternal _managerDump_Request_default_instance_;
class managerDump_Response;
struct managerDump_ResponseDefaultTypeInternal;
extern managerDump_ResponseDefaultTypeInternal _managerDump_Response_default_instance_;
class managerGet_Request;
struct managerGet_RequestDefaultTypeInternal;
extern managerGet_RequestDefaultTypeInternal _managerGet_Request_default_instance_;
class managerGet_Response;
struct managerGet_ResponseDefaultTypeInternal;
extern managerGet_ResponseDefaultTypeInternal _managerGet_Response_default_instance_;
class managerPost_Request;
struct managerPost_RequestDefaultTypeInternal;
extern managerPost_RequestDefaultTypeInternal _managerPost_Request_default_instance_;
}  // namespace kvdb
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::kvdb::Entry* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::Entry>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::dbDelete_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::dbDelete_Request>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::dbGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::dbGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::dbGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::dbGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::dbPut_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::dbPut_Request>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::dbSearch_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::dbSearch_Request>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::dbSearch_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::dbSearch_Response>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::managerDelete_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::managerDelete_Request>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::managerDump_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::managerDump_Request>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::managerDump_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::managerDump_Response>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::managerGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::managerGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::managerGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::managerGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::kvdb::managerPost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::kvdb::managerPost_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace kvdb {

// ===================================================================

class Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.Entry) */ {
 public:
  inline Entry() : Entry(nullptr) {}
  ~Entry() override;
  explicit PROTOBUF_CONSTEXPR Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Entry(const Entry& from);
  Entry(Entry&& from) noexcept
    : Entry() {
    *this = ::std::move(from);
  }

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Entry& operator=(Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Entry* internal_default_instance() {
    return reinterpret_cast<const Entry*>(
               &_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Entry& a, Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Entry& from) {
    Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.Entry";
  }
  protected:
  explicit Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional .google.protobuf.Value value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_value();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::Value* value);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.Entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::Value* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class dbGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.dbGet_Request) */ {
 public:
  inline dbGet_Request() : dbGet_Request(nullptr) {}
  ~dbGet_Request() override;
  explicit PROTOBUF_CONSTEXPR dbGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dbGet_Request(const dbGet_Request& from);
  dbGet_Request(dbGet_Request&& from) noexcept
    : dbGet_Request() {
    *this = ::std::move(from);
  }

  inline dbGet_Request& operator=(const dbGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbGet_Request& operator=(dbGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dbGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const dbGet_Request* internal_default_instance() {
    return reinterpret_cast<const dbGet_Request*>(
               &_dbGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(dbGet_Request& a, dbGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(dbGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dbGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dbGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dbGet_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dbGet_Request& from) {
    dbGet_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbGet_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.dbGet_Request";
  }
  protected:
  explicit dbGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.dbGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class dbGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.dbGet_Response) */ {
 public:
  inline dbGet_Response() : dbGet_Response(nullptr) {}
  ~dbGet_Response() override;
  explicit PROTOBUF_CONSTEXPR dbGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dbGet_Response(const dbGet_Response& from);
  dbGet_Response(dbGet_Response&& from) noexcept
    : dbGet_Response() {
    *this = ::std::move(from);
  }

  inline dbGet_Response& operator=(const dbGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbGet_Response& operator=(dbGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dbGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const dbGet_Response* internal_default_instance() {
    return reinterpret_cast<const dbGet_Response*>(
               &_dbGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(dbGet_Response& a, dbGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(dbGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dbGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dbGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dbGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dbGet_Response& from) {
    dbGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.dbGet_Response";
  }
  protected:
  explicit dbGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kValueFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .google.protobuf.Value value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::PROTOBUF_NAMESPACE_ID::Value& value() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Value* release_value();
  ::PROTOBUF_NAMESPACE_ID::Value* mutable_value();
  void set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Value& _internal_value() const;
  ::PROTOBUF_NAMESPACE_ID::Value* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::PROTOBUF_NAMESPACE_ID::Value* value);
  ::PROTOBUF_NAMESPACE_ID::Value* unsafe_arena_release_value();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.dbGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::PROTOBUF_NAMESPACE_ID::Value* value_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class dbSearch_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.dbSearch_Request) */ {
 public:
  inline dbSearch_Request() : dbSearch_Request(nullptr) {}
  ~dbSearch_Request() override;
  explicit PROTOBUF_CONSTEXPR dbSearch_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dbSearch_Request(const dbSearch_Request& from);
  dbSearch_Request(dbSearch_Request&& from) noexcept
    : dbSearch_Request() {
    *this = ::std::move(from);
  }

  inline dbSearch_Request& operator=(const dbSearch_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbSearch_Request& operator=(dbSearch_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dbSearch_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const dbSearch_Request* internal_default_instance() {
    return reinterpret_cast<const dbSearch_Request*>(
               &_dbSearch_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(dbSearch_Request& a, dbSearch_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(dbSearch_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbSearch_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dbSearch_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dbSearch_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dbSearch_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dbSearch_Request& from) {
    dbSearch_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbSearch_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.dbSearch_Request";
  }
  protected:
  explicit dbSearch_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPrefixFieldNumber = 2,
    kPageFieldNumber = 3,
    kRecordsFieldNumber = 4,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string prefix = 2;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prefix();
  PROTOBUF_NODISCARD std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  // optional uint32 page = 3;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // optional uint32 records = 4;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  uint32_t records() const;
  void set_records(uint32_t value);
  private:
  uint32_t _internal_records() const;
  void _internal_set_records(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.dbSearch_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
    uint32_t page_;
    uint32_t records_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class dbSearch_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.dbSearch_Response) */ {
 public:
  inline dbSearch_Response() : dbSearch_Response(nullptr) {}
  ~dbSearch_Response() override;
  explicit PROTOBUF_CONSTEXPR dbSearch_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dbSearch_Response(const dbSearch_Response& from);
  dbSearch_Response(dbSearch_Response&& from) noexcept
    : dbSearch_Response() {
    *this = ::std::move(from);
  }

  inline dbSearch_Response& operator=(const dbSearch_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbSearch_Response& operator=(dbSearch_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dbSearch_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const dbSearch_Response* internal_default_instance() {
    return reinterpret_cast<const dbSearch_Response*>(
               &_dbSearch_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(dbSearch_Response& a, dbSearch_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(dbSearch_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbSearch_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dbSearch_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dbSearch_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dbSearch_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dbSearch_Response& from) {
    dbSearch_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbSearch_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.dbSearch_Response";
  }
  protected:
  explicit dbSearch_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .com.wazuh.api.engine.kvdb.Entry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::com::wazuh::api::engine::kvdb::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >*
      mutable_entries();
  private:
  const ::com::wazuh::api::engine::kvdb::Entry& _internal_entries(int index) const;
  ::com::wazuh::api::engine::kvdb::Entry* _internal_add_entries();
  public:
  const ::com::wazuh::api::engine::kvdb::Entry& entries(int index) const;
  ::com::wazuh::api::engine::kvdb::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >&
      entries() const;

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.dbSearch_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class dbDelete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.dbDelete_Request) */ {
 public:
  inline dbDelete_Request() : dbDelete_Request(nullptr) {}
  ~dbDelete_Request() override;
  explicit PROTOBUF_CONSTEXPR dbDelete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dbDelete_Request(const dbDelete_Request& from);
  dbDelete_Request(dbDelete_Request&& from) noexcept
    : dbDelete_Request() {
    *this = ::std::move(from);
  }

  inline dbDelete_Request& operator=(const dbDelete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbDelete_Request& operator=(dbDelete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dbDelete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const dbDelete_Request* internal_default_instance() {
    return reinterpret_cast<const dbDelete_Request*>(
               &_dbDelete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(dbDelete_Request& a, dbDelete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(dbDelete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbDelete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dbDelete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dbDelete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dbDelete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dbDelete_Request& from) {
    dbDelete_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbDelete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.dbDelete_Request";
  }
  protected:
  explicit dbDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kKeyFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.dbDelete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class dbPut_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.dbPut_Request) */ {
 public:
  inline dbPut_Request() : dbPut_Request(nullptr) {}
  ~dbPut_Request() override;
  explicit PROTOBUF_CONSTEXPR dbPut_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  dbPut_Request(const dbPut_Request& from);
  dbPut_Request(dbPut_Request&& from) noexcept
    : dbPut_Request() {
    *this = ::std::move(from);
  }

  inline dbPut_Request& operator=(const dbPut_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline dbPut_Request& operator=(dbPut_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const dbPut_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const dbPut_Request* internal_default_instance() {
    return reinterpret_cast<const dbPut_Request*>(
               &_dbPut_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(dbPut_Request& a, dbPut_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(dbPut_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(dbPut_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  dbPut_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<dbPut_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const dbPut_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const dbPut_Request& from) {
    dbPut_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(dbPut_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.dbPut_Request";
  }
  protected:
  explicit dbPut_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEntryFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .com.wazuh.api.engine.kvdb.Entry entry = 2;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::com::wazuh::api::engine::kvdb::Entry& entry() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::kvdb::Entry* release_entry();
  ::com::wazuh::api::engine::kvdb::Entry* mutable_entry();
  void set_allocated_entry(::com::wazuh::api::engine::kvdb::Entry* entry);
  private:
  const ::com::wazuh::api::engine::kvdb::Entry& _internal_entry() const;
  ::com::wazuh::api::engine::kvdb::Entry* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::com::wazuh::api::engine::kvdb::Entry* entry);
  ::com::wazuh::api::engine::kvdb::Entry* unsafe_arena_release_entry();

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.dbPut_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::com::wazuh::api::engine::kvdb::Entry* entry_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class managerGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.managerGet_Request) */ {
 public:
  inline managerGet_Request() : managerGet_Request(nullptr) {}
  ~managerGet_Request() override;
  explicit PROTOBUF_CONSTEXPR managerGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  managerGet_Request(const managerGet_Request& from);
  managerGet_Request(managerGet_Request&& from) noexcept
    : managerGet_Request() {
    *this = ::std::move(from);
  }

  inline managerGet_Request& operator=(const managerGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline managerGet_Request& operator=(managerGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const managerGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const managerGet_Request* internal_default_instance() {
    return reinterpret_cast<const managerGet_Request*>(
               &_managerGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(managerGet_Request& a, managerGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(managerGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(managerGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  managerGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<managerGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const managerGet_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const managerGet_Request& from) {
    managerGet_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(managerGet_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.managerGet_Request";
  }
  protected:
  explicit managerGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterByNameFieldNumber = 16,
    kMustBeLoadedFieldNumber = 1,
  };
  // optional string filter_by_name = 16;
  bool has_filter_by_name() const;
  private:
  bool _internal_has_filter_by_name() const;
  public:
  void clear_filter_by_name();
  const std::string& filter_by_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter_by_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter_by_name();
  PROTOBUF_NODISCARD std::string* release_filter_by_name();
  void set_allocated_filter_by_name(std::string* filter_by_name);
  private:
  const std::string& _internal_filter_by_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter_by_name(const std::string& value);
  std::string* _internal_mutable_filter_by_name();
  public:

  // bool must_be_loaded = 1;
  void clear_must_be_loaded();
  bool must_be_loaded() const;
  void set_must_be_loaded(bool value);
  private:
  bool _internal_must_be_loaded() const;
  void _internal_set_must_be_loaded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.managerGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_by_name_;
    bool must_be_loaded_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class managerGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.managerGet_Response) */ {
 public:
  inline managerGet_Response() : managerGet_Response(nullptr) {}
  ~managerGet_Response() override;
  explicit PROTOBUF_CONSTEXPR managerGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  managerGet_Response(const managerGet_Response& from);
  managerGet_Response(managerGet_Response&& from) noexcept
    : managerGet_Response() {
    *this = ::std::move(from);
  }

  inline managerGet_Response& operator=(const managerGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline managerGet_Response& operator=(managerGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const managerGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const managerGet_Response* internal_default_instance() {
    return reinterpret_cast<const managerGet_Response*>(
               &_managerGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(managerGet_Response& a, managerGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(managerGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(managerGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  managerGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<managerGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const managerGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const managerGet_Response& from) {
    managerGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(managerGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.managerGet_Response";
  }
  protected:
  explicit managerGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbsFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated string dbs = 3;
  int dbs_size() const;
  private:
  int _internal_dbs_size() const;
  public:
  void clear_dbs();
  const std::string& dbs(int index) const;
  std::string* mutable_dbs(int index);
  void set_dbs(int index, const std::string& value);
  void set_dbs(int index, std::string&& value);
  void set_dbs(int index, const char* value);
  void set_dbs(int index, const char* value, size_t size);
  std::string* add_dbs();
  void add_dbs(const std::string& value);
  void add_dbs(std::string&& value);
  void add_dbs(const char* value);
  void add_dbs(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dbs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dbs();
  private:
  const std::string& _internal_dbs(int index) const;
  std::string* _internal_add_dbs();
  public:

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.managerGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dbs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class managerPost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.managerPost_Request) */ {
 public:
  inline managerPost_Request() : managerPost_Request(nullptr) {}
  ~managerPost_Request() override;
  explicit PROTOBUF_CONSTEXPR managerPost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  managerPost_Request(const managerPost_Request& from);
  managerPost_Request(managerPost_Request&& from) noexcept
    : managerPost_Request() {
    *this = ::std::move(from);
  }

  inline managerPost_Request& operator=(const managerPost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline managerPost_Request& operator=(managerPost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const managerPost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const managerPost_Request* internal_default_instance() {
    return reinterpret_cast<const managerPost_Request*>(
               &_managerPost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(managerPost_Request& a, managerPost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(managerPost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(managerPost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  managerPost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<managerPost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const managerPost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const managerPost_Request& from) {
    managerPost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(managerPost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.managerPost_Request";
  }
  protected:
  explicit managerPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string path = 2;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.managerPost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class managerDelete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.managerDelete_Request) */ {
 public:
  inline managerDelete_Request() : managerDelete_Request(nullptr) {}
  ~managerDelete_Request() override;
  explicit PROTOBUF_CONSTEXPR managerDelete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  managerDelete_Request(const managerDelete_Request& from);
  managerDelete_Request(managerDelete_Request&& from) noexcept
    : managerDelete_Request() {
    *this = ::std::move(from);
  }

  inline managerDelete_Request& operator=(const managerDelete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline managerDelete_Request& operator=(managerDelete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const managerDelete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const managerDelete_Request* internal_default_instance() {
    return reinterpret_cast<const managerDelete_Request*>(
               &_managerDelete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(managerDelete_Request& a, managerDelete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(managerDelete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(managerDelete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  managerDelete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<managerDelete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const managerDelete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const managerDelete_Request& from) {
    managerDelete_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(managerDelete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.managerDelete_Request";
  }
  protected:
  explicit managerDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.managerDelete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class managerDump_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.managerDump_Request) */ {
 public:
  inline managerDump_Request() : managerDump_Request(nullptr) {}
  ~managerDump_Request() override;
  explicit PROTOBUF_CONSTEXPR managerDump_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  managerDump_Request(const managerDump_Request& from);
  managerDump_Request(managerDump_Request&& from) noexcept
    : managerDump_Request() {
    *this = ::std::move(from);
  }

  inline managerDump_Request& operator=(const managerDump_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline managerDump_Request& operator=(managerDump_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const managerDump_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const managerDump_Request* internal_default_instance() {
    return reinterpret_cast<const managerDump_Request*>(
               &_managerDump_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(managerDump_Request& a, managerDump_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(managerDump_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(managerDump_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  managerDump_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<managerDump_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const managerDump_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const managerDump_Request& from) {
    managerDump_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(managerDump_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.managerDump_Request";
  }
  protected:
  explicit managerDump_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPageFieldNumber = 2,
    kRecordsFieldNumber = 3,
  };
  // optional string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional uint32 page = 2;
  bool has_page() const;
  private:
  bool _internal_has_page() const;
  public:
  void clear_page();
  uint32_t page() const;
  void set_page(uint32_t value);
  private:
  uint32_t _internal_page() const;
  void _internal_set_page(uint32_t value);
  public:

  // optional uint32 records = 3;
  bool has_records() const;
  private:
  bool _internal_has_records() const;
  public:
  void clear_records();
  uint32_t records() const;
  void set_records(uint32_t value);
  private:
  uint32_t _internal_records() const;
  void _internal_set_records(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.managerDump_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    uint32_t page_;
    uint32_t records_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// -------------------------------------------------------------------

class managerDump_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.kvdb.managerDump_Response) */ {
 public:
  inline managerDump_Response() : managerDump_Response(nullptr) {}
  ~managerDump_Response() override;
  explicit PROTOBUF_CONSTEXPR managerDump_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  managerDump_Response(const managerDump_Response& from);
  managerDump_Response(managerDump_Response&& from) noexcept
    : managerDump_Response() {
    *this = ::std::move(from);
  }

  inline managerDump_Response& operator=(const managerDump_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline managerDump_Response& operator=(managerDump_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const managerDump_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const managerDump_Response* internal_default_instance() {
    return reinterpret_cast<const managerDump_Response*>(
               &_managerDump_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(managerDump_Response& a, managerDump_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(managerDump_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(managerDump_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  managerDump_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<managerDump_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const managerDump_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const managerDump_Response& from) {
    managerDump_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(managerDump_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.kvdb.managerDump_Response";
  }
  protected:
  explicit managerDump_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .com.wazuh.api.engine.kvdb.Entry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::com::wazuh::api::engine::kvdb::Entry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >*
      mutable_entries();
  private:
  const ::com::wazuh::api::engine::kvdb::Entry& _internal_entries(int index) const;
  ::com::wazuh::api::engine::kvdb::Entry* _internal_add_entries();
  public:
  const ::com::wazuh::api::engine::kvdb::Entry& entries(int index) const;
  ::com::wazuh::api::engine::kvdb::Entry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >&
      entries() const;

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.kvdb.managerDump_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kvdb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Entry

// optional string key = 1;
inline bool Entry::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Entry::has_key() const {
  return _internal_has_key();
}
inline void Entry::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.Entry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Entry::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.Entry.key)
}
inline std::string* Entry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.Entry.key)
  return _s;
}
inline const std::string& Entry::_internal_key() const {
  return _impl_.key_.Get();
}
inline void Entry::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* Entry::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* Entry::release_key() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.Entry.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Entry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.Entry.key)
}

// optional .google.protobuf.Value value = 2;
inline bool Entry::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool Entry::has_value() const {
  return _internal_has_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Entry::_internal_value() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& Entry::value() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.Entry.value)
  return _internal_value();
}
inline void Entry::unsafe_arena_set_allocated_value(
    ::PROTOBUF_NAMESPACE_ID::Value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.kvdb.Entry.value)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Entry::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Entry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.Entry.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Entry::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* Entry::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.Entry.value)
  return _msg;
}
inline void Entry::set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.Entry.value)
}

// -------------------------------------------------------------------

// dbGet_Request

// optional string name = 1;
inline bool dbGet_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbGet_Request::has_name() const {
  return _internal_has_name();
}
inline void dbGet_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbGet_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbGet_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbGet_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbGet_Request.name)
}
inline std::string* dbGet_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbGet_Request.name)
  return _s;
}
inline const std::string& dbGet_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void dbGet_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* dbGet_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* dbGet_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbGet_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbGet_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbGet_Request.name)
}

// optional string key = 2;
inline bool dbGet_Request::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool dbGet_Request::has_key() const {
  return _internal_has_key();
}
inline void dbGet_Request::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& dbGet_Request::key() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbGet_Request.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbGet_Request::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbGet_Request.key)
}
inline std::string* dbGet_Request::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbGet_Request.key)
  return _s;
}
inline const std::string& dbGet_Request::_internal_key() const {
  return _impl_.key_.Get();
}
inline void dbGet_Request::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* dbGet_Request::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* dbGet_Request::release_key() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbGet_Request.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbGet_Request::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbGet_Request.key)
}

// -------------------------------------------------------------------

// dbGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void dbGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus dbGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus dbGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbGet_Response.status)
  return _internal_status();
}
inline void dbGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void dbGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbGet_Response.status)
}

// optional string error = 2;
inline bool dbGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbGet_Response::has_error() const {
  return _internal_has_error();
}
inline void dbGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbGet_Response.error)
}
inline std::string* dbGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbGet_Response.error)
  return _s;
}
inline const std::string& dbGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void dbGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* dbGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* dbGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbGet_Response.error)
}

// optional .google.protobuf.Value value = 3;
inline bool dbGet_Response::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool dbGet_Response::has_value() const {
  return _internal_has_value();
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& dbGet_Response::_internal_value() const {
  const ::PROTOBUF_NAMESPACE_ID::Value* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Value&>(
      ::PROTOBUF_NAMESPACE_ID::_Value_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Value& dbGet_Response::value() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbGet_Response.value)
  return _internal_value();
}
inline void dbGet_Response::unsafe_arena_set_allocated_value(
    ::PROTOBUF_NAMESPACE_ID::Value* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.kvdb.dbGet_Response.value)
}
inline ::PROTOBUF_NAMESPACE_ID::Value* dbGet_Response::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* dbGet_Response::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbGet_Response.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Value* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* dbGet_Response::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Value>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::PROTOBUF_NAMESPACE_ID::Value* dbGet_Response::mutable_value() {
  ::PROTOBUF_NAMESPACE_ID::Value* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbGet_Response.value)
  return _msg;
}
inline void dbGet_Response::set_allocated_value(::PROTOBUF_NAMESPACE_ID::Value* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbGet_Response.value)
}

// -------------------------------------------------------------------

// dbSearch_Request

// optional string name = 1;
inline bool dbSearch_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbSearch_Request::has_name() const {
  return _internal_has_name();
}
inline void dbSearch_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbSearch_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbSearch_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbSearch_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbSearch_Request.name)
}
inline std::string* dbSearch_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbSearch_Request.name)
  return _s;
}
inline const std::string& dbSearch_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void dbSearch_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* dbSearch_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* dbSearch_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbSearch_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbSearch_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbSearch_Request.name)
}

// optional string prefix = 2;
inline bool dbSearch_Request::_internal_has_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool dbSearch_Request::has_prefix() const {
  return _internal_has_prefix();
}
inline void dbSearch_Request::clear_prefix() {
  _impl_.prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& dbSearch_Request::prefix() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbSearch_Request.prefix)
  return _internal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbSearch_Request::set_prefix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbSearch_Request.prefix)
}
inline std::string* dbSearch_Request::mutable_prefix() {
  std::string* _s = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbSearch_Request.prefix)
  return _s;
}
inline const std::string& dbSearch_Request::_internal_prefix() const {
  return _impl_.prefix_.Get();
}
inline void dbSearch_Request::_internal_set_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* dbSearch_Request::_internal_mutable_prefix() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* dbSearch_Request::release_prefix() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbSearch_Request.prefix)
  if (!_internal_has_prefix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_.IsDefault()) {
    _impl_.prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbSearch_Request::set_allocated_prefix(std::string* prefix) {
  if (prefix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prefix_.SetAllocated(prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prefix_.IsDefault()) {
    _impl_.prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbSearch_Request.prefix)
}

// optional uint32 page = 3;
inline bool dbSearch_Request::_internal_has_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool dbSearch_Request::has_page() const {
  return _internal_has_page();
}
inline void dbSearch_Request::clear_page() {
  _impl_.page_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t dbSearch_Request::_internal_page() const {
  return _impl_.page_;
}
inline uint32_t dbSearch_Request::page() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbSearch_Request.page)
  return _internal_page();
}
inline void dbSearch_Request::_internal_set_page(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.page_ = value;
}
inline void dbSearch_Request::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbSearch_Request.page)
}

// optional uint32 records = 4;
inline bool dbSearch_Request::_internal_has_records() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool dbSearch_Request::has_records() const {
  return _internal_has_records();
}
inline void dbSearch_Request::clear_records() {
  _impl_.records_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t dbSearch_Request::_internal_records() const {
  return _impl_.records_;
}
inline uint32_t dbSearch_Request::records() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbSearch_Request.records)
  return _internal_records();
}
inline void dbSearch_Request::_internal_set_records(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.records_ = value;
}
inline void dbSearch_Request::set_records(uint32_t value) {
  _internal_set_records(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbSearch_Request.records)
}

// -------------------------------------------------------------------

// dbSearch_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void dbSearch_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus dbSearch_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus dbSearch_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbSearch_Response.status)
  return _internal_status();
}
inline void dbSearch_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void dbSearch_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbSearch_Response.status)
}

// optional string error = 2;
inline bool dbSearch_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbSearch_Response::has_error() const {
  return _internal_has_error();
}
inline void dbSearch_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbSearch_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbSearch_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbSearch_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbSearch_Response.error)
}
inline std::string* dbSearch_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbSearch_Response.error)
  return _s;
}
inline const std::string& dbSearch_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void dbSearch_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* dbSearch_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* dbSearch_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbSearch_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbSearch_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbSearch_Response.error)
}

// repeated .com.wazuh.api.engine.kvdb.Entry entries = 3;
inline int dbSearch_Response::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int dbSearch_Response::entries_size() const {
  return _internal_entries_size();
}
inline void dbSearch_Response::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::com::wazuh::api::engine::kvdb::Entry* dbSearch_Response::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbSearch_Response.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >*
dbSearch_Response::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.kvdb.dbSearch_Response.entries)
  return &_impl_.entries_;
}
inline const ::com::wazuh::api::engine::kvdb::Entry& dbSearch_Response::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::com::wazuh::api::engine::kvdb::Entry& dbSearch_Response::entries(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbSearch_Response.entries)
  return _internal_entries(index);
}
inline ::com::wazuh::api::engine::kvdb::Entry* dbSearch_Response::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::com::wazuh::api::engine::kvdb::Entry* dbSearch_Response::add_entries() {
  ::com::wazuh::api::engine::kvdb::Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.kvdb.dbSearch_Response.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >&
dbSearch_Response::entries() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.kvdb.dbSearch_Response.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// dbDelete_Request

// optional string name = 1;
inline bool dbDelete_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbDelete_Request::has_name() const {
  return _internal_has_name();
}
inline void dbDelete_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbDelete_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbDelete_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbDelete_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbDelete_Request.name)
}
inline std::string* dbDelete_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbDelete_Request.name)
  return _s;
}
inline const std::string& dbDelete_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void dbDelete_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* dbDelete_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* dbDelete_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbDelete_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbDelete_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbDelete_Request.name)
}

// optional string key = 2;
inline bool dbDelete_Request::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool dbDelete_Request::has_key() const {
  return _internal_has_key();
}
inline void dbDelete_Request::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& dbDelete_Request::key() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbDelete_Request.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbDelete_Request::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbDelete_Request.key)
}
inline std::string* dbDelete_Request::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbDelete_Request.key)
  return _s;
}
inline const std::string& dbDelete_Request::_internal_key() const {
  return _impl_.key_.Get();
}
inline void dbDelete_Request::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* dbDelete_Request::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* dbDelete_Request::release_key() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbDelete_Request.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbDelete_Request::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbDelete_Request.key)
}

// -------------------------------------------------------------------

// dbPut_Request

// optional string name = 1;
inline bool dbPut_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool dbPut_Request::has_name() const {
  return _internal_has_name();
}
inline void dbPut_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& dbPut_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbPut_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void dbPut_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.dbPut_Request.name)
}
inline std::string* dbPut_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbPut_Request.name)
  return _s;
}
inline const std::string& dbPut_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void dbPut_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* dbPut_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* dbPut_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbPut_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void dbPut_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbPut_Request.name)
}

// optional .com.wazuh.api.engine.kvdb.Entry entry = 2;
inline bool dbPut_Request::_internal_has_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.entry_ != nullptr);
  return value;
}
inline bool dbPut_Request::has_entry() const {
  return _internal_has_entry();
}
inline void dbPut_Request::clear_entry() {
  if (_impl_.entry_ != nullptr) _impl_.entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::kvdb::Entry& dbPut_Request::_internal_entry() const {
  const ::com::wazuh::api::engine::kvdb::Entry* p = _impl_.entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::kvdb::Entry&>(
      ::com::wazuh::api::engine::kvdb::_Entry_default_instance_);
}
inline const ::com::wazuh::api::engine::kvdb::Entry& dbPut_Request::entry() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.dbPut_Request.entry)
  return _internal_entry();
}
inline void dbPut_Request::unsafe_arena_set_allocated_entry(
    ::com::wazuh::api::engine::kvdb::Entry* entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entry_);
  }
  _impl_.entry_ = entry;
  if (entry) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.kvdb.dbPut_Request.entry)
}
inline ::com::wazuh::api::engine::kvdb::Entry* dbPut_Request::release_entry() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::kvdb::Entry* temp = _impl_.entry_;
  _impl_.entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::kvdb::Entry* dbPut_Request::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.dbPut_Request.entry)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::kvdb::Entry* temp = _impl_.entry_;
  _impl_.entry_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::kvdb::Entry* dbPut_Request::_internal_mutable_entry() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::kvdb::Entry>(GetArenaForAllocation());
    _impl_.entry_ = p;
  }
  return _impl_.entry_;
}
inline ::com::wazuh::api::engine::kvdb::Entry* dbPut_Request::mutable_entry() {
  ::com::wazuh::api::engine::kvdb::Entry* _msg = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.dbPut_Request.entry)
  return _msg;
}
inline void dbPut_Request::set_allocated_entry(::com::wazuh::api::engine::kvdb::Entry* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.dbPut_Request.entry)
}

// -------------------------------------------------------------------

// managerGet_Request

// bool must_be_loaded = 1;
inline void managerGet_Request::clear_must_be_loaded() {
  _impl_.must_be_loaded_ = false;
}
inline bool managerGet_Request::_internal_must_be_loaded() const {
  return _impl_.must_be_loaded_;
}
inline bool managerGet_Request::must_be_loaded() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerGet_Request.must_be_loaded)
  return _internal_must_be_loaded();
}
inline void managerGet_Request::_internal_set_must_be_loaded(bool value) {
  
  _impl_.must_be_loaded_ = value;
}
inline void managerGet_Request::set_must_be_loaded(bool value) {
  _internal_set_must_be_loaded(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerGet_Request.must_be_loaded)
}

// optional string filter_by_name = 16;
inline bool managerGet_Request::_internal_has_filter_by_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool managerGet_Request::has_filter_by_name() const {
  return _internal_has_filter_by_name();
}
inline void managerGet_Request::clear_filter_by_name() {
  _impl_.filter_by_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& managerGet_Request::filter_by_name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerGet_Request.filter_by_name)
  return _internal_filter_by_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void managerGet_Request::set_filter_by_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.filter_by_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerGet_Request.filter_by_name)
}
inline std::string* managerGet_Request::mutable_filter_by_name() {
  std::string* _s = _internal_mutable_filter_by_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerGet_Request.filter_by_name)
  return _s;
}
inline const std::string& managerGet_Request::_internal_filter_by_name() const {
  return _impl_.filter_by_name_.Get();
}
inline void managerGet_Request::_internal_set_filter_by_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.filter_by_name_.Set(value, GetArenaForAllocation());
}
inline std::string* managerGet_Request::_internal_mutable_filter_by_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.filter_by_name_.Mutable(GetArenaForAllocation());
}
inline std::string* managerGet_Request::release_filter_by_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.managerGet_Request.filter_by_name)
  if (!_internal_has_filter_by_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.filter_by_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_by_name_.IsDefault()) {
    _impl_.filter_by_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void managerGet_Request::set_allocated_filter_by_name(std::string* filter_by_name) {
  if (filter_by_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.filter_by_name_.SetAllocated(filter_by_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_by_name_.IsDefault()) {
    _impl_.filter_by_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.managerGet_Request.filter_by_name)
}

// -------------------------------------------------------------------

// managerGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void managerGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus managerGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus managerGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerGet_Response.status)
  return _internal_status();
}
inline void managerGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void managerGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerGet_Response.status)
}

// optional string error = 2;
inline bool managerGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool managerGet_Response::has_error() const {
  return _internal_has_error();
}
inline void managerGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& managerGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void managerGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerGet_Response.error)
}
inline std::string* managerGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerGet_Response.error)
  return _s;
}
inline const std::string& managerGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void managerGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* managerGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* managerGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.managerGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void managerGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.managerGet_Response.error)
}

// repeated string dbs = 3;
inline int managerGet_Response::_internal_dbs_size() const {
  return _impl_.dbs_.size();
}
inline int managerGet_Response::dbs_size() const {
  return _internal_dbs_size();
}
inline void managerGet_Response::clear_dbs() {
  _impl_.dbs_.Clear();
}
inline std::string* managerGet_Response::add_dbs() {
  std::string* _s = _internal_add_dbs();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
  return _s;
}
inline const std::string& managerGet_Response::_internal_dbs(int index) const {
  return _impl_.dbs_.Get(index);
}
inline const std::string& managerGet_Response::dbs(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
  return _internal_dbs(index);
}
inline std::string* managerGet_Response::mutable_dbs(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
  return _impl_.dbs_.Mutable(index);
}
inline void managerGet_Response::set_dbs(int index, const std::string& value) {
  _impl_.dbs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline void managerGet_Response::set_dbs(int index, std::string&& value) {
  _impl_.dbs_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline void managerGet_Response::set_dbs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dbs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline void managerGet_Response::set_dbs(int index, const char* value, size_t size) {
  _impl_.dbs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline std::string* managerGet_Response::_internal_add_dbs() {
  return _impl_.dbs_.Add();
}
inline void managerGet_Response::add_dbs(const std::string& value) {
  _impl_.dbs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline void managerGet_Response::add_dbs(std::string&& value) {
  _impl_.dbs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline void managerGet_Response::add_dbs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.dbs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline void managerGet_Response::add_dbs(const char* value, size_t size) {
  _impl_.dbs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
managerGet_Response::dbs() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
  return _impl_.dbs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
managerGet_Response::mutable_dbs() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.kvdb.managerGet_Response.dbs)
  return &_impl_.dbs_;
}

// -------------------------------------------------------------------

// managerPost_Request

// optional string name = 1;
inline bool managerPost_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool managerPost_Request::has_name() const {
  return _internal_has_name();
}
inline void managerPost_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& managerPost_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerPost_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void managerPost_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerPost_Request.name)
}
inline std::string* managerPost_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerPost_Request.name)
  return _s;
}
inline const std::string& managerPost_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void managerPost_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* managerPost_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* managerPost_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.managerPost_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void managerPost_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.managerPost_Request.name)
}

// optional string path = 2;
inline bool managerPost_Request::_internal_has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool managerPost_Request::has_path() const {
  return _internal_has_path();
}
inline void managerPost_Request::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& managerPost_Request::path() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerPost_Request.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void managerPost_Request::set_path(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerPost_Request.path)
}
inline std::string* managerPost_Request::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerPost_Request.path)
  return _s;
}
inline const std::string& managerPost_Request::_internal_path() const {
  return _impl_.path_.Get();
}
inline void managerPost_Request::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* managerPost_Request::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* managerPost_Request::release_path() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.managerPost_Request.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void managerPost_Request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.managerPost_Request.path)
}

// -------------------------------------------------------------------

// managerDelete_Request

// optional string name = 1;
inline bool managerDelete_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool managerDelete_Request::has_name() const {
  return _internal_has_name();
}
inline void managerDelete_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& managerDelete_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerDelete_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void managerDelete_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerDelete_Request.name)
}
inline std::string* managerDelete_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerDelete_Request.name)
  return _s;
}
inline const std::string& managerDelete_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void managerDelete_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* managerDelete_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* managerDelete_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.managerDelete_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void managerDelete_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.managerDelete_Request.name)
}

// -------------------------------------------------------------------

// managerDump_Request

// optional string name = 1;
inline bool managerDump_Request::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool managerDump_Request::has_name() const {
  return _internal_has_name();
}
inline void managerDump_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& managerDump_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerDump_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void managerDump_Request::set_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerDump_Request.name)
}
inline std::string* managerDump_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerDump_Request.name)
  return _s;
}
inline const std::string& managerDump_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void managerDump_Request::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* managerDump_Request::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* managerDump_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.managerDump_Request.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void managerDump_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.managerDump_Request.name)
}

// optional uint32 page = 2;
inline bool managerDump_Request::_internal_has_page() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool managerDump_Request::has_page() const {
  return _internal_has_page();
}
inline void managerDump_Request::clear_page() {
  _impl_.page_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t managerDump_Request::_internal_page() const {
  return _impl_.page_;
}
inline uint32_t managerDump_Request::page() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerDump_Request.page)
  return _internal_page();
}
inline void managerDump_Request::_internal_set_page(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.page_ = value;
}
inline void managerDump_Request::set_page(uint32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerDump_Request.page)
}

// optional uint32 records = 3;
inline bool managerDump_Request::_internal_has_records() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool managerDump_Request::has_records() const {
  return _internal_has_records();
}
inline void managerDump_Request::clear_records() {
  _impl_.records_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t managerDump_Request::_internal_records() const {
  return _impl_.records_;
}
inline uint32_t managerDump_Request::records() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerDump_Request.records)
  return _internal_records();
}
inline void managerDump_Request::_internal_set_records(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.records_ = value;
}
inline void managerDump_Request::set_records(uint32_t value) {
  _internal_set_records(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerDump_Request.records)
}

// -------------------------------------------------------------------

// managerDump_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void managerDump_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus managerDump_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus managerDump_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerDump_Response.status)
  return _internal_status();
}
inline void managerDump_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void managerDump_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerDump_Response.status)
}

// optional string error = 2;
inline bool managerDump_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool managerDump_Response::has_error() const {
  return _internal_has_error();
}
inline void managerDump_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& managerDump_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerDump_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void managerDump_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.kvdb.managerDump_Response.error)
}
inline std::string* managerDump_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerDump_Response.error)
  return _s;
}
inline const std::string& managerDump_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void managerDump_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* managerDump_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* managerDump_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.kvdb.managerDump_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void managerDump_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.kvdb.managerDump_Response.error)
}

// repeated .com.wazuh.api.engine.kvdb.Entry entries = 3;
inline int managerDump_Response::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int managerDump_Response::entries_size() const {
  return _internal_entries_size();
}
inline void managerDump_Response::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::com::wazuh::api::engine::kvdb::Entry* managerDump_Response::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.kvdb.managerDump_Response.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >*
managerDump_Response::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.kvdb.managerDump_Response.entries)
  return &_impl_.entries_;
}
inline const ::com::wazuh::api::engine::kvdb::Entry& managerDump_Response::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::com::wazuh::api::engine::kvdb::Entry& managerDump_Response::entries(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.kvdb.managerDump_Response.entries)
  return _internal_entries(index);
}
inline ::com::wazuh::api::engine::kvdb::Entry* managerDump_Response::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::com::wazuh::api::engine::kvdb::Entry* managerDump_Response::add_entries() {
  ::com::wazuh::api::engine::kvdb::Entry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.kvdb.managerDump_Response.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::kvdb::Entry >&
managerDump_Response::entries() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.kvdb.managerDump_Response.entries)
  return _impl_.entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kvdb
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvdb_2eproto
