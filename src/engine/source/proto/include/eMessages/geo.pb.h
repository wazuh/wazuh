// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_geo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_geo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_geo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_geo_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace geo {
class DbDelete_Request;
struct DbDelete_RequestDefaultTypeInternal;
extern DbDelete_RequestDefaultTypeInternal _DbDelete_Request_default_instance_;
class DbEntry;
struct DbEntryDefaultTypeInternal;
extern DbEntryDefaultTypeInternal _DbEntry_default_instance_;
class DbList_Request;
struct DbList_RequestDefaultTypeInternal;
extern DbList_RequestDefaultTypeInternal _DbList_Request_default_instance_;
class DbList_Response;
struct DbList_ResponseDefaultTypeInternal;
extern DbList_ResponseDefaultTypeInternal _DbList_Response_default_instance_;
class DbPost_Request;
struct DbPost_RequestDefaultTypeInternal;
extern DbPost_RequestDefaultTypeInternal _DbPost_Request_default_instance_;
class DbRemoteUpsert_Request;
struct DbRemoteUpsert_RequestDefaultTypeInternal;
extern DbRemoteUpsert_RequestDefaultTypeInternal _DbRemoteUpsert_Request_default_instance_;
}  // namespace geo
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::geo::DbDelete_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::geo::DbDelete_Request>(Arena*);
template<> ::com::wazuh::api::engine::geo::DbEntry* Arena::CreateMaybeMessage<::com::wazuh::api::engine::geo::DbEntry>(Arena*);
template<> ::com::wazuh::api::engine::geo::DbList_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::geo::DbList_Request>(Arena*);
template<> ::com::wazuh::api::engine::geo::DbList_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::geo::DbList_Response>(Arena*);
template<> ::com::wazuh::api::engine::geo::DbPost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::geo::DbPost_Request>(Arena*);
template<> ::com::wazuh::api::engine::geo::DbRemoteUpsert_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::geo::DbRemoteUpsert_Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace geo {

// ===================================================================

class DbEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.geo.DbEntry) */ {
 public:
  inline DbEntry() : DbEntry(nullptr) {}
  ~DbEntry() override;
  explicit PROTOBUF_CONSTEXPR DbEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbEntry(const DbEntry& from);
  DbEntry(DbEntry&& from) noexcept
    : DbEntry() {
    *this = ::std::move(from);
  }

  inline DbEntry& operator=(const DbEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbEntry& operator=(DbEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbEntry* internal_default_instance() {
    return reinterpret_cast<const DbEntry*>(
               &_DbEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DbEntry& a, DbEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(DbEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DbEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DbEntry& from) {
    DbEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.geo.DbEntry";
  }
  protected:
  explicit DbEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPathFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.geo.DbEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geo_2eproto;
};
// -------------------------------------------------------------------

class DbPost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.geo.DbPost_Request) */ {
 public:
  inline DbPost_Request() : DbPost_Request(nullptr) {}
  ~DbPost_Request() override;
  explicit PROTOBUF_CONSTEXPR DbPost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbPost_Request(const DbPost_Request& from);
  DbPost_Request(DbPost_Request&& from) noexcept
    : DbPost_Request() {
    *this = ::std::move(from);
  }

  inline DbPost_Request& operator=(const DbPost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbPost_Request& operator=(DbPost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbPost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbPost_Request* internal_default_instance() {
    return reinterpret_cast<const DbPost_Request*>(
               &_DbPost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DbPost_Request& a, DbPost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(DbPost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbPost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbPost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbPost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DbPost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DbPost_Request& from) {
    DbPost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbPost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.geo.DbPost_Request";
  }
  protected:
  explicit DbPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.geo.DbPost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geo_2eproto;
};
// -------------------------------------------------------------------

class DbDelete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.geo.DbDelete_Request) */ {
 public:
  inline DbDelete_Request() : DbDelete_Request(nullptr) {}
  ~DbDelete_Request() override;
  explicit PROTOBUF_CONSTEXPR DbDelete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbDelete_Request(const DbDelete_Request& from);
  DbDelete_Request(DbDelete_Request&& from) noexcept
    : DbDelete_Request() {
    *this = ::std::move(from);
  }

  inline DbDelete_Request& operator=(const DbDelete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbDelete_Request& operator=(DbDelete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbDelete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbDelete_Request* internal_default_instance() {
    return reinterpret_cast<const DbDelete_Request*>(
               &_DbDelete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DbDelete_Request& a, DbDelete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(DbDelete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbDelete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbDelete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbDelete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DbDelete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DbDelete_Request& from) {
    DbDelete_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbDelete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.geo.DbDelete_Request";
  }
  protected:
  explicit DbDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.geo.DbDelete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geo_2eproto;
};
// -------------------------------------------------------------------

class DbList_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.geo.DbList_Request) */ {
 public:
  inline DbList_Request() : DbList_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR DbList_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbList_Request(const DbList_Request& from);
  DbList_Request(DbList_Request&& from) noexcept
    : DbList_Request() {
    *this = ::std::move(from);
  }

  inline DbList_Request& operator=(const DbList_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbList_Request& operator=(DbList_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbList_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbList_Request* internal_default_instance() {
    return reinterpret_cast<const DbList_Request*>(
               &_DbList_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DbList_Request& a, DbList_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(DbList_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbList_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbList_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbList_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DbList_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DbList_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.geo.DbList_Request";
  }
  protected:
  explicit DbList_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.geo.DbList_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_geo_2eproto;
};
// -------------------------------------------------------------------

class DbList_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.geo.DbList_Response) */ {
 public:
  inline DbList_Response() : DbList_Response(nullptr) {}
  ~DbList_Response() override;
  explicit PROTOBUF_CONSTEXPR DbList_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbList_Response(const DbList_Response& from);
  DbList_Response(DbList_Response&& from) noexcept
    : DbList_Response() {
    *this = ::std::move(from);
  }

  inline DbList_Response& operator=(const DbList_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbList_Response& operator=(DbList_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbList_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbList_Response* internal_default_instance() {
    return reinterpret_cast<const DbList_Response*>(
               &_DbList_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DbList_Response& a, DbList_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(DbList_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbList_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbList_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbList_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DbList_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DbList_Response& from) {
    DbList_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbList_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.geo.DbList_Response";
  }
  protected:
  explicit DbList_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .com.wazuh.api.engine.geo.DbEntry entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::com::wazuh::api::engine::geo::DbEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::geo::DbEntry >*
      mutable_entries();
  private:
  const ::com::wazuh::api::engine::geo::DbEntry& _internal_entries(int index) const;
  ::com::wazuh::api::engine::geo::DbEntry* _internal_add_entries();
  public:
  const ::com::wazuh::api::engine::geo::DbEntry& entries(int index) const;
  ::com::wazuh::api::engine::geo::DbEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::geo::DbEntry >&
      entries() const;

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.geo.DbList_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::geo::DbEntry > entries_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geo_2eproto;
};
// -------------------------------------------------------------------

class DbRemoteUpsert_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.geo.DbRemoteUpsert_Request) */ {
 public:
  inline DbRemoteUpsert_Request() : DbRemoteUpsert_Request(nullptr) {}
  ~DbRemoteUpsert_Request() override;
  explicit PROTOBUF_CONSTEXPR DbRemoteUpsert_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DbRemoteUpsert_Request(const DbRemoteUpsert_Request& from);
  DbRemoteUpsert_Request(DbRemoteUpsert_Request&& from) noexcept
    : DbRemoteUpsert_Request() {
    *this = ::std::move(from);
  }

  inline DbRemoteUpsert_Request& operator=(const DbRemoteUpsert_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbRemoteUpsert_Request& operator=(DbRemoteUpsert_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DbRemoteUpsert_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const DbRemoteUpsert_Request* internal_default_instance() {
    return reinterpret_cast<const DbRemoteUpsert_Request*>(
               &_DbRemoteUpsert_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DbRemoteUpsert_Request& a, DbRemoteUpsert_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(DbRemoteUpsert_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbRemoteUpsert_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DbRemoteUpsert_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DbRemoteUpsert_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DbRemoteUpsert_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DbRemoteUpsert_Request& from) {
    DbRemoteUpsert_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbRemoteUpsert_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.geo.DbRemoteUpsert_Request";
  }
  protected:
  explicit DbRemoteUpsert_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDbUrlFieldNumber = 3,
    kHashUrlFieldNumber = 4,
  };
  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string dbUrl = 3;
  void clear_dburl();
  const std::string& dburl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dburl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dburl();
  PROTOBUF_NODISCARD std::string* release_dburl();
  void set_allocated_dburl(std::string* dburl);
  private:
  const std::string& _internal_dburl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dburl(const std::string& value);
  std::string* _internal_mutable_dburl();
  public:

  // string hashUrl = 4;
  void clear_hashurl();
  const std::string& hashurl() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hashurl(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hashurl();
  PROTOBUF_NODISCARD std::string* release_hashurl();
  void set_allocated_hashurl(std::string* hashurl);
  private:
  const std::string& _internal_hashurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hashurl(const std::string& value);
  std::string* _internal_mutable_hashurl();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.geo.DbRemoteUpsert_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dburl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hashurl_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_geo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DbEntry

// string name = 1;
inline void DbEntry::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& DbEntry::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbEntry.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbEntry::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbEntry.name)
}
inline std::string* DbEntry::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbEntry.name)
  return _s;
}
inline const std::string& DbEntry::_internal_name() const {
  return _impl_.name_.Get();
}
inline void DbEntry::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* DbEntry::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* DbEntry::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbEntry.name)
  return _impl_.name_.Release();
}
inline void DbEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbEntry.name)
}

// string path = 2;
inline void DbEntry::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& DbEntry::path() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbEntry.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbEntry::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbEntry.path)
}
inline std::string* DbEntry::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbEntry.path)
  return _s;
}
inline const std::string& DbEntry::_internal_path() const {
  return _impl_.path_.Get();
}
inline void DbEntry::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* DbEntry::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* DbEntry::release_path() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbEntry.path)
  return _impl_.path_.Release();
}
inline void DbEntry::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbEntry.path)
}

// string type = 3;
inline void DbEntry::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& DbEntry::type() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbEntry.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbEntry::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbEntry.type)
}
inline std::string* DbEntry::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbEntry.type)
  return _s;
}
inline const std::string& DbEntry::_internal_type() const {
  return _impl_.type_.Get();
}
inline void DbEntry::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* DbEntry::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* DbEntry::release_type() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbEntry.type)
  return _impl_.type_.Release();
}
inline void DbEntry::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbEntry.type)
}

// -------------------------------------------------------------------

// DbPost_Request

// string path = 1;
inline void DbPost_Request::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& DbPost_Request::path() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbPost_Request.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbPost_Request::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbPost_Request.path)
}
inline std::string* DbPost_Request::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbPost_Request.path)
  return _s;
}
inline const std::string& DbPost_Request::_internal_path() const {
  return _impl_.path_.Get();
}
inline void DbPost_Request::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* DbPost_Request::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* DbPost_Request::release_path() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbPost_Request.path)
  return _impl_.path_.Release();
}
inline void DbPost_Request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbPost_Request.path)
}

// string type = 2;
inline void DbPost_Request::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& DbPost_Request::type() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbPost_Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbPost_Request::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbPost_Request.type)
}
inline std::string* DbPost_Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbPost_Request.type)
  return _s;
}
inline const std::string& DbPost_Request::_internal_type() const {
  return _impl_.type_.Get();
}
inline void DbPost_Request::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* DbPost_Request::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* DbPost_Request::release_type() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbPost_Request.type)
  return _impl_.type_.Release();
}
inline void DbPost_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbPost_Request.type)
}

// -------------------------------------------------------------------

// DbDelete_Request

// string path = 1;
inline void DbDelete_Request::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& DbDelete_Request::path() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbDelete_Request.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbDelete_Request::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbDelete_Request.path)
}
inline std::string* DbDelete_Request::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbDelete_Request.path)
  return _s;
}
inline const std::string& DbDelete_Request::_internal_path() const {
  return _impl_.path_.Get();
}
inline void DbDelete_Request::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* DbDelete_Request::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* DbDelete_Request::release_path() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbDelete_Request.path)
  return _impl_.path_.Release();
}
inline void DbDelete_Request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbDelete_Request.path)
}

// -------------------------------------------------------------------

// DbList_Request

// -------------------------------------------------------------------

// DbList_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void DbList_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus DbList_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus DbList_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbList_Response.status)
  return _internal_status();
}
inline void DbList_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void DbList_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbList_Response.status)
}

// optional string error = 2;
inline bool DbList_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DbList_Response::has_error() const {
  return _internal_has_error();
}
inline void DbList_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DbList_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbList_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbList_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbList_Response.error)
}
inline std::string* DbList_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbList_Response.error)
  return _s;
}
inline const std::string& DbList_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void DbList_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* DbList_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* DbList_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbList_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DbList_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbList_Response.error)
}

// repeated .com.wazuh.api.engine.geo.DbEntry entries = 3;
inline int DbList_Response::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int DbList_Response::entries_size() const {
  return _internal_entries_size();
}
inline void DbList_Response::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::com::wazuh::api::engine::geo::DbEntry* DbList_Response::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbList_Response.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::geo::DbEntry >*
DbList_Response::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.geo.DbList_Response.entries)
  return &_impl_.entries_;
}
inline const ::com::wazuh::api::engine::geo::DbEntry& DbList_Response::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::com::wazuh::api::engine::geo::DbEntry& DbList_Response::entries(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbList_Response.entries)
  return _internal_entries(index);
}
inline ::com::wazuh::api::engine::geo::DbEntry* DbList_Response::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::com::wazuh::api::engine::geo::DbEntry* DbList_Response::add_entries() {
  ::com::wazuh::api::engine::geo::DbEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.geo.DbList_Response.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::geo::DbEntry >&
DbList_Response::entries() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.geo.DbList_Response.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// DbRemoteUpsert_Request

// string path = 1;
inline void DbRemoteUpsert_Request::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& DbRemoteUpsert_Request::path() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbRemoteUpsert_Request::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.path)
}
inline std::string* DbRemoteUpsert_Request::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.path)
  return _s;
}
inline const std::string& DbRemoteUpsert_Request::_internal_path() const {
  return _impl_.path_.Get();
}
inline void DbRemoteUpsert_Request::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::release_path() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.path)
  return _impl_.path_.Release();
}
inline void DbRemoteUpsert_Request::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.path)
}

// string type = 2;
inline void DbRemoteUpsert_Request::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& DbRemoteUpsert_Request::type() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbRemoteUpsert_Request::set_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.type)
}
inline std::string* DbRemoteUpsert_Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.type)
  return _s;
}
inline const std::string& DbRemoteUpsert_Request::_internal_type() const {
  return _impl_.type_.Get();
}
inline void DbRemoteUpsert_Request::_internal_set_type(const std::string& value) {
  
  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::_internal_mutable_type() {
  
  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::release_type() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.type)
  return _impl_.type_.Release();
}
inline void DbRemoteUpsert_Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.type)
}

// string dbUrl = 3;
inline void DbRemoteUpsert_Request::clear_dburl() {
  _impl_.dburl_.ClearToEmpty();
}
inline const std::string& DbRemoteUpsert_Request::dburl() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.dbUrl)
  return _internal_dburl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbRemoteUpsert_Request::set_dburl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dburl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.dbUrl)
}
inline std::string* DbRemoteUpsert_Request::mutable_dburl() {
  std::string* _s = _internal_mutable_dburl();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.dbUrl)
  return _s;
}
inline const std::string& DbRemoteUpsert_Request::_internal_dburl() const {
  return _impl_.dburl_.Get();
}
inline void DbRemoteUpsert_Request::_internal_set_dburl(const std::string& value) {
  
  _impl_.dburl_.Set(value, GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::_internal_mutable_dburl() {
  
  return _impl_.dburl_.Mutable(GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::release_dburl() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.dbUrl)
  return _impl_.dburl_.Release();
}
inline void DbRemoteUpsert_Request::set_allocated_dburl(std::string* dburl) {
  if (dburl != nullptr) {
    
  } else {
    
  }
  _impl_.dburl_.SetAllocated(dburl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dburl_.IsDefault()) {
    _impl_.dburl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.dbUrl)
}

// string hashUrl = 4;
inline void DbRemoteUpsert_Request::clear_hashurl() {
  _impl_.hashurl_.ClearToEmpty();
}
inline const std::string& DbRemoteUpsert_Request::hashurl() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.hashUrl)
  return _internal_hashurl();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DbRemoteUpsert_Request::set_hashurl(ArgT0&& arg0, ArgT... args) {
 
 _impl_.hashurl_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.hashUrl)
}
inline std::string* DbRemoteUpsert_Request::mutable_hashurl() {
  std::string* _s = _internal_mutable_hashurl();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.hashUrl)
  return _s;
}
inline const std::string& DbRemoteUpsert_Request::_internal_hashurl() const {
  return _impl_.hashurl_.Get();
}
inline void DbRemoteUpsert_Request::_internal_set_hashurl(const std::string& value) {
  
  _impl_.hashurl_.Set(value, GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::_internal_mutable_hashurl() {
  
  return _impl_.hashurl_.Mutable(GetArenaForAllocation());
}
inline std::string* DbRemoteUpsert_Request::release_hashurl() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.hashUrl)
  return _impl_.hashurl_.Release();
}
inline void DbRemoteUpsert_Request::set_allocated_hashurl(std::string* hashurl) {
  if (hashurl != nullptr) {
    
  } else {
    
  }
  _impl_.hashurl_.SetAllocated(hashurl, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.hashurl_.IsDefault()) {
    _impl_.hashurl_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.geo.DbRemoteUpsert_Request.hashUrl)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geo
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_geo_2eproto
