// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tester.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tester_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tester_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "engine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tester_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tester_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tester_2eproto;
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace tester {
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class Result_AssetTrace;
struct Result_AssetTraceDefaultTypeInternal;
extern Result_AssetTraceDefaultTypeInternal _Result_AssetTrace_default_instance_;
class RunPost_Request;
struct RunPost_RequestDefaultTypeInternal;
extern RunPost_RequestDefaultTypeInternal _RunPost_Request_default_instance_;
class RunPost_Response;
struct RunPost_ResponseDefaultTypeInternal;
extern RunPost_ResponseDefaultTypeInternal _RunPost_Response_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionDelete_Request;
struct SessionDelete_RequestDefaultTypeInternal;
extern SessionDelete_RequestDefaultTypeInternal _SessionDelete_Request_default_instance_;
class SessionGet_Request;
struct SessionGet_RequestDefaultTypeInternal;
extern SessionGet_RequestDefaultTypeInternal _SessionGet_Request_default_instance_;
class SessionGet_Response;
struct SessionGet_ResponseDefaultTypeInternal;
extern SessionGet_ResponseDefaultTypeInternal _SessionGet_Response_default_instance_;
class SessionPost;
struct SessionPostDefaultTypeInternal;
extern SessionPostDefaultTypeInternal _SessionPost_default_instance_;
class SessionPost_Request;
struct SessionPost_RequestDefaultTypeInternal;
extern SessionPost_RequestDefaultTypeInternal _SessionPost_Request_default_instance_;
class SessionReload_Request;
struct SessionReload_RequestDefaultTypeInternal;
extern SessionReload_RequestDefaultTypeInternal _SessionReload_Request_default_instance_;
class TableGet_Request;
struct TableGet_RequestDefaultTypeInternal;
extern TableGet_RequestDefaultTypeInternal _TableGet_Request_default_instance_;
class TableGet_Response;
struct TableGet_ResponseDefaultTypeInternal;
extern TableGet_ResponseDefaultTypeInternal _TableGet_Response_default_instance_;
}  // namespace tester
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::wazuh::api::engine::tester::Result* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::Result>(Arena*);
template<> ::com::wazuh::api::engine::tester::Result_AssetTrace* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::Result_AssetTrace>(Arena*);
template<> ::com::wazuh::api::engine::tester::RunPost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::RunPost_Request>(Arena*);
template<> ::com::wazuh::api::engine::tester::RunPost_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::RunPost_Response>(Arena*);
template<> ::com::wazuh::api::engine::tester::Session* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::Session>(Arena*);
template<> ::com::wazuh::api::engine::tester::SessionDelete_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::SessionDelete_Request>(Arena*);
template<> ::com::wazuh::api::engine::tester::SessionGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::SessionGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::tester::SessionGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::SessionGet_Response>(Arena*);
template<> ::com::wazuh::api::engine::tester::SessionPost* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::SessionPost>(Arena*);
template<> ::com::wazuh::api::engine::tester::SessionPost_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::SessionPost_Request>(Arena*);
template<> ::com::wazuh::api::engine::tester::SessionReload_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::SessionReload_Request>(Arena*);
template<> ::com::wazuh::api::engine::tester::TableGet_Request* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::TableGet_Request>(Arena*);
template<> ::com::wazuh::api::engine::tester::TableGet_Response* Arena::CreateMaybeMessage<::com::wazuh::api::engine::tester::TableGet_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace wazuh {
namespace api {
namespace engine {
namespace tester {

enum State : int {
  STATE_UNKNOWN = 0,
  DISABLED = 1,
  ENABLED = 2,
  State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool State_IsValid(int value);
constexpr State State_MIN = STATE_UNKNOWN;
constexpr State State_MAX = ENABLED;
constexpr int State_ARRAYSIZE = State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* State_descriptor();
template<typename T>
inline const std::string& State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    State_descriptor(), enum_t_value);
}
inline bool State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<State>(
    State_descriptor(), name, value);
}
enum Sync : int {
  SYNC_UNKNOWN = 0,
  UPDATED = 1,
  OUTDATED = 2,
  ERROR = 3,
  Sync_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Sync_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Sync_IsValid(int value);
constexpr Sync Sync_MIN = SYNC_UNKNOWN;
constexpr Sync Sync_MAX = ERROR;
constexpr int Sync_ARRAYSIZE = Sync_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sync_descriptor();
template<typename T>
inline const std::string& Sync_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sync>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sync_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sync_descriptor(), enum_t_value);
}
inline bool Sync_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Sync* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sync>(
    Sync_descriptor(), name, value);
}
enum TraceLevel : int {
  NONE = 0,
  ASSET_ONLY = 1,
  ALL = 2,
  TraceLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TraceLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TraceLevel_IsValid(int value);
constexpr TraceLevel TraceLevel_MIN = NONE;
constexpr TraceLevel TraceLevel_MAX = ALL;
constexpr int TraceLevel_ARRAYSIZE = TraceLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TraceLevel_descriptor();
template<typename T>
inline const std::string& TraceLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TraceLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TraceLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TraceLevel_descriptor(), enum_t_value);
}
inline bool TraceLevel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TraceLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TraceLevel>(
    TraceLevel_descriptor(), name, value);
}
// ===================================================================

class SessionPost final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.SessionPost) */ {
 public:
  inline SessionPost() : SessionPost(nullptr) {}
  ~SessionPost() override;
  explicit PROTOBUF_CONSTEXPR SessionPost(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionPost(const SessionPost& from);
  SessionPost(SessionPost&& from) noexcept
    : SessionPost() {
    *this = ::std::move(from);
  }

  inline SessionPost& operator=(const SessionPost& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionPost& operator=(SessionPost&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionPost& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionPost* internal_default_instance() {
    return reinterpret_cast<const SessionPost*>(
               &_SessionPost_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SessionPost& a, SessionPost& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionPost* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionPost* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionPost* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionPost>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionPost& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionPost& from) {
    SessionPost::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionPost* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.SessionPost";
  }
  protected:
  explicit SessionPost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kLifetimeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string policy = 2;
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 lifetime = 3;
  void clear_lifetime();
  uint32_t lifetime() const;
  void set_lifetime(uint32_t value);
  private:
  uint32_t _internal_lifetime() const;
  void _internal_set_lifetime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.SessionPost)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t lifetime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit PROTOBUF_CONSTEXPR Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Session& from) {
    Session::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPolicyFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kLifetimeFieldNumber = 3,
    kPolicySyncFieldNumber = 6,
    kEntryStatusFieldNumber = 7,
    kLastUseFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string policy = 2;
  void clear_policy();
  const std::string& policy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy();
  PROTOBUF_NODISCARD std::string* release_policy();
  void set_allocated_policy(std::string* policy);
  private:
  const std::string& _internal_policy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy(const std::string& value);
  std::string* _internal_mutable_policy();
  public:

  // optional string description = 4;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // uint32 lifetime = 3;
  void clear_lifetime();
  uint32_t lifetime() const;
  void set_lifetime(uint32_t value);
  private:
  uint32_t _internal_lifetime() const;
  void _internal_set_lifetime(uint32_t value);
  public:

  // .com.wazuh.api.engine.tester.Sync policy_sync = 6;
  void clear_policy_sync();
  ::com::wazuh::api::engine::tester::Sync policy_sync() const;
  void set_policy_sync(::com::wazuh::api::engine::tester::Sync value);
  private:
  ::com::wazuh::api::engine::tester::Sync _internal_policy_sync() const;
  void _internal_set_policy_sync(::com::wazuh::api::engine::tester::Sync value);
  public:

  // .com.wazuh.api.engine.tester.State entry_status = 7;
  void clear_entry_status();
  ::com::wazuh::api::engine::tester::State entry_status() const;
  void set_entry_status(::com::wazuh::api::engine::tester::State value);
  private:
  ::com::wazuh::api::engine::tester::State _internal_entry_status() const;
  void _internal_set_entry_status(::com::wazuh::api::engine::tester::State value);
  public:

  // uint32 last_use = 8;
  void clear_last_use();
  uint32_t last_use() const;
  void set_last_use(uint32_t value);
  private:
  uint32_t _internal_last_use() const;
  void _internal_set_last_use(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    uint32_t lifetime_;
    int policy_sync_;
    int entry_status_;
    uint32_t last_use_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class Result_AssetTrace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.Result.AssetTrace) */ {
 public:
  inline Result_AssetTrace() : Result_AssetTrace(nullptr) {}
  ~Result_AssetTrace() override;
  explicit PROTOBUF_CONSTEXPR Result_AssetTrace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result_AssetTrace(const Result_AssetTrace& from);
  Result_AssetTrace(Result_AssetTrace&& from) noexcept
    : Result_AssetTrace() {
    *this = ::std::move(from);
  }

  inline Result_AssetTrace& operator=(const Result_AssetTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result_AssetTrace& operator=(Result_AssetTrace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result_AssetTrace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result_AssetTrace* internal_default_instance() {
    return reinterpret_cast<const Result_AssetTrace*>(
               &_Result_AssetTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Result_AssetTrace& a, Result_AssetTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(Result_AssetTrace* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result_AssetTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result_AssetTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result_AssetTrace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result_AssetTrace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Result_AssetTrace& from) {
    Result_AssetTrace::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result_AssetTrace* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.Result.AssetTrace";
  }
  protected:
  explicit Result_AssetTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracesFieldNumber = 3,
    kAssetFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated string traces = 3;
  int traces_size() const;
  private:
  int _internal_traces_size() const;
  public:
  void clear_traces();
  const std::string& traces(int index) const;
  std::string* mutable_traces(int index);
  void set_traces(int index, const std::string& value);
  void set_traces(int index, std::string&& value);
  void set_traces(int index, const char* value);
  void set_traces(int index, const char* value, size_t size);
  std::string* add_traces();
  void add_traces(const std::string& value);
  void add_traces(std::string&& value);
  void add_traces(const char* value);
  void add_traces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& traces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_traces();
  private:
  const std::string& _internal_traces(int index) const;
  std::string* _internal_add_traces();
  public:

  // string asset = 1;
  void clear_asset();
  const std::string& asset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset();
  PROTOBUF_NODISCARD std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.Result.AssetTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> traces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit PROTOBUF_CONSTEXPR Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Result& from) {
    Result::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Result_AssetTrace AssetTrace;

  // accessors -------------------------------------------------------

  enum : int {
    kAssetTracesFieldNumber = 2,
    kOutputFieldNumber = 1,
  };
  // repeated .com.wazuh.api.engine.tester.Result.AssetTrace asset_traces = 2;
  int asset_traces_size() const;
  private:
  int _internal_asset_traces_size() const;
  public:
  void clear_asset_traces();
  ::com::wazuh::api::engine::tester::Result_AssetTrace* mutable_asset_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Result_AssetTrace >*
      mutable_asset_traces();
  private:
  const ::com::wazuh::api::engine::tester::Result_AssetTrace& _internal_asset_traces(int index) const;
  ::com::wazuh::api::engine::tester::Result_AssetTrace* _internal_add_asset_traces();
  public:
  const ::com::wazuh::api::engine::tester::Result_AssetTrace& asset_traces(int index) const;
  ::com::wazuh::api::engine::tester::Result_AssetTrace* add_asset_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Result_AssetTrace >&
      asset_traces() const;

  // string output = 1;
  void clear_output();
  const std::string& output() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_output(ArgT0&& arg0, ArgT... args);
  std::string* mutable_output();
  PROTOBUF_NODISCARD std::string* release_output();
  void set_allocated_output(std::string* output);
  private:
  const std::string& _internal_output() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_output(const std::string& value);
  std::string* _internal_mutable_output();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Result_AssetTrace > asset_traces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr output_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class SessionPost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.SessionPost_Request) */ {
 public:
  inline SessionPost_Request() : SessionPost_Request(nullptr) {}
  ~SessionPost_Request() override;
  explicit PROTOBUF_CONSTEXPR SessionPost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionPost_Request(const SessionPost_Request& from);
  SessionPost_Request(SessionPost_Request&& from) noexcept
    : SessionPost_Request() {
    *this = ::std::move(from);
  }

  inline SessionPost_Request& operator=(const SessionPost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionPost_Request& operator=(SessionPost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionPost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionPost_Request* internal_default_instance() {
    return reinterpret_cast<const SessionPost_Request*>(
               &_SessionPost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SessionPost_Request& a, SessionPost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionPost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionPost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionPost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionPost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionPost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionPost_Request& from) {
    SessionPost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionPost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.SessionPost_Request";
  }
  protected:
  explicit SessionPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionFieldNumber = 1,
  };
  // optional .com.wazuh.api.engine.tester.SessionPost session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::com::wazuh::api::engine::tester::SessionPost& session() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::tester::SessionPost* release_session();
  ::com::wazuh::api::engine::tester::SessionPost* mutable_session();
  void set_allocated_session(::com::wazuh::api::engine::tester::SessionPost* session);
  private:
  const ::com::wazuh::api::engine::tester::SessionPost& _internal_session() const;
  ::com::wazuh::api::engine::tester::SessionPost* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::com::wazuh::api::engine::tester::SessionPost* session);
  ::com::wazuh::api::engine::tester::SessionPost* unsafe_arena_release_session();

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.SessionPost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::wazuh::api::engine::tester::SessionPost* session_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class SessionDelete_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.SessionDelete_Request) */ {
 public:
  inline SessionDelete_Request() : SessionDelete_Request(nullptr) {}
  ~SessionDelete_Request() override;
  explicit PROTOBUF_CONSTEXPR SessionDelete_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionDelete_Request(const SessionDelete_Request& from);
  SessionDelete_Request(SessionDelete_Request&& from) noexcept
    : SessionDelete_Request() {
    *this = ::std::move(from);
  }

  inline SessionDelete_Request& operator=(const SessionDelete_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionDelete_Request& operator=(SessionDelete_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionDelete_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionDelete_Request* internal_default_instance() {
    return reinterpret_cast<const SessionDelete_Request*>(
               &_SessionDelete_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SessionDelete_Request& a, SessionDelete_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionDelete_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionDelete_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionDelete_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionDelete_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionDelete_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionDelete_Request& from) {
    SessionDelete_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionDelete_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.SessionDelete_Request";
  }
  protected:
  explicit SessionDelete_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.SessionDelete_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class SessionGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.SessionGet_Request) */ {
 public:
  inline SessionGet_Request() : SessionGet_Request(nullptr) {}
  ~SessionGet_Request() override;
  explicit PROTOBUF_CONSTEXPR SessionGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionGet_Request(const SessionGet_Request& from);
  SessionGet_Request(SessionGet_Request&& from) noexcept
    : SessionGet_Request() {
    *this = ::std::move(from);
  }

  inline SessionGet_Request& operator=(const SessionGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionGet_Request& operator=(SessionGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionGet_Request* internal_default_instance() {
    return reinterpret_cast<const SessionGet_Request*>(
               &_SessionGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SessionGet_Request& a, SessionGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionGet_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionGet_Request& from) {
    SessionGet_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionGet_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.SessionGet_Request";
  }
  protected:
  explicit SessionGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.SessionGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class SessionGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.SessionGet_Response) */ {
 public:
  inline SessionGet_Response() : SessionGet_Response(nullptr) {}
  ~SessionGet_Response() override;
  explicit PROTOBUF_CONSTEXPR SessionGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionGet_Response(const SessionGet_Response& from);
  SessionGet_Response(SessionGet_Response&& from) noexcept
    : SessionGet_Response() {
    *this = ::std::move(from);
  }

  inline SessionGet_Response& operator=(const SessionGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionGet_Response& operator=(SessionGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionGet_Response* internal_default_instance() {
    return reinterpret_cast<const SessionGet_Response*>(
               &_SessionGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SessionGet_Response& a, SessionGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionGet_Response& from) {
    SessionGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.SessionGet_Response";
  }
  protected:
  explicit SessionGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kSessionFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .com.wazuh.api.engine.tester.Session session = 3;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::com::wazuh::api::engine::tester::Session& session() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::tester::Session* release_session();
  ::com::wazuh::api::engine::tester::Session* mutable_session();
  void set_allocated_session(::com::wazuh::api::engine::tester::Session* session);
  private:
  const ::com::wazuh::api::engine::tester::Session& _internal_session() const;
  ::com::wazuh::api::engine::tester::Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::com::wazuh::api::engine::tester::Session* session);
  ::com::wazuh::api::engine::tester::Session* unsafe_arena_release_session();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.SessionGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::com::wazuh::api::engine::tester::Session* session_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class SessionReload_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.SessionReload_Request) */ {
 public:
  inline SessionReload_Request() : SessionReload_Request(nullptr) {}
  ~SessionReload_Request() override;
  explicit PROTOBUF_CONSTEXPR SessionReload_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionReload_Request(const SessionReload_Request& from);
  SessionReload_Request(SessionReload_Request&& from) noexcept
    : SessionReload_Request() {
    *this = ::std::move(from);
  }

  inline SessionReload_Request& operator=(const SessionReload_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionReload_Request& operator=(SessionReload_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SessionReload_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionReload_Request* internal_default_instance() {
    return reinterpret_cast<const SessionReload_Request*>(
               &_SessionReload_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SessionReload_Request& a, SessionReload_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionReload_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionReload_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionReload_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionReload_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SessionReload_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SessionReload_Request& from) {
    SessionReload_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionReload_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.SessionReload_Request";
  }
  protected:
  explicit SessionReload_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.SessionReload_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class TableGet_Request final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.TableGet_Request) */ {
 public:
  inline TableGet_Request() : TableGet_Request(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TableGet_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableGet_Request(const TableGet_Request& from);
  TableGet_Request(TableGet_Request&& from) noexcept
    : TableGet_Request() {
    *this = ::std::move(from);
  }

  inline TableGet_Request& operator=(const TableGet_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableGet_Request& operator=(TableGet_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableGet_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableGet_Request* internal_default_instance() {
    return reinterpret_cast<const TableGet_Request*>(
               &_TableGet_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TableGet_Request& a, TableGet_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(TableGet_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableGet_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableGet_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableGet_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TableGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TableGet_Request& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.TableGet_Request";
  }
  protected:
  explicit TableGet_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.TableGet_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class TableGet_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.TableGet_Response) */ {
 public:
  inline TableGet_Response() : TableGet_Response(nullptr) {}
  ~TableGet_Response() override;
  explicit PROTOBUF_CONSTEXPR TableGet_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableGet_Response(const TableGet_Response& from);
  TableGet_Response(TableGet_Response&& from) noexcept
    : TableGet_Response() {
    *this = ::std::move(from);
  }

  inline TableGet_Response& operator=(const TableGet_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableGet_Response& operator=(TableGet_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableGet_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableGet_Response* internal_default_instance() {
    return reinterpret_cast<const TableGet_Response*>(
               &_TableGet_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TableGet_Response& a, TableGet_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(TableGet_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableGet_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableGet_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableGet_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TableGet_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TableGet_Response& from) {
    TableGet_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableGet_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.TableGet_Response";
  }
  protected:
  explicit TableGet_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionsFieldNumber = 3,
    kErrorFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .com.wazuh.api.engine.tester.Session sessions = 3;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::com::wazuh::api::engine::tester::Session* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Session >*
      mutable_sessions();
  private:
  const ::com::wazuh::api::engine::tester::Session& _internal_sessions(int index) const;
  ::com::wazuh::api::engine::tester::Session* _internal_add_sessions();
  public:
  const ::com::wazuh::api::engine::tester::Session& sessions(int index) const;
  ::com::wazuh::api::engine::tester::Session* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Session >&
      sessions() const;

  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.TableGet_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Session > sessions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class RunPost_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.RunPost_Request) */ {
 public:
  inline RunPost_Request() : RunPost_Request(nullptr) {}
  ~RunPost_Request() override;
  explicit PROTOBUF_CONSTEXPR RunPost_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunPost_Request(const RunPost_Request& from);
  RunPost_Request(RunPost_Request&& from) noexcept
    : RunPost_Request() {
    *this = ::std::move(from);
  }

  inline RunPost_Request& operator=(const RunPost_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunPost_Request& operator=(RunPost_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunPost_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunPost_Request* internal_default_instance() {
    return reinterpret_cast<const RunPost_Request*>(
               &_RunPost_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RunPost_Request& a, RunPost_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(RunPost_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunPost_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunPost_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunPost_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunPost_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunPost_Request& from) {
    RunPost_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunPost_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.RunPost_Request";
  }
  protected:
  explicit RunPost_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetTraceFieldNumber = 6,
    kNamespacesFieldNumber = 7,
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
    kLocationFieldNumber = 3,
    kQueueFieldNumber = 4,
    kTraceLevelFieldNumber = 5,
  };
  // repeated string asset_trace = 6;
  int asset_trace_size() const;
  private:
  int _internal_asset_trace_size() const;
  public:
  void clear_asset_trace();
  const std::string& asset_trace(int index) const;
  std::string* mutable_asset_trace(int index);
  void set_asset_trace(int index, const std::string& value);
  void set_asset_trace(int index, std::string&& value);
  void set_asset_trace(int index, const char* value);
  void set_asset_trace(int index, const char* value, size_t size);
  std::string* add_asset_trace();
  void add_asset_trace(const std::string& value);
  void add_asset_trace(std::string&& value);
  void add_asset_trace(const char* value);
  void add_asset_trace(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& asset_trace() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_asset_trace();
  private:
  const std::string& _internal_asset_trace(int index) const;
  std::string* _internal_add_asset_trace();
  public:

  // repeated string namespaces = 7;
  int namespaces_size() const;
  private:
  int _internal_namespaces_size() const;
  public:
  void clear_namespaces();
  const std::string& namespaces(int index) const;
  std::string* mutable_namespaces(int index);
  void set_namespaces(int index, const std::string& value);
  void set_namespaces(int index, std::string&& value);
  void set_namespaces(int index, const char* value);
  void set_namespaces(int index, const char* value, size_t size);
  std::string* add_namespaces();
  void add_namespaces(const std::string& value);
  void add_namespaces(std::string&& value);
  void add_namespaces(const char* value);
  void add_namespaces(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& namespaces() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_namespaces();
  private:
  const std::string& _internal_namespaces(int index) const;
  std::string* _internal_add_namespaces();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string location = 3;
  void clear_location();
  const std::string& location() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_location(ArgT0&& arg0, ArgT... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // string queue = 4;
  void clear_queue();
  const std::string& queue() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_queue(ArgT0&& arg0, ArgT... args);
  std::string* mutable_queue();
  PROTOBUF_NODISCARD std::string* release_queue();
  void set_allocated_queue(std::string* queue);
  private:
  const std::string& _internal_queue() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue(const std::string& value);
  std::string* _internal_mutable_queue();
  public:

  // .com.wazuh.api.engine.tester.TraceLevel trace_level = 5;
  void clear_trace_level();
  ::com::wazuh::api::engine::tester::TraceLevel trace_level() const;
  void set_trace_level(::com::wazuh::api::engine::tester::TraceLevel value);
  private:
  ::com::wazuh::api::engine::tester::TraceLevel _internal_trace_level() const;
  void _internal_set_trace_level(::com::wazuh::api::engine::tester::TraceLevel value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.RunPost_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> asset_trace_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> namespaces_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_;
    int trace_level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// -------------------------------------------------------------------

class RunPost_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.wazuh.api.engine.tester.RunPost_Response) */ {
 public:
  inline RunPost_Response() : RunPost_Response(nullptr) {}
  ~RunPost_Response() override;
  explicit PROTOBUF_CONSTEXPR RunPost_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunPost_Response(const RunPost_Response& from);
  RunPost_Response(RunPost_Response&& from) noexcept
    : RunPost_Response() {
    *this = ::std::move(from);
  }

  inline RunPost_Response& operator=(const RunPost_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunPost_Response& operator=(RunPost_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunPost_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunPost_Response* internal_default_instance() {
    return reinterpret_cast<const RunPost_Response*>(
               &_RunPost_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RunPost_Response& a, RunPost_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(RunPost_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunPost_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RunPost_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RunPost_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunPost_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RunPost_Response& from) {
    RunPost_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunPost_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.wazuh.api.engine.tester.RunPost_Response";
  }
  protected:
  explicit RunPost_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kResultFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional string error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // optional .com.wazuh.api.engine.tester.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::com::wazuh::api::engine::tester::Result& result() const;
  PROTOBUF_NODISCARD ::com::wazuh::api::engine::tester::Result* release_result();
  ::com::wazuh::api::engine::tester::Result* mutable_result();
  void set_allocated_result(::com::wazuh::api::engine::tester::Result* result);
  private:
  const ::com::wazuh::api::engine::tester::Result& _internal_result() const;
  ::com::wazuh::api::engine::tester::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::com::wazuh::api::engine::tester::Result* result);
  ::com::wazuh::api::engine::tester::Result* unsafe_arena_release_result();

  // .com.wazuh.api.engine.ReturnStatus status = 1;
  void clear_status();
  ::com::wazuh::api::engine::ReturnStatus status() const;
  void set_status(::com::wazuh::api::engine::ReturnStatus value);
  private:
  ::com::wazuh::api::engine::ReturnStatus _internal_status() const;
  void _internal_set_status(::com::wazuh::api::engine::ReturnStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.wazuh.api.engine.tester.RunPost_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
    ::com::wazuh::api::engine::tester::Result* result_;
    int status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_tester_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SessionPost

// string name = 1;
inline void SessionPost::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SessionPost::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionPost.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionPost::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionPost.name)
}
inline std::string* SessionPost::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionPost.name)
  return _s;
}
inline const std::string& SessionPost::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SessionPost::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPost::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionPost::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionPost.name)
  return _impl_.name_.Release();
}
inline void SessionPost::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionPost.name)
}

// string policy = 2;
inline void SessionPost::clear_policy() {
  _impl_.policy_.ClearToEmpty();
}
inline const std::string& SessionPost::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionPost.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionPost::set_policy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionPost.policy)
}
inline std::string* SessionPost::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionPost.policy)
  return _s;
}
inline const std::string& SessionPost::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void SessionPost::_internal_set_policy(const std::string& value) {
  
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPost::_internal_mutable_policy() {
  
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionPost::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionPost.policy)
  return _impl_.policy_.Release();
}
inline void SessionPost::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    
  } else {
    
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionPost.policy)
}

// uint32 lifetime = 3;
inline void SessionPost::clear_lifetime() {
  _impl_.lifetime_ = 0u;
}
inline uint32_t SessionPost::_internal_lifetime() const {
  return _impl_.lifetime_;
}
inline uint32_t SessionPost::lifetime() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionPost.lifetime)
  return _internal_lifetime();
}
inline void SessionPost::_internal_set_lifetime(uint32_t value) {
  
  _impl_.lifetime_ = value;
}
inline void SessionPost::set_lifetime(uint32_t value) {
  _internal_set_lifetime(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionPost.lifetime)
}

// optional string description = 4;
inline bool SessionPost::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionPost::has_description() const {
  return _internal_has_description();
}
inline void SessionPost::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionPost::description() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionPost.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionPost::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionPost.description)
}
inline std::string* SessionPost::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionPost.description)
  return _s;
}
inline const std::string& SessionPost::_internal_description() const {
  return _impl_.description_.Get();
}
inline void SessionPost::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPost::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionPost::release_description() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionPost.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionPost::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionPost.description)
}

// -------------------------------------------------------------------

// Session

// string name = 1;
inline void Session::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Session::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Session.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Session.name)
}
inline std::string* Session::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.Session.name)
  return _s;
}
inline const std::string& Session::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Session::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.Session.name)
  return _impl_.name_.Release();
}
inline void Session::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.Session.name)
}

// string policy = 2;
inline void Session::clear_policy() {
  _impl_.policy_.ClearToEmpty();
}
inline const std::string& Session::policy() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Session.policy)
  return _internal_policy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_policy(ArgT0&& arg0, ArgT... args) {
 
 _impl_.policy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Session.policy)
}
inline std::string* Session::mutable_policy() {
  std::string* _s = _internal_mutable_policy();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.Session.policy)
  return _s;
}
inline const std::string& Session::_internal_policy() const {
  return _impl_.policy_.Get();
}
inline void Session::_internal_set_policy(const std::string& value) {
  
  _impl_.policy_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_policy() {
  
  return _impl_.policy_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_policy() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.Session.policy)
  return _impl_.policy_.Release();
}
inline void Session::set_allocated_policy(std::string* policy) {
  if (policy != nullptr) {
    
  } else {
    
  }
  _impl_.policy_.SetAllocated(policy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.policy_.IsDefault()) {
    _impl_.policy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.Session.policy)
}

// uint32 lifetime = 3;
inline void Session::clear_lifetime() {
  _impl_.lifetime_ = 0u;
}
inline uint32_t Session::_internal_lifetime() const {
  return _impl_.lifetime_;
}
inline uint32_t Session::lifetime() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Session.lifetime)
  return _internal_lifetime();
}
inline void Session::_internal_set_lifetime(uint32_t value) {
  
  _impl_.lifetime_ = value;
}
inline void Session::set_lifetime(uint32_t value) {
  _internal_set_lifetime(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Session.lifetime)
}

// optional string description = 4;
inline bool Session::_internal_has_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Session::has_description() const {
  return _internal_has_description();
}
inline void Session::clear_description() {
  _impl_.description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Session::description() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Session.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Session.description)
}
inline std::string* Session::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.Session.description)
  return _s;
}
inline const std::string& Session::_internal_description() const {
  return _impl_.description_.Get();
}
inline void Session::_internal_set_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_description() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.Session.description)
  if (!_internal_has_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Session::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.Session.description)
}

// .com.wazuh.api.engine.tester.Sync policy_sync = 6;
inline void Session::clear_policy_sync() {
  _impl_.policy_sync_ = 0;
}
inline ::com::wazuh::api::engine::tester::Sync Session::_internal_policy_sync() const {
  return static_cast< ::com::wazuh::api::engine::tester::Sync >(_impl_.policy_sync_);
}
inline ::com::wazuh::api::engine::tester::Sync Session::policy_sync() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Session.policy_sync)
  return _internal_policy_sync();
}
inline void Session::_internal_set_policy_sync(::com::wazuh::api::engine::tester::Sync value) {
  
  _impl_.policy_sync_ = value;
}
inline void Session::set_policy_sync(::com::wazuh::api::engine::tester::Sync value) {
  _internal_set_policy_sync(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Session.policy_sync)
}

// .com.wazuh.api.engine.tester.State entry_status = 7;
inline void Session::clear_entry_status() {
  _impl_.entry_status_ = 0;
}
inline ::com::wazuh::api::engine::tester::State Session::_internal_entry_status() const {
  return static_cast< ::com::wazuh::api::engine::tester::State >(_impl_.entry_status_);
}
inline ::com::wazuh::api::engine::tester::State Session::entry_status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Session.entry_status)
  return _internal_entry_status();
}
inline void Session::_internal_set_entry_status(::com::wazuh::api::engine::tester::State value) {
  
  _impl_.entry_status_ = value;
}
inline void Session::set_entry_status(::com::wazuh::api::engine::tester::State value) {
  _internal_set_entry_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Session.entry_status)
}

// uint32 last_use = 8;
inline void Session::clear_last_use() {
  _impl_.last_use_ = 0u;
}
inline uint32_t Session::_internal_last_use() const {
  return _impl_.last_use_;
}
inline uint32_t Session::last_use() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Session.last_use)
  return _internal_last_use();
}
inline void Session::_internal_set_last_use(uint32_t value) {
  
  _impl_.last_use_ = value;
}
inline void Session::set_last_use(uint32_t value) {
  _internal_set_last_use(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Session.last_use)
}

// -------------------------------------------------------------------

// Result_AssetTrace

// string asset = 1;
inline void Result_AssetTrace::clear_asset() {
  _impl_.asset_.ClearToEmpty();
}
inline const std::string& Result_AssetTrace::asset() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Result.AssetTrace.asset)
  return _internal_asset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result_AssetTrace::set_asset(ArgT0&& arg0, ArgT... args) {
 
 _impl_.asset_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Result.AssetTrace.asset)
}
inline std::string* Result_AssetTrace::mutable_asset() {
  std::string* _s = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.Result.AssetTrace.asset)
  return _s;
}
inline const std::string& Result_AssetTrace::_internal_asset() const {
  return _impl_.asset_.Get();
}
inline void Result_AssetTrace::_internal_set_asset(const std::string& value) {
  
  _impl_.asset_.Set(value, GetArenaForAllocation());
}
inline std::string* Result_AssetTrace::_internal_mutable_asset() {
  
  return _impl_.asset_.Mutable(GetArenaForAllocation());
}
inline std::string* Result_AssetTrace::release_asset() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.Result.AssetTrace.asset)
  return _impl_.asset_.Release();
}
inline void Result_AssetTrace::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {
    
  } else {
    
  }
  _impl_.asset_.SetAllocated(asset, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.asset_.IsDefault()) {
    _impl_.asset_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.Result.AssetTrace.asset)
}

// bool success = 2;
inline void Result_AssetTrace::clear_success() {
  _impl_.success_ = false;
}
inline bool Result_AssetTrace::_internal_success() const {
  return _impl_.success_;
}
inline bool Result_AssetTrace::success() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Result.AssetTrace.success)
  return _internal_success();
}
inline void Result_AssetTrace::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void Result_AssetTrace::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Result.AssetTrace.success)
}

// repeated string traces = 3;
inline int Result_AssetTrace::_internal_traces_size() const {
  return _impl_.traces_.size();
}
inline int Result_AssetTrace::traces_size() const {
  return _internal_traces_size();
}
inline void Result_AssetTrace::clear_traces() {
  _impl_.traces_.Clear();
}
inline std::string* Result_AssetTrace::add_traces() {
  std::string* _s = _internal_add_traces();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
  return _s;
}
inline const std::string& Result_AssetTrace::_internal_traces(int index) const {
  return _impl_.traces_.Get(index);
}
inline const std::string& Result_AssetTrace::traces(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
  return _internal_traces(index);
}
inline std::string* Result_AssetTrace::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
  return _impl_.traces_.Mutable(index);
}
inline void Result_AssetTrace::set_traces(int index, const std::string& value) {
  _impl_.traces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline void Result_AssetTrace::set_traces(int index, std::string&& value) {
  _impl_.traces_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline void Result_AssetTrace::set_traces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.traces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline void Result_AssetTrace::set_traces(int index, const char* value, size_t size) {
  _impl_.traces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline std::string* Result_AssetTrace::_internal_add_traces() {
  return _impl_.traces_.Add();
}
inline void Result_AssetTrace::add_traces(const std::string& value) {
  _impl_.traces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline void Result_AssetTrace::add_traces(std::string&& value) {
  _impl_.traces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline void Result_AssetTrace::add_traces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.traces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline void Result_AssetTrace::add_traces(const char* value, size_t size) {
  _impl_.traces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Result_AssetTrace::traces() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
  return _impl_.traces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Result_AssetTrace::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.tester.Result.AssetTrace.traces)
  return &_impl_.traces_;
}

// -------------------------------------------------------------------

// Result

// string output = 1;
inline void Result::clear_output() {
  _impl_.output_.ClearToEmpty();
}
inline const std::string& Result::output() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Result.output)
  return _internal_output();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_output(ArgT0&& arg0, ArgT... args) {
 
 _impl_.output_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.Result.output)
}
inline std::string* Result::mutable_output() {
  std::string* _s = _internal_mutable_output();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.Result.output)
  return _s;
}
inline const std::string& Result::_internal_output() const {
  return _impl_.output_.Get();
}
inline void Result::_internal_set_output(const std::string& value) {
  
  _impl_.output_.Set(value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_output() {
  
  return _impl_.output_.Mutable(GetArenaForAllocation());
}
inline std::string* Result::release_output() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.Result.output)
  return _impl_.output_.Release();
}
inline void Result::set_allocated_output(std::string* output) {
  if (output != nullptr) {
    
  } else {
    
  }
  _impl_.output_.SetAllocated(output, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.output_.IsDefault()) {
    _impl_.output_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.Result.output)
}

// repeated .com.wazuh.api.engine.tester.Result.AssetTrace asset_traces = 2;
inline int Result::_internal_asset_traces_size() const {
  return _impl_.asset_traces_.size();
}
inline int Result::asset_traces_size() const {
  return _internal_asset_traces_size();
}
inline void Result::clear_asset_traces() {
  _impl_.asset_traces_.Clear();
}
inline ::com::wazuh::api::engine::tester::Result_AssetTrace* Result::mutable_asset_traces(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.Result.asset_traces)
  return _impl_.asset_traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Result_AssetTrace >*
Result::mutable_asset_traces() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.tester.Result.asset_traces)
  return &_impl_.asset_traces_;
}
inline const ::com::wazuh::api::engine::tester::Result_AssetTrace& Result::_internal_asset_traces(int index) const {
  return _impl_.asset_traces_.Get(index);
}
inline const ::com::wazuh::api::engine::tester::Result_AssetTrace& Result::asset_traces(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.Result.asset_traces)
  return _internal_asset_traces(index);
}
inline ::com::wazuh::api::engine::tester::Result_AssetTrace* Result::_internal_add_asset_traces() {
  return _impl_.asset_traces_.Add();
}
inline ::com::wazuh::api::engine::tester::Result_AssetTrace* Result::add_asset_traces() {
  ::com::wazuh::api::engine::tester::Result_AssetTrace* _add = _internal_add_asset_traces();
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.Result.asset_traces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Result_AssetTrace >&
Result::asset_traces() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.tester.Result.asset_traces)
  return _impl_.asset_traces_;
}

// -------------------------------------------------------------------

// SessionPost_Request

// optional .com.wazuh.api.engine.tester.SessionPost session = 1;
inline bool SessionPost_Request::_internal_has_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_ != nullptr);
  return value;
}
inline bool SessionPost_Request::has_session() const {
  return _internal_has_session();
}
inline void SessionPost_Request::clear_session() {
  if (_impl_.session_ != nullptr) _impl_.session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::wazuh::api::engine::tester::SessionPost& SessionPost_Request::_internal_session() const {
  const ::com::wazuh::api::engine::tester::SessionPost* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::tester::SessionPost&>(
      ::com::wazuh::api::engine::tester::_SessionPost_default_instance_);
}
inline const ::com::wazuh::api::engine::tester::SessionPost& SessionPost_Request::session() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionPost_Request.session)
  return _internal_session();
}
inline void SessionPost_Request::unsafe_arena_set_allocated_session(
    ::com::wazuh::api::engine::tester::SessionPost* session) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = session;
  if (session) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.tester.SessionPost_Request.session)
}
inline ::com::wazuh::api::engine::tester::SessionPost* SessionPost_Request::release_session() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::wazuh::api::engine::tester::SessionPost* temp = _impl_.session_;
  _impl_.session_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::tester::SessionPost* SessionPost_Request::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionPost_Request.session)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::wazuh::api::engine::tester::SessionPost* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::tester::SessionPost* SessionPost_Request::_internal_mutable_session() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.session_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::tester::SessionPost>(GetArenaForAllocation());
    _impl_.session_ = p;
  }
  return _impl_.session_;
}
inline ::com::wazuh::api::engine::tester::SessionPost* SessionPost_Request::mutable_session() {
  ::com::wazuh::api::engine::tester::SessionPost* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionPost_Request.session)
  return _msg;
}
inline void SessionPost_Request::set_allocated_session(::com::wazuh::api::engine::tester::SessionPost* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_ = session;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionPost_Request.session)
}

// -------------------------------------------------------------------

// SessionDelete_Request

// string name = 1;
inline void SessionDelete_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SessionDelete_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionDelete_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionDelete_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionDelete_Request.name)
}
inline std::string* SessionDelete_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionDelete_Request.name)
  return _s;
}
inline const std::string& SessionDelete_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SessionDelete_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionDelete_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionDelete_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionDelete_Request.name)
  return _impl_.name_.Release();
}
inline void SessionDelete_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionDelete_Request.name)
}

// -------------------------------------------------------------------

// SessionGet_Request

// string name = 1;
inline void SessionGet_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SessionGet_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionGet_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionGet_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionGet_Request.name)
}
inline std::string* SessionGet_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionGet_Request.name)
  return _s;
}
inline const std::string& SessionGet_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SessionGet_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionGet_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionGet_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionGet_Request.name)
  return _impl_.name_.Release();
}
inline void SessionGet_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionGet_Request.name)
}

// -------------------------------------------------------------------

// SessionGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void SessionGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus SessionGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus SessionGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionGet_Response.status)
  return _internal_status();
}
inline void SessionGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void SessionGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionGet_Response.status)
}

// optional string error = 2;
inline bool SessionGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SessionGet_Response::has_error() const {
  return _internal_has_error();
}
inline void SessionGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionGet_Response.error)
}
inline std::string* SessionGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionGet_Response.error)
  return _s;
}
inline const std::string& SessionGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void SessionGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SessionGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionGet_Response.error)
}

// optional .com.wazuh.api.engine.tester.Session session = 3;
inline bool SessionGet_Response::_internal_has_session() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.session_ != nullptr);
  return value;
}
inline bool SessionGet_Response::has_session() const {
  return _internal_has_session();
}
inline void SessionGet_Response::clear_session() {
  if (_impl_.session_ != nullptr) _impl_.session_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::tester::Session& SessionGet_Response::_internal_session() const {
  const ::com::wazuh::api::engine::tester::Session* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::tester::Session&>(
      ::com::wazuh::api::engine::tester::_Session_default_instance_);
}
inline const ::com::wazuh::api::engine::tester::Session& SessionGet_Response::session() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionGet_Response.session)
  return _internal_session();
}
inline void SessionGet_Response::unsafe_arena_set_allocated_session(
    ::com::wazuh::api::engine::tester::Session* session) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = session;
  if (session) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.tester.SessionGet_Response.session)
}
inline ::com::wazuh::api::engine::tester::Session* SessionGet_Response::release_session() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::tester::Session* temp = _impl_.session_;
  _impl_.session_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::tester::Session* SessionGet_Response::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionGet_Response.session)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::tester::Session* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::tester::Session* SessionGet_Response::_internal_mutable_session() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.session_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::tester::Session>(GetArenaForAllocation());
    _impl_.session_ = p;
  }
  return _impl_.session_;
}
inline ::com::wazuh::api::engine::tester::Session* SessionGet_Response::mutable_session() {
  ::com::wazuh::api::engine::tester::Session* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionGet_Response.session)
  return _msg;
}
inline void SessionGet_Response::set_allocated_session(::com::wazuh::api::engine::tester::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.session_ = session;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionGet_Response.session)
}

// -------------------------------------------------------------------

// SessionReload_Request

// string name = 1;
inline void SessionReload_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SessionReload_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.SessionReload_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SessionReload_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.SessionReload_Request.name)
}
inline std::string* SessionReload_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.SessionReload_Request.name)
  return _s;
}
inline const std::string& SessionReload_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void SessionReload_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionReload_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* SessionReload_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.SessionReload_Request.name)
  return _impl_.name_.Release();
}
inline void SessionReload_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.SessionReload_Request.name)
}

// -------------------------------------------------------------------

// TableGet_Request

// -------------------------------------------------------------------

// TableGet_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void TableGet_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus TableGet_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus TableGet_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.TableGet_Response.status)
  return _internal_status();
}
inline void TableGet_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void TableGet_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.TableGet_Response.status)
}

// optional string error = 2;
inline bool TableGet_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TableGet_Response::has_error() const {
  return _internal_has_error();
}
inline void TableGet_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TableGet_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.TableGet_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TableGet_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.TableGet_Response.error)
}
inline std::string* TableGet_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.TableGet_Response.error)
  return _s;
}
inline const std::string& TableGet_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void TableGet_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* TableGet_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* TableGet_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.TableGet_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TableGet_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.TableGet_Response.error)
}

// repeated .com.wazuh.api.engine.tester.Session sessions = 3;
inline int TableGet_Response::_internal_sessions_size() const {
  return _impl_.sessions_.size();
}
inline int TableGet_Response::sessions_size() const {
  return _internal_sessions_size();
}
inline void TableGet_Response::clear_sessions() {
  _impl_.sessions_.Clear();
}
inline ::com::wazuh::api::engine::tester::Session* TableGet_Response::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.TableGet_Response.sessions)
  return _impl_.sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Session >*
TableGet_Response::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.tester.TableGet_Response.sessions)
  return &_impl_.sessions_;
}
inline const ::com::wazuh::api::engine::tester::Session& TableGet_Response::_internal_sessions(int index) const {
  return _impl_.sessions_.Get(index);
}
inline const ::com::wazuh::api::engine::tester::Session& TableGet_Response::sessions(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.TableGet_Response.sessions)
  return _internal_sessions(index);
}
inline ::com::wazuh::api::engine::tester::Session* TableGet_Response::_internal_add_sessions() {
  return _impl_.sessions_.Add();
}
inline ::com::wazuh::api::engine::tester::Session* TableGet_Response::add_sessions() {
  ::com::wazuh::api::engine::tester::Session* _add = _internal_add_sessions();
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.TableGet_Response.sessions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::wazuh::api::engine::tester::Session >&
TableGet_Response::sessions() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.tester.TableGet_Response.sessions)
  return _impl_.sessions_;
}

// -------------------------------------------------------------------

// RunPost_Request

// string name = 1;
inline void RunPost_Request::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RunPost_Request::name() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Request.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Request::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.name)
}
inline std::string* RunPost_Request::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Request.name)
  return _s;
}
inline const std::string& RunPost_Request::_internal_name() const {
  return _impl_.name_.Get();
}
inline void RunPost_Request::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Request::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Request::release_name() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.RunPost_Request.name)
  return _impl_.name_.Release();
}
inline void RunPost_Request::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.RunPost_Request.name)
}

// string message = 2;
inline void RunPost_Request::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& RunPost_Request::message() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Request.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Request::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.message)
}
inline std::string* RunPost_Request::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Request.message)
  return _s;
}
inline const std::string& RunPost_Request::_internal_message() const {
  return _impl_.message_.Get();
}
inline void RunPost_Request::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Request::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Request::release_message() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.RunPost_Request.message)
  return _impl_.message_.Release();
}
inline void RunPost_Request::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.RunPost_Request.message)
}

// string location = 3;
inline void RunPost_Request::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& RunPost_Request::location() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Request.location)
  return _internal_location();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Request::set_location(ArgT0&& arg0, ArgT... args) {
 
 _impl_.location_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.location)
}
inline std::string* RunPost_Request::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Request.location)
  return _s;
}
inline const std::string& RunPost_Request::_internal_location() const {
  return _impl_.location_.Get();
}
inline void RunPost_Request::_internal_set_location(const std::string& value) {
  
  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Request::_internal_mutable_location() {
  
  return _impl_.location_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Request::release_location() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.RunPost_Request.location)
  return _impl_.location_.Release();
}
inline void RunPost_Request::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  _impl_.location_.SetAllocated(location, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.location_.IsDefault()) {
    _impl_.location_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.RunPost_Request.location)
}

// string queue = 4;
inline void RunPost_Request::clear_queue() {
  _impl_.queue_.ClearToEmpty();
}
inline const std::string& RunPost_Request::queue() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Request.queue)
  return _internal_queue();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Request::set_queue(ArgT0&& arg0, ArgT... args) {
 
 _impl_.queue_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.queue)
}
inline std::string* RunPost_Request::mutable_queue() {
  std::string* _s = _internal_mutable_queue();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Request.queue)
  return _s;
}
inline const std::string& RunPost_Request::_internal_queue() const {
  return _impl_.queue_.Get();
}
inline void RunPost_Request::_internal_set_queue(const std::string& value) {
  
  _impl_.queue_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Request::_internal_mutable_queue() {
  
  return _impl_.queue_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Request::release_queue() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.RunPost_Request.queue)
  return _impl_.queue_.Release();
}
inline void RunPost_Request::set_allocated_queue(std::string* queue) {
  if (queue != nullptr) {
    
  } else {
    
  }
  _impl_.queue_.SetAllocated(queue, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.queue_.IsDefault()) {
    _impl_.queue_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.RunPost_Request.queue)
}

// .com.wazuh.api.engine.tester.TraceLevel trace_level = 5;
inline void RunPost_Request::clear_trace_level() {
  _impl_.trace_level_ = 0;
}
inline ::com::wazuh::api::engine::tester::TraceLevel RunPost_Request::_internal_trace_level() const {
  return static_cast< ::com::wazuh::api::engine::tester::TraceLevel >(_impl_.trace_level_);
}
inline ::com::wazuh::api::engine::tester::TraceLevel RunPost_Request::trace_level() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Request.trace_level)
  return _internal_trace_level();
}
inline void RunPost_Request::_internal_set_trace_level(::com::wazuh::api::engine::tester::TraceLevel value) {
  
  _impl_.trace_level_ = value;
}
inline void RunPost_Request::set_trace_level(::com::wazuh::api::engine::tester::TraceLevel value) {
  _internal_set_trace_level(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.trace_level)
}

// repeated string asset_trace = 6;
inline int RunPost_Request::_internal_asset_trace_size() const {
  return _impl_.asset_trace_.size();
}
inline int RunPost_Request::asset_trace_size() const {
  return _internal_asset_trace_size();
}
inline void RunPost_Request::clear_asset_trace() {
  _impl_.asset_trace_.Clear();
}
inline std::string* RunPost_Request::add_asset_trace() {
  std::string* _s = _internal_add_asset_trace();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
  return _s;
}
inline const std::string& RunPost_Request::_internal_asset_trace(int index) const {
  return _impl_.asset_trace_.Get(index);
}
inline const std::string& RunPost_Request::asset_trace(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
  return _internal_asset_trace(index);
}
inline std::string* RunPost_Request::mutable_asset_trace(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
  return _impl_.asset_trace_.Mutable(index);
}
inline void RunPost_Request::set_asset_trace(int index, const std::string& value) {
  _impl_.asset_trace_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline void RunPost_Request::set_asset_trace(int index, std::string&& value) {
  _impl_.asset_trace_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline void RunPost_Request::set_asset_trace(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.asset_trace_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline void RunPost_Request::set_asset_trace(int index, const char* value, size_t size) {
  _impl_.asset_trace_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline std::string* RunPost_Request::_internal_add_asset_trace() {
  return _impl_.asset_trace_.Add();
}
inline void RunPost_Request::add_asset_trace(const std::string& value) {
  _impl_.asset_trace_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline void RunPost_Request::add_asset_trace(std::string&& value) {
  _impl_.asset_trace_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline void RunPost_Request::add_asset_trace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.asset_trace_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline void RunPost_Request::add_asset_trace(const char* value, size_t size) {
  _impl_.asset_trace_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunPost_Request::asset_trace() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
  return _impl_.asset_trace_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunPost_Request::mutable_asset_trace() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.tester.RunPost_Request.asset_trace)
  return &_impl_.asset_trace_;
}

// repeated string namespaces = 7;
inline int RunPost_Request::_internal_namespaces_size() const {
  return _impl_.namespaces_.size();
}
inline int RunPost_Request::namespaces_size() const {
  return _internal_namespaces_size();
}
inline void RunPost_Request::clear_namespaces() {
  _impl_.namespaces_.Clear();
}
inline std::string* RunPost_Request::add_namespaces() {
  std::string* _s = _internal_add_namespaces();
  // @@protoc_insertion_point(field_add_mutable:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
  return _s;
}
inline const std::string& RunPost_Request::_internal_namespaces(int index) const {
  return _impl_.namespaces_.Get(index);
}
inline const std::string& RunPost_Request::namespaces(int index) const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
  return _internal_namespaces(index);
}
inline std::string* RunPost_Request::mutable_namespaces(int index) {
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
  return _impl_.namespaces_.Mutable(index);
}
inline void RunPost_Request::set_namespaces(int index, const std::string& value) {
  _impl_.namespaces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline void RunPost_Request::set_namespaces(int index, std::string&& value) {
  _impl_.namespaces_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline void RunPost_Request::set_namespaces(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.namespaces_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline void RunPost_Request::set_namespaces(int index, const char* value, size_t size) {
  _impl_.namespaces_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline std::string* RunPost_Request::_internal_add_namespaces() {
  return _impl_.namespaces_.Add();
}
inline void RunPost_Request::add_namespaces(const std::string& value) {
  _impl_.namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline void RunPost_Request::add_namespaces(std::string&& value) {
  _impl_.namespaces_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline void RunPost_Request::add_namespaces(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.namespaces_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline void RunPost_Request::add_namespaces(const char* value, size_t size) {
  _impl_.namespaces_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunPost_Request::namespaces() const {
  // @@protoc_insertion_point(field_list:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
  return _impl_.namespaces_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunPost_Request::mutable_namespaces() {
  // @@protoc_insertion_point(field_mutable_list:com.wazuh.api.engine.tester.RunPost_Request.namespaces)
  return &_impl_.namespaces_;
}

// -------------------------------------------------------------------

// RunPost_Response

// .com.wazuh.api.engine.ReturnStatus status = 1;
inline void RunPost_Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::com::wazuh::api::engine::ReturnStatus RunPost_Response::_internal_status() const {
  return static_cast< ::com::wazuh::api::engine::ReturnStatus >(_impl_.status_);
}
inline ::com::wazuh::api::engine::ReturnStatus RunPost_Response::status() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Response.status)
  return _internal_status();
}
inline void RunPost_Response::_internal_set_status(::com::wazuh::api::engine::ReturnStatus value) {
  
  _impl_.status_ = value;
}
inline void RunPost_Response::set_status(::com::wazuh::api::engine::ReturnStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Response.status)
}

// optional string error = 2;
inline bool RunPost_Response::_internal_has_error() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RunPost_Response::has_error() const {
  return _internal_has_error();
}
inline void RunPost_Response::clear_error() {
  _impl_.error_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RunPost_Response::error() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Response.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunPost_Response::set_error(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.error_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.wazuh.api.engine.tester.RunPost_Response.error)
}
inline std::string* RunPost_Response::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Response.error)
  return _s;
}
inline const std::string& RunPost_Response::_internal_error() const {
  return _impl_.error_.Get();
}
inline void RunPost_Response::_internal_set_error(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_.Set(value, GetArenaForAllocation());
}
inline std::string* RunPost_Response::_internal_mutable_error() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_.Mutable(GetArenaForAllocation());
}
inline std::string* RunPost_Response::release_error() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.RunPost_Response.error)
  if (!_internal_has_error()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.error_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RunPost_Response::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_.SetAllocated(error, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.error_.IsDefault()) {
    _impl_.error_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.RunPost_Response.error)
}

// optional .com.wazuh.api.engine.tester.Result result = 3;
inline bool RunPost_Response::_internal_has_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.result_ != nullptr);
  return value;
}
inline bool RunPost_Response::has_result() const {
  return _internal_has_result();
}
inline void RunPost_Response::clear_result() {
  if (_impl_.result_ != nullptr) _impl_.result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::wazuh::api::engine::tester::Result& RunPost_Response::_internal_result() const {
  const ::com::wazuh::api::engine::tester::Result* p = _impl_.result_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::wazuh::api::engine::tester::Result&>(
      ::com::wazuh::api::engine::tester::_Result_default_instance_);
}
inline const ::com::wazuh::api::engine::tester::Result& RunPost_Response::result() const {
  // @@protoc_insertion_point(field_get:com.wazuh.api.engine.tester.RunPost_Response.result)
  return _internal_result();
}
inline void RunPost_Response::unsafe_arena_set_allocated_result(
    ::com::wazuh::api::engine::tester::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.result_);
  }
  _impl_.result_ = result;
  if (result) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.wazuh.api.engine.tester.RunPost_Response.result)
}
inline ::com::wazuh::api::engine::tester::Result* RunPost_Response::release_result() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::tester::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::wazuh::api::engine::tester::Result* RunPost_Response::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:com.wazuh.api.engine.tester.RunPost_Response.result)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::wazuh::api::engine::tester::Result* temp = _impl_.result_;
  _impl_.result_ = nullptr;
  return temp;
}
inline ::com::wazuh::api::engine::tester::Result* RunPost_Response::_internal_mutable_result() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.result_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::wazuh::api::engine::tester::Result>(GetArenaForAllocation());
    _impl_.result_ = p;
  }
  return _impl_.result_;
}
inline ::com::wazuh::api::engine::tester::Result* RunPost_Response::mutable_result() {
  ::com::wazuh::api::engine::tester::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:com.wazuh.api.engine.tester.RunPost_Response.result)
  return _msg;
}
inline void RunPost_Response::set_allocated_result(::com::wazuh::api::engine::tester::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.result_ = result;
  // @@protoc_insertion_point(field_set_allocated:com.wazuh.api.engine.tester.RunPost_Response.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tester
}  // namespace engine
}  // namespace api
}  // namespace wazuh
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::wazuh::api::engine::tester::State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::tester::State>() {
  return ::com::wazuh::api::engine::tester::State_descriptor();
}
template <> struct is_proto_enum< ::com::wazuh::api::engine::tester::Sync> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::tester::Sync>() {
  return ::com::wazuh::api::engine::tester::Sync_descriptor();
}
template <> struct is_proto_enum< ::com::wazuh::api::engine::tester::TraceLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::wazuh::api::engine::tester::TraceLevel>() {
  return ::com::wazuh::api::engine::tester::TraceLevel_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tester_2eproto
