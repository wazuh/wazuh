syntax = "proto3";

import "engine.proto";

package com.wazuh.api.engine.policy;

// Store of policy handlers

/***************************************************
 * Create a new empty policy in the store.
 *
 * command: policy.store/post
 **************************************************/
message StorePost_Request
{
    optional string policy = 1; // Policy name
}

// message PolicyPost_Response -> Return a GenericStatus_Response

/***************************************************
 * Delete a policy from the store
 *
 * command: policy.store/delete
 **************************************************/
message StoreDelete_Request
{
    optional string policy = 1; // Policy name
}

// message PolicyDelete_Response -> Return a GenericStatus_Response

/***************************************************
 * Get a policy from the store
 *
 * TODO: We need the full policy for debugging purposes?
 * Return the full policy from the store
 * command: policy.store/get
 **************************************************/
message StoreGet_Request
{
    optional string policy = 1;     // Policy name
    repeated string namespaces = 2; // List of namespaces to filter in the policy (optional)
}

message StoreGet_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    optional string data = 3;  // TODO: Separate data after define the policy structure
}

// Specific policy handlers
/***************************************************
 * Add a new asset to a policy
 *
 * command: policy.asset/post
 **************************************************/
message AssetPost_Request
{
    optional string policy = 1;    // Policy name
    optional string asset = 2;     // Asset name
    optional string namespace = 3; // Namespace of the asset
}

message AssetPost_Response
{
    ReturnStatus status = 1;     // Status of the query
    optional string error = 2;   // Error message if status is ERROR
    optional string warning = 3; // Warning message if validation errors
}

/***************************************************
 * Delete an asset from a policy
 *
 * command: policy.asset/delete
 **************************************************/
message AssetDelete_Request
{
    optional string policy = 1;    // Policy name
    optional string asset = 2;     // Asset name
    optional string namespace = 3; // Namespace of the asset
}

message AssetDelete_Response
{
    ReturnStatus status = 1;     // Status of the query
    optional string error = 2;   // Error message if status is ERROR
    optional string warning = 3; // Warning message if validation errors
}

/***************************************************
 * Get all assets of a namespace in a policy
 *
 * command: policy.asset/get
 **************************************************/
message AssetGet_Request
{
    optional string policy = 1;    // Policy name
    optional string namespace = 2; // Namespace of the assets
}

message AssetGet_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    repeated string data = 3;  // List of assets
}

/***************************************************
 * Delete assets from policy that are deleted from the catalog
 *
 * command: policy.asset/cleanDeleted
 **************************************************/
message AssetCleanDeleted_Request
{
    optional string policy = 1; // Policy name
}

message AssetCleanDeleted_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    optional string data = 3;  // Assets deleted and validation errors
}

/***************************************************
 * Get default parent of a namespace in a policy
 *
 * command: policy.defaultparent/get
 **************************************************/
message DefaultParentGet_Request
{
    optional string policy = 1;    // Policy name
    optional string namespace = 2; // Namespace of the assets
}

message DefaultParentGet_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    repeated string data = 3;  // Default parent of the namespace
}

/***************************************************
 * Set default parent of a namespace in a policy
 *
 * command: policy.defaultparent/post
 **************************************************/
message DefaultParentPost_Request
{
    optional string policy = 1;    // Policy name
    optional string namespace = 2; // Namespace of the assets
    optional string parent = 3;    // Default parent of the namespace
}

message DefaultParentPost_Response
{
    ReturnStatus status = 1;     // Status of the query
    optional string error = 2;   // Error message if status is ERROR
    optional string warning = 3; // Warning message if validation errors
}

/***************************************************
 * Delete default parent of a namespace in a policy
 *
 * command: policy.defaultparent/delete
 **************************************************/
message DefaultParentDelete_Request
{
    optional string policy = 1;    // Policy name
    optional string namespace = 2; // Namespace of the assets
    optional string parent = 3;    // Default parent of the namespace
}

message DefaultParentDelete_Response
{
    ReturnStatus status = 1;     // Status of the query
    optional string error = 2;   // Error message if status is ERROR
    optional string warning = 3; // Warning message if validation errors
}

/***************************************************
 * Get all policies in the store
 *
 * command: policy.policies/get
 **************************************************/
message PoliciesGet_Request {}

message PoliciesGet_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    repeated string data = 3;  // List of policies
}

/***************************************************
 * Get all policies in the store
 *
 * command: policy.namespaces/get
 **************************************************/
message NamespacesGet_Request
{
    optional string policy = 1; // Policy name
}

message NamespacesGet_Response
{
    ReturnStatus status = 1;   // Status of the query
    optional string error = 2; // Error message if status is ERROR
    repeated string data = 3;  // List of namespaces
}
