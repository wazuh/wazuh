// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VULNERABILITYREMEDIATIONS_NSVULNERABILITYSCANNER_H_
#define FLATBUFFERS_GENERATED_VULNERABILITYREMEDIATIONS_NSVULNERABILITYSCANNER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace NSVulnerabilityScanner {

struct RemediationInfo;
struct RemediationInfoBuilder;

struct RemediationInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RemediationInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_UPDATES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *updates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_UPDATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_UPDATES) &&
           verifier.VerifyVector(updates()) &&
           verifier.VerifyVectorOfStrings(updates()) &&
           verifier.EndTable();
  }
};

struct RemediationInfoBuilder {
  typedef RemediationInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_updates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> updates) {
    fbb_.AddOffset(RemediationInfo::VT_UPDATES, updates);
  }
  explicit RemediationInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RemediationInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RemediationInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RemediationInfo> CreateRemediationInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> updates = 0) {
  RemediationInfoBuilder builder_(_fbb);
  builder_.add_updates(updates);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RemediationInfo> CreateRemediationInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *updates = nullptr) {
  auto updates__ = updates ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*updates) : 0;
  return NSVulnerabilityScanner::CreateRemediationInfo(
      _fbb,
      updates__);
}

inline const NSVulnerabilityScanner::RemediationInfo *GetRemediationInfo(const void *buf) {
  return ::flatbuffers::GetRoot<NSVulnerabilityScanner::RemediationInfo>(buf);
}

inline const NSVulnerabilityScanner::RemediationInfo *GetSizePrefixedRemediationInfo(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NSVulnerabilityScanner::RemediationInfo>(buf);
}

inline bool VerifyRemediationInfoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NSVulnerabilityScanner::RemediationInfo>(nullptr);
}

inline bool VerifySizePrefixedRemediationInfoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NSVulnerabilityScanner::RemediationInfo>(nullptr);
}

inline void FinishRemediationInfoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NSVulnerabilityScanner::RemediationInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRemediationInfoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NSVulnerabilityScanner::RemediationInfo> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace NSVulnerabilityScanner

#endif  // FLATBUFFERS_GENERATED_VULNERABILITYREMEDIATIONS_NSVULNERABILITYSCANNER_H_
