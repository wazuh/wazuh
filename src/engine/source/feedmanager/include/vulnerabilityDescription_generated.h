// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VULNERABILITYDESCRIPTION_NSVULNERABILITYSCANNER_H_
#define FLATBUFFERS_GENERATED_VULNERABILITYDESCRIPTION_NSVULNERABILITYSCANNER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace NSVulnerabilityScanner {

struct VulnerabilityDescription;
struct VulnerabilityDescriptionBuilder;

struct VulnerabilityDescription FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VulnerabilityDescriptionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ACCESSCOMPLEXITY = 4,
    VT_ASSIGNERSHORTNAME = 6,
    VT_ATTACKVECTOR = 8,
    VT_AUTHENTICATION = 10,
    VT_AVAILABILITYIMPACT = 12,
    VT_CLASSIFICATION = 14,
    VT_CONFIDENTIALITYIMPACT = 16,
    VT_CWEID = 18,
    VT_DATEPUBLISHED = 20,
    VT_DATEUPDATED = 22,
    VT_DESCRIPTION = 24,
    VT_INTEGRITYIMPACT = 26,
    VT_PRIVILEGESREQUIRED = 28,
    VT_REFERENCE = 30,
    VT_SCOPE = 32,
    VT_SCOREBASE = 34,
    VT_SCOREVERSION = 36,
    VT_SEVERITY = 38,
    VT_USERINTERACTION = 40
  };
  const ::flatbuffers::String *accessComplexity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCESSCOMPLEXITY);
  }
  const ::flatbuffers::String *assignerShortName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASSIGNERSHORTNAME);
  }
  const ::flatbuffers::String *attackVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATTACKVECTOR);
  }
  const ::flatbuffers::String *authentication() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTHENTICATION);
  }
  const ::flatbuffers::String *availabilityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AVAILABILITYIMPACT);
  }
  const ::flatbuffers::String *classification() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CLASSIFICATION);
  }
  const ::flatbuffers::String *confidentialityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENTIALITYIMPACT);
  }
  const ::flatbuffers::String *cweId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CWEID);
  }
  const ::flatbuffers::String *datePublished() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEPUBLISHED);
  }
  const ::flatbuffers::String *dateUpdated() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEUPDATED);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  const ::flatbuffers::String *integrityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRITYIMPACT);
  }
  const ::flatbuffers::String *privilegesRequired() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIVILEGESREQUIRED);
  }
  const ::flatbuffers::String *reference() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REFERENCE);
  }
  const ::flatbuffers::String *scope() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCOPE);
  }
  float scoreBase() const {
    return GetField<float>(VT_SCOREBASE, 0.0f);
  }
  const ::flatbuffers::String *scoreVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCOREVERSION);
  }
  const ::flatbuffers::String *severity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SEVERITY);
  }
  const ::flatbuffers::String *userInteraction() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERINTERACTION);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ACCESSCOMPLEXITY) &&
           verifier.VerifyString(accessComplexity()) &&
           VerifyOffset(verifier, VT_ASSIGNERSHORTNAME) &&
           verifier.VerifyString(assignerShortName()) &&
           VerifyOffset(verifier, VT_ATTACKVECTOR) &&
           verifier.VerifyString(attackVector()) &&
           VerifyOffset(verifier, VT_AUTHENTICATION) &&
           verifier.VerifyString(authentication()) &&
           VerifyOffset(verifier, VT_AVAILABILITYIMPACT) &&
           verifier.VerifyString(availabilityImpact()) &&
           VerifyOffset(verifier, VT_CLASSIFICATION) &&
           verifier.VerifyString(classification()) &&
           VerifyOffset(verifier, VT_CONFIDENTIALITYIMPACT) &&
           verifier.VerifyString(confidentialityImpact()) &&
           VerifyOffset(verifier, VT_CWEID) &&
           verifier.VerifyString(cweId()) &&
           VerifyOffset(verifier, VT_DATEPUBLISHED) &&
           verifier.VerifyString(datePublished()) &&
           VerifyOffset(verifier, VT_DATEUPDATED) &&
           verifier.VerifyString(dateUpdated()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_INTEGRITYIMPACT) &&
           verifier.VerifyString(integrityImpact()) &&
           VerifyOffset(verifier, VT_PRIVILEGESREQUIRED) &&
           verifier.VerifyString(privilegesRequired()) &&
           VerifyOffset(verifier, VT_REFERENCE) &&
           verifier.VerifyString(reference()) &&
           VerifyOffset(verifier, VT_SCOPE) &&
           verifier.VerifyString(scope()) &&
           VerifyField<float>(verifier, VT_SCOREBASE, 4) &&
           VerifyOffset(verifier, VT_SCOREVERSION) &&
           verifier.VerifyString(scoreVersion()) &&
           VerifyOffset(verifier, VT_SEVERITY) &&
           verifier.VerifyString(severity()) &&
           VerifyOffset(verifier, VT_USERINTERACTION) &&
           verifier.VerifyString(userInteraction()) &&
           verifier.EndTable();
  }
};

struct VulnerabilityDescriptionBuilder {
  typedef VulnerabilityDescription Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_accessComplexity(::flatbuffers::Offset<::flatbuffers::String> accessComplexity) {
    fbb_.AddOffset(VulnerabilityDescription::VT_ACCESSCOMPLEXITY, accessComplexity);
  }
  void add_assignerShortName(::flatbuffers::Offset<::flatbuffers::String> assignerShortName) {
    fbb_.AddOffset(VulnerabilityDescription::VT_ASSIGNERSHORTNAME, assignerShortName);
  }
  void add_attackVector(::flatbuffers::Offset<::flatbuffers::String> attackVector) {
    fbb_.AddOffset(VulnerabilityDescription::VT_ATTACKVECTOR, attackVector);
  }
  void add_authentication(::flatbuffers::Offset<::flatbuffers::String> authentication) {
    fbb_.AddOffset(VulnerabilityDescription::VT_AUTHENTICATION, authentication);
  }
  void add_availabilityImpact(::flatbuffers::Offset<::flatbuffers::String> availabilityImpact) {
    fbb_.AddOffset(VulnerabilityDescription::VT_AVAILABILITYIMPACT, availabilityImpact);
  }
  void add_classification(::flatbuffers::Offset<::flatbuffers::String> classification) {
    fbb_.AddOffset(VulnerabilityDescription::VT_CLASSIFICATION, classification);
  }
  void add_confidentialityImpact(::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact) {
    fbb_.AddOffset(VulnerabilityDescription::VT_CONFIDENTIALITYIMPACT, confidentialityImpact);
  }
  void add_cweId(::flatbuffers::Offset<::flatbuffers::String> cweId) {
    fbb_.AddOffset(VulnerabilityDescription::VT_CWEID, cweId);
  }
  void add_datePublished(::flatbuffers::Offset<::flatbuffers::String> datePublished) {
    fbb_.AddOffset(VulnerabilityDescription::VT_DATEPUBLISHED, datePublished);
  }
  void add_dateUpdated(::flatbuffers::Offset<::flatbuffers::String> dateUpdated) {
    fbb_.AddOffset(VulnerabilityDescription::VT_DATEUPDATED, dateUpdated);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(VulnerabilityDescription::VT_DESCRIPTION, description);
  }
  void add_integrityImpact(::flatbuffers::Offset<::flatbuffers::String> integrityImpact) {
    fbb_.AddOffset(VulnerabilityDescription::VT_INTEGRITYIMPACT, integrityImpact);
  }
  void add_privilegesRequired(::flatbuffers::Offset<::flatbuffers::String> privilegesRequired) {
    fbb_.AddOffset(VulnerabilityDescription::VT_PRIVILEGESREQUIRED, privilegesRequired);
  }
  void add_reference(::flatbuffers::Offset<::flatbuffers::String> reference) {
    fbb_.AddOffset(VulnerabilityDescription::VT_REFERENCE, reference);
  }
  void add_scope(::flatbuffers::Offset<::flatbuffers::String> scope) {
    fbb_.AddOffset(VulnerabilityDescription::VT_SCOPE, scope);
  }
  void add_scoreBase(float scoreBase) {
    fbb_.AddElement<float>(VulnerabilityDescription::VT_SCOREBASE, scoreBase, 0.0f);
  }
  void add_scoreVersion(::flatbuffers::Offset<::flatbuffers::String> scoreVersion) {
    fbb_.AddOffset(VulnerabilityDescription::VT_SCOREVERSION, scoreVersion);
  }
  void add_severity(::flatbuffers::Offset<::flatbuffers::String> severity) {
    fbb_.AddOffset(VulnerabilityDescription::VT_SEVERITY, severity);
  }
  void add_userInteraction(::flatbuffers::Offset<::flatbuffers::String> userInteraction) {
    fbb_.AddOffset(VulnerabilityDescription::VT_USERINTERACTION, userInteraction);
  }
  explicit VulnerabilityDescriptionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VulnerabilityDescription> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VulnerabilityDescription>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VulnerabilityDescription> CreateVulnerabilityDescription(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> accessComplexity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> assignerShortName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> attackVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> authentication = 0,
    ::flatbuffers::Offset<::flatbuffers::String> availabilityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> classification = 0,
    ::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cweId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> datePublished = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dateUpdated = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> integrityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> privilegesRequired = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reference = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scope = 0,
    float scoreBase = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> scoreVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::String> severity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> userInteraction = 0) {
  VulnerabilityDescriptionBuilder builder_(_fbb);
  builder_.add_userInteraction(userInteraction);
  builder_.add_severity(severity);
  builder_.add_scoreVersion(scoreVersion);
  builder_.add_scoreBase(scoreBase);
  builder_.add_scope(scope);
  builder_.add_reference(reference);
  builder_.add_privilegesRequired(privilegesRequired);
  builder_.add_integrityImpact(integrityImpact);
  builder_.add_description(description);
  builder_.add_dateUpdated(dateUpdated);
  builder_.add_datePublished(datePublished);
  builder_.add_cweId(cweId);
  builder_.add_confidentialityImpact(confidentialityImpact);
  builder_.add_classification(classification);
  builder_.add_availabilityImpact(availabilityImpact);
  builder_.add_authentication(authentication);
  builder_.add_attackVector(attackVector);
  builder_.add_assignerShortName(assignerShortName);
  builder_.add_accessComplexity(accessComplexity);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<VulnerabilityDescription> CreateVulnerabilityDescriptionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *accessComplexity = nullptr,
    const char *assignerShortName = nullptr,
    const char *attackVector = nullptr,
    const char *authentication = nullptr,
    const char *availabilityImpact = nullptr,
    const char *classification = nullptr,
    const char *confidentialityImpact = nullptr,
    const char *cweId = nullptr,
    const char *datePublished = nullptr,
    const char *dateUpdated = nullptr,
    const char *description = nullptr,
    const char *integrityImpact = nullptr,
    const char *privilegesRequired = nullptr,
    const char *reference = nullptr,
    const char *scope = nullptr,
    float scoreBase = 0.0f,
    const char *scoreVersion = nullptr,
    const char *severity = nullptr,
    const char *userInteraction = nullptr) {
  auto accessComplexity__ = accessComplexity ? _fbb.CreateString(accessComplexity) : 0;
  auto assignerShortName__ = assignerShortName ? _fbb.CreateString(assignerShortName) : 0;
  auto attackVector__ = attackVector ? _fbb.CreateString(attackVector) : 0;
  auto authentication__ = authentication ? _fbb.CreateString(authentication) : 0;
  auto availabilityImpact__ = availabilityImpact ? _fbb.CreateString(availabilityImpact) : 0;
  auto classification__ = classification ? _fbb.CreateString(classification) : 0;
  auto confidentialityImpact__ = confidentialityImpact ? _fbb.CreateString(confidentialityImpact) : 0;
  auto cweId__ = cweId ? _fbb.CreateString(cweId) : 0;
  auto datePublished__ = datePublished ? _fbb.CreateString(datePublished) : 0;
  auto dateUpdated__ = dateUpdated ? _fbb.CreateString(dateUpdated) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto integrityImpact__ = integrityImpact ? _fbb.CreateString(integrityImpact) : 0;
  auto privilegesRequired__ = privilegesRequired ? _fbb.CreateString(privilegesRequired) : 0;
  auto reference__ = reference ? _fbb.CreateString(reference) : 0;
  auto scope__ = scope ? _fbb.CreateString(scope) : 0;
  auto scoreVersion__ = scoreVersion ? _fbb.CreateString(scoreVersion) : 0;
  auto severity__ = severity ? _fbb.CreateString(severity) : 0;
  auto userInteraction__ = userInteraction ? _fbb.CreateString(userInteraction) : 0;
  return NSVulnerabilityScanner::CreateVulnerabilityDescription(
      _fbb,
      accessComplexity__,
      assignerShortName__,
      attackVector__,
      authentication__,
      availabilityImpact__,
      classification__,
      confidentialityImpact__,
      cweId__,
      datePublished__,
      dateUpdated__,
      description__,
      integrityImpact__,
      privilegesRequired__,
      reference__,
      scope__,
      scoreBase,
      scoreVersion__,
      severity__,
      userInteraction__);
}

inline const NSVulnerabilityScanner::VulnerabilityDescription *GetVulnerabilityDescription(const void *buf) {
  return ::flatbuffers::GetRoot<NSVulnerabilityScanner::VulnerabilityDescription>(buf);
}

inline const NSVulnerabilityScanner::VulnerabilityDescription *GetSizePrefixedVulnerabilityDescription(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NSVulnerabilityScanner::VulnerabilityDescription>(buf);
}

inline bool VerifyVulnerabilityDescriptionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NSVulnerabilityScanner::VulnerabilityDescription>(nullptr);
}

inline bool VerifySizePrefixedVulnerabilityDescriptionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NSVulnerabilityScanner::VulnerabilityDescription>(nullptr);
}

inline void FinishVulnerabilityDescriptionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NSVulnerabilityScanner::VulnerabilityDescription> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedVulnerabilityDescriptionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NSVulnerabilityScanner::VulnerabilityDescription> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace NSVulnerabilityScanner

#endif  // FLATBUFFERS_GENERATED_VULNERABILITYDESCRIPTION_NSVULNERABILITYSCANNER_H_
