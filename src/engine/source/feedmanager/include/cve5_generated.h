// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CVE5_CVE_V5_H_
#define FLATBUFFERS_GENERATED_CVE5_CVE_V5_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace cve_v5 {

struct CVSS_V3_1;
struct CVSS_V3_1Builder;

struct CVSS_V3_0;
struct CVSS_V3_0Builder;

struct CVSS_V2_0;
struct CVSS_V2_0Builder;

struct StringifiedObject;
struct StringifiedObjectBuilder;

struct SupportingMedia;
struct SupportingMediaBuilder;

struct Description;
struct DescriptionBuilder;

struct Change;
struct ChangeBuilder;

struct Version;
struct VersionBuilder;

struct ProgramRoutine;
struct ProgramRoutineBuilder;

struct Affected;
struct AffectedBuilder;

struct Reference;
struct ReferenceBuilder;

struct DescriptionProblemTypes;
struct DescriptionProblemTypesBuilder;

struct ProblemType;
struct ProblemTypeBuilder;

struct Impact;
struct ImpactBuilder;

struct Other;
struct OtherBuilder;

struct Scenario;
struct ScenarioBuilder;

struct Metric;
struct MetricBuilder;

struct Timeline;
struct TimelineBuilder;

struct Credit;
struct CreditBuilder;

struct Remediation;
struct RemediationBuilder;

struct Remediations;
struct RemediationsBuilder;

struct ProviderMetadata;
struct ProviderMetadataBuilder;

struct TaxonomyRelation;
struct TaxonomyRelationBuilder;

struct TaxonomyMapping;
struct TaxonomyMappingBuilder;

struct Adp;
struct AdpBuilder;

struct Cna;
struct CnaBuilder;

struct CveMetadata;
struct CveMetadataBuilder;

struct Containers;
struct ContainersBuilder;

struct Entry;
struct EntryBuilder;

struct CVSS_V3_1 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CVSS_V3_1Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_VECTORSTRING = 6,
    VT_ATTACKVECTOR = 8,
    VT_ATTACKCOMPLEXITY = 10,
    VT_PRIVILEGESREQUIRED = 12,
    VT_USERINTERACTION = 14,
    VT_SCOPE = 16,
    VT_CONFIDENTIALITYIMPACT = 18,
    VT_INTEGRITYIMPACT = 20,
    VT_AVAILABILITYIMPACT = 22,
    VT_BASESCORE = 24,
    VT_BASESEVERITY = 26,
    VT_EXPLOITCODEMATURITY = 28,
    VT_REMEDIATIONLEVEL = 30,
    VT_REPORTCONFIDENCE = 32,
    VT_TEMPORALSCORE = 34,
    VT_TEMPORALSEVERITY = 36,
    VT_CONFIDENTIALITYREQUIREMENT = 38,
    VT_INTEGRITYREQUIREMENT = 40,
    VT_AVAILABILITYREQUIREMENT = 42,
    VT_MODIFIEDATTACKVECTOR = 44,
    VT_MODIFIEDATTACKCOMPLEXITY = 46,
    VT_MODIFIEDPRIVILEGESREQUIRED = 48,
    VT_MODIFIEDUSERINTERACTION = 50,
    VT_MODIFIEDSCOPE = 52,
    VT_MODIFIEDCONFIDENTIALITYIMPACT = 54,
    VT_MODIFIEDINTEGRITYIMPACT = 56,
    VT_MODIFIEDAVAILABILITYIMPACT = 58,
    VT_ENVIRONMENTALSCORE = 60,
    VT_ENVIRONMENTALSEVERITY = 62
  };
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  const ::flatbuffers::String *vectorString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VECTORSTRING);
  }
  const ::flatbuffers::String *attackVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATTACKVECTOR);
  }
  const ::flatbuffers::String *attackComplexity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATTACKCOMPLEXITY);
  }
  const ::flatbuffers::String *privilegesRequired() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIVILEGESREQUIRED);
  }
  const ::flatbuffers::String *userInteraction() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERINTERACTION);
  }
  const ::flatbuffers::String *scope() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCOPE);
  }
  const ::flatbuffers::String *confidentialityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENTIALITYIMPACT);
  }
  const ::flatbuffers::String *integrityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRITYIMPACT);
  }
  const ::flatbuffers::String *availabilityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AVAILABILITYIMPACT);
  }
  float baseScore() const {
    return GetField<float>(VT_BASESCORE, 0.0f);
  }
  const ::flatbuffers::String *baseSeverity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BASESEVERITY);
  }
  const ::flatbuffers::String *exploitCodeMaturity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPLOITCODEMATURITY);
  }
  const ::flatbuffers::String *remediationLevel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REMEDIATIONLEVEL);
  }
  const ::flatbuffers::String *reportConfidence() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTCONFIDENCE);
  }
  float temporalScore() const {
    return GetField<float>(VT_TEMPORALSCORE, 0.0f);
  }
  const ::flatbuffers::String *temporalSeverity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEMPORALSEVERITY);
  }
  const ::flatbuffers::String *confidentialityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENTIALITYREQUIREMENT);
  }
  const ::flatbuffers::String *integrityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRITYREQUIREMENT);
  }
  const ::flatbuffers::String *availabilityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AVAILABILITYREQUIREMENT);
  }
  const ::flatbuffers::String *modifiedAttackVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDATTACKVECTOR);
  }
  const ::flatbuffers::String *modifiedAttackComplexity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDATTACKCOMPLEXITY);
  }
  const ::flatbuffers::String *modifiedPrivilegesRequired() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDPRIVILEGESREQUIRED);
  }
  const ::flatbuffers::String *modifiedUserInteraction() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDUSERINTERACTION);
  }
  const ::flatbuffers::String *modifiedScope() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDSCOPE);
  }
  const ::flatbuffers::String *modifiedConfidentialityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDCONFIDENTIALITYIMPACT);
  }
  const ::flatbuffers::String *modifiedIntegrityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDINTEGRITYIMPACT);
  }
  const ::flatbuffers::String *modifiedAvailabilityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDAVAILABILITYIMPACT);
  }
  float environmentalScore() const {
    return GetField<float>(VT_ENVIRONMENTALSCORE, 0.0f);
  }
  const ::flatbuffers::String *environmentalSeverity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENVIRONMENTALSEVERITY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_VECTORSTRING) &&
           verifier.VerifyString(vectorString()) &&
           VerifyOffset(verifier, VT_ATTACKVECTOR) &&
           verifier.VerifyString(attackVector()) &&
           VerifyOffset(verifier, VT_ATTACKCOMPLEXITY) &&
           verifier.VerifyString(attackComplexity()) &&
           VerifyOffset(verifier, VT_PRIVILEGESREQUIRED) &&
           verifier.VerifyString(privilegesRequired()) &&
           VerifyOffset(verifier, VT_USERINTERACTION) &&
           verifier.VerifyString(userInteraction()) &&
           VerifyOffset(verifier, VT_SCOPE) &&
           verifier.VerifyString(scope()) &&
           VerifyOffset(verifier, VT_CONFIDENTIALITYIMPACT) &&
           verifier.VerifyString(confidentialityImpact()) &&
           VerifyOffset(verifier, VT_INTEGRITYIMPACT) &&
           verifier.VerifyString(integrityImpact()) &&
           VerifyOffset(verifier, VT_AVAILABILITYIMPACT) &&
           verifier.VerifyString(availabilityImpact()) &&
           VerifyField<float>(verifier, VT_BASESCORE, 4) &&
           VerifyOffset(verifier, VT_BASESEVERITY) &&
           verifier.VerifyString(baseSeverity()) &&
           VerifyOffset(verifier, VT_EXPLOITCODEMATURITY) &&
           verifier.VerifyString(exploitCodeMaturity()) &&
           VerifyOffset(verifier, VT_REMEDIATIONLEVEL) &&
           verifier.VerifyString(remediationLevel()) &&
           VerifyOffset(verifier, VT_REPORTCONFIDENCE) &&
           verifier.VerifyString(reportConfidence()) &&
           VerifyField<float>(verifier, VT_TEMPORALSCORE, 4) &&
           VerifyOffset(verifier, VT_TEMPORALSEVERITY) &&
           verifier.VerifyString(temporalSeverity()) &&
           VerifyOffset(verifier, VT_CONFIDENTIALITYREQUIREMENT) &&
           verifier.VerifyString(confidentialityRequirement()) &&
           VerifyOffset(verifier, VT_INTEGRITYREQUIREMENT) &&
           verifier.VerifyString(integrityRequirement()) &&
           VerifyOffset(verifier, VT_AVAILABILITYREQUIREMENT) &&
           verifier.VerifyString(availabilityRequirement()) &&
           VerifyOffset(verifier, VT_MODIFIEDATTACKVECTOR) &&
           verifier.VerifyString(modifiedAttackVector()) &&
           VerifyOffset(verifier, VT_MODIFIEDATTACKCOMPLEXITY) &&
           verifier.VerifyString(modifiedAttackComplexity()) &&
           VerifyOffset(verifier, VT_MODIFIEDPRIVILEGESREQUIRED) &&
           verifier.VerifyString(modifiedPrivilegesRequired()) &&
           VerifyOffset(verifier, VT_MODIFIEDUSERINTERACTION) &&
           verifier.VerifyString(modifiedUserInteraction()) &&
           VerifyOffset(verifier, VT_MODIFIEDSCOPE) &&
           verifier.VerifyString(modifiedScope()) &&
           VerifyOffset(verifier, VT_MODIFIEDCONFIDENTIALITYIMPACT) &&
           verifier.VerifyString(modifiedConfidentialityImpact()) &&
           VerifyOffset(verifier, VT_MODIFIEDINTEGRITYIMPACT) &&
           verifier.VerifyString(modifiedIntegrityImpact()) &&
           VerifyOffset(verifier, VT_MODIFIEDAVAILABILITYIMPACT) &&
           verifier.VerifyString(modifiedAvailabilityImpact()) &&
           VerifyField<float>(verifier, VT_ENVIRONMENTALSCORE, 4) &&
           VerifyOffset(verifier, VT_ENVIRONMENTALSEVERITY) &&
           verifier.VerifyString(environmentalSeverity()) &&
           verifier.EndTable();
  }
};

struct CVSS_V3_1Builder {
  typedef CVSS_V3_1 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(CVSS_V3_1::VT_VERSION, version);
  }
  void add_vectorString(::flatbuffers::Offset<::flatbuffers::String> vectorString) {
    fbb_.AddOffset(CVSS_V3_1::VT_VECTORSTRING, vectorString);
  }
  void add_attackVector(::flatbuffers::Offset<::flatbuffers::String> attackVector) {
    fbb_.AddOffset(CVSS_V3_1::VT_ATTACKVECTOR, attackVector);
  }
  void add_attackComplexity(::flatbuffers::Offset<::flatbuffers::String> attackComplexity) {
    fbb_.AddOffset(CVSS_V3_1::VT_ATTACKCOMPLEXITY, attackComplexity);
  }
  void add_privilegesRequired(::flatbuffers::Offset<::flatbuffers::String> privilegesRequired) {
    fbb_.AddOffset(CVSS_V3_1::VT_PRIVILEGESREQUIRED, privilegesRequired);
  }
  void add_userInteraction(::flatbuffers::Offset<::flatbuffers::String> userInteraction) {
    fbb_.AddOffset(CVSS_V3_1::VT_USERINTERACTION, userInteraction);
  }
  void add_scope(::flatbuffers::Offset<::flatbuffers::String> scope) {
    fbb_.AddOffset(CVSS_V3_1::VT_SCOPE, scope);
  }
  void add_confidentialityImpact(::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact) {
    fbb_.AddOffset(CVSS_V3_1::VT_CONFIDENTIALITYIMPACT, confidentialityImpact);
  }
  void add_integrityImpact(::flatbuffers::Offset<::flatbuffers::String> integrityImpact) {
    fbb_.AddOffset(CVSS_V3_1::VT_INTEGRITYIMPACT, integrityImpact);
  }
  void add_availabilityImpact(::flatbuffers::Offset<::flatbuffers::String> availabilityImpact) {
    fbb_.AddOffset(CVSS_V3_1::VT_AVAILABILITYIMPACT, availabilityImpact);
  }
  void add_baseScore(float baseScore) {
    fbb_.AddElement<float>(CVSS_V3_1::VT_BASESCORE, baseScore, 0.0f);
  }
  void add_baseSeverity(::flatbuffers::Offset<::flatbuffers::String> baseSeverity) {
    fbb_.AddOffset(CVSS_V3_1::VT_BASESEVERITY, baseSeverity);
  }
  void add_exploitCodeMaturity(::flatbuffers::Offset<::flatbuffers::String> exploitCodeMaturity) {
    fbb_.AddOffset(CVSS_V3_1::VT_EXPLOITCODEMATURITY, exploitCodeMaturity);
  }
  void add_remediationLevel(::flatbuffers::Offset<::flatbuffers::String> remediationLevel) {
    fbb_.AddOffset(CVSS_V3_1::VT_REMEDIATIONLEVEL, remediationLevel);
  }
  void add_reportConfidence(::flatbuffers::Offset<::flatbuffers::String> reportConfidence) {
    fbb_.AddOffset(CVSS_V3_1::VT_REPORTCONFIDENCE, reportConfidence);
  }
  void add_temporalScore(float temporalScore) {
    fbb_.AddElement<float>(CVSS_V3_1::VT_TEMPORALSCORE, temporalScore, 0.0f);
  }
  void add_temporalSeverity(::flatbuffers::Offset<::flatbuffers::String> temporalSeverity) {
    fbb_.AddOffset(CVSS_V3_1::VT_TEMPORALSEVERITY, temporalSeverity);
  }
  void add_confidentialityRequirement(::flatbuffers::Offset<::flatbuffers::String> confidentialityRequirement) {
    fbb_.AddOffset(CVSS_V3_1::VT_CONFIDENTIALITYREQUIREMENT, confidentialityRequirement);
  }
  void add_integrityRequirement(::flatbuffers::Offset<::flatbuffers::String> integrityRequirement) {
    fbb_.AddOffset(CVSS_V3_1::VT_INTEGRITYREQUIREMENT, integrityRequirement);
  }
  void add_availabilityRequirement(::flatbuffers::Offset<::flatbuffers::String> availabilityRequirement) {
    fbb_.AddOffset(CVSS_V3_1::VT_AVAILABILITYREQUIREMENT, availabilityRequirement);
  }
  void add_modifiedAttackVector(::flatbuffers::Offset<::flatbuffers::String> modifiedAttackVector) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDATTACKVECTOR, modifiedAttackVector);
  }
  void add_modifiedAttackComplexity(::flatbuffers::Offset<::flatbuffers::String> modifiedAttackComplexity) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDATTACKCOMPLEXITY, modifiedAttackComplexity);
  }
  void add_modifiedPrivilegesRequired(::flatbuffers::Offset<::flatbuffers::String> modifiedPrivilegesRequired) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDPRIVILEGESREQUIRED, modifiedPrivilegesRequired);
  }
  void add_modifiedUserInteraction(::flatbuffers::Offset<::flatbuffers::String> modifiedUserInteraction) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDUSERINTERACTION, modifiedUserInteraction);
  }
  void add_modifiedScope(::flatbuffers::Offset<::flatbuffers::String> modifiedScope) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDSCOPE, modifiedScope);
  }
  void add_modifiedConfidentialityImpact(::flatbuffers::Offset<::flatbuffers::String> modifiedConfidentialityImpact) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDCONFIDENTIALITYIMPACT, modifiedConfidentialityImpact);
  }
  void add_modifiedIntegrityImpact(::flatbuffers::Offset<::flatbuffers::String> modifiedIntegrityImpact) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDINTEGRITYIMPACT, modifiedIntegrityImpact);
  }
  void add_modifiedAvailabilityImpact(::flatbuffers::Offset<::flatbuffers::String> modifiedAvailabilityImpact) {
    fbb_.AddOffset(CVSS_V3_1::VT_MODIFIEDAVAILABILITYIMPACT, modifiedAvailabilityImpact);
  }
  void add_environmentalScore(float environmentalScore) {
    fbb_.AddElement<float>(CVSS_V3_1::VT_ENVIRONMENTALSCORE, environmentalScore, 0.0f);
  }
  void add_environmentalSeverity(::flatbuffers::Offset<::flatbuffers::String> environmentalSeverity) {
    fbb_.AddOffset(CVSS_V3_1::VT_ENVIRONMENTALSEVERITY, environmentalSeverity);
  }
  explicit CVSS_V3_1Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CVSS_V3_1> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CVSS_V3_1>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CVSS_V3_1> CreateCVSS_V3_1(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vectorString = 0,
    ::flatbuffers::Offset<::flatbuffers::String> attackVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> attackComplexity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> privilegesRequired = 0,
    ::flatbuffers::Offset<::flatbuffers::String> userInteraction = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scope = 0,
    ::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> integrityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> availabilityImpact = 0,
    float baseScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> baseSeverity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> exploitCodeMaturity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> remediationLevel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportConfidence = 0,
    float temporalScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> temporalSeverity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> confidentialityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> integrityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> availabilityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedAttackVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedAttackComplexity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedPrivilegesRequired = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedUserInteraction = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedScope = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedConfidentialityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedIntegrityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedAvailabilityImpact = 0,
    float environmentalScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> environmentalSeverity = 0) {
  CVSS_V3_1Builder builder_(_fbb);
  builder_.add_environmentalSeverity(environmentalSeverity);
  builder_.add_environmentalScore(environmentalScore);
  builder_.add_modifiedAvailabilityImpact(modifiedAvailabilityImpact);
  builder_.add_modifiedIntegrityImpact(modifiedIntegrityImpact);
  builder_.add_modifiedConfidentialityImpact(modifiedConfidentialityImpact);
  builder_.add_modifiedScope(modifiedScope);
  builder_.add_modifiedUserInteraction(modifiedUserInteraction);
  builder_.add_modifiedPrivilegesRequired(modifiedPrivilegesRequired);
  builder_.add_modifiedAttackComplexity(modifiedAttackComplexity);
  builder_.add_modifiedAttackVector(modifiedAttackVector);
  builder_.add_availabilityRequirement(availabilityRequirement);
  builder_.add_integrityRequirement(integrityRequirement);
  builder_.add_confidentialityRequirement(confidentialityRequirement);
  builder_.add_temporalSeverity(temporalSeverity);
  builder_.add_temporalScore(temporalScore);
  builder_.add_reportConfidence(reportConfidence);
  builder_.add_remediationLevel(remediationLevel);
  builder_.add_exploitCodeMaturity(exploitCodeMaturity);
  builder_.add_baseSeverity(baseSeverity);
  builder_.add_baseScore(baseScore);
  builder_.add_availabilityImpact(availabilityImpact);
  builder_.add_integrityImpact(integrityImpact);
  builder_.add_confidentialityImpact(confidentialityImpact);
  builder_.add_scope(scope);
  builder_.add_userInteraction(userInteraction);
  builder_.add_privilegesRequired(privilegesRequired);
  builder_.add_attackComplexity(attackComplexity);
  builder_.add_attackVector(attackVector);
  builder_.add_vectorString(vectorString);
  builder_.add_version(version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CVSS_V3_1> CreateCVSS_V3_1Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr,
    const char *vectorString = nullptr,
    const char *attackVector = nullptr,
    const char *attackComplexity = nullptr,
    const char *privilegesRequired = nullptr,
    const char *userInteraction = nullptr,
    const char *scope = nullptr,
    const char *confidentialityImpact = nullptr,
    const char *integrityImpact = nullptr,
    const char *availabilityImpact = nullptr,
    float baseScore = 0.0f,
    const char *baseSeverity = nullptr,
    const char *exploitCodeMaturity = nullptr,
    const char *remediationLevel = nullptr,
    const char *reportConfidence = nullptr,
    float temporalScore = 0.0f,
    const char *temporalSeverity = nullptr,
    const char *confidentialityRequirement = nullptr,
    const char *integrityRequirement = nullptr,
    const char *availabilityRequirement = nullptr,
    const char *modifiedAttackVector = nullptr,
    const char *modifiedAttackComplexity = nullptr,
    const char *modifiedPrivilegesRequired = nullptr,
    const char *modifiedUserInteraction = nullptr,
    const char *modifiedScope = nullptr,
    const char *modifiedConfidentialityImpact = nullptr,
    const char *modifiedIntegrityImpact = nullptr,
    const char *modifiedAvailabilityImpact = nullptr,
    float environmentalScore = 0.0f,
    const char *environmentalSeverity = nullptr) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto vectorString__ = vectorString ? _fbb.CreateString(vectorString) : 0;
  auto attackVector__ = attackVector ? _fbb.CreateString(attackVector) : 0;
  auto attackComplexity__ = attackComplexity ? _fbb.CreateString(attackComplexity) : 0;
  auto privilegesRequired__ = privilegesRequired ? _fbb.CreateString(privilegesRequired) : 0;
  auto userInteraction__ = userInteraction ? _fbb.CreateString(userInteraction) : 0;
  auto scope__ = scope ? _fbb.CreateString(scope) : 0;
  auto confidentialityImpact__ = confidentialityImpact ? _fbb.CreateString(confidentialityImpact) : 0;
  auto integrityImpact__ = integrityImpact ? _fbb.CreateString(integrityImpact) : 0;
  auto availabilityImpact__ = availabilityImpact ? _fbb.CreateString(availabilityImpact) : 0;
  auto baseSeverity__ = baseSeverity ? _fbb.CreateString(baseSeverity) : 0;
  auto exploitCodeMaturity__ = exploitCodeMaturity ? _fbb.CreateString(exploitCodeMaturity) : 0;
  auto remediationLevel__ = remediationLevel ? _fbb.CreateString(remediationLevel) : 0;
  auto reportConfidence__ = reportConfidence ? _fbb.CreateString(reportConfidence) : 0;
  auto temporalSeverity__ = temporalSeverity ? _fbb.CreateString(temporalSeverity) : 0;
  auto confidentialityRequirement__ = confidentialityRequirement ? _fbb.CreateString(confidentialityRequirement) : 0;
  auto integrityRequirement__ = integrityRequirement ? _fbb.CreateString(integrityRequirement) : 0;
  auto availabilityRequirement__ = availabilityRequirement ? _fbb.CreateString(availabilityRequirement) : 0;
  auto modifiedAttackVector__ = modifiedAttackVector ? _fbb.CreateString(modifiedAttackVector) : 0;
  auto modifiedAttackComplexity__ = modifiedAttackComplexity ? _fbb.CreateString(modifiedAttackComplexity) : 0;
  auto modifiedPrivilegesRequired__ = modifiedPrivilegesRequired ? _fbb.CreateString(modifiedPrivilegesRequired) : 0;
  auto modifiedUserInteraction__ = modifiedUserInteraction ? _fbb.CreateString(modifiedUserInteraction) : 0;
  auto modifiedScope__ = modifiedScope ? _fbb.CreateString(modifiedScope) : 0;
  auto modifiedConfidentialityImpact__ = modifiedConfidentialityImpact ? _fbb.CreateString(modifiedConfidentialityImpact) : 0;
  auto modifiedIntegrityImpact__ = modifiedIntegrityImpact ? _fbb.CreateString(modifiedIntegrityImpact) : 0;
  auto modifiedAvailabilityImpact__ = modifiedAvailabilityImpact ? _fbb.CreateString(modifiedAvailabilityImpact) : 0;
  auto environmentalSeverity__ = environmentalSeverity ? _fbb.CreateString(environmentalSeverity) : 0;
  return cve_v5::CreateCVSS_V3_1(
      _fbb,
      version__,
      vectorString__,
      attackVector__,
      attackComplexity__,
      privilegesRequired__,
      userInteraction__,
      scope__,
      confidentialityImpact__,
      integrityImpact__,
      availabilityImpact__,
      baseScore,
      baseSeverity__,
      exploitCodeMaturity__,
      remediationLevel__,
      reportConfidence__,
      temporalScore,
      temporalSeverity__,
      confidentialityRequirement__,
      integrityRequirement__,
      availabilityRequirement__,
      modifiedAttackVector__,
      modifiedAttackComplexity__,
      modifiedPrivilegesRequired__,
      modifiedUserInteraction__,
      modifiedScope__,
      modifiedConfidentialityImpact__,
      modifiedIntegrityImpact__,
      modifiedAvailabilityImpact__,
      environmentalScore,
      environmentalSeverity__);
}

struct CVSS_V3_0 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CVSS_V3_0Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_VECTORSTRING = 6,
    VT_ATTACKVECTOR = 8,
    VT_ATTACKCOMPLEXITY = 10,
    VT_PRIVILEGESREQUIRED = 12,
    VT_USERINTERACTION = 14,
    VT_SCOPE = 16,
    VT_CONFIDENTIALITYIMPACT = 18,
    VT_INTEGRITYIMPACT = 20,
    VT_AVAILABILITYIMPACT = 22,
    VT_BASESCORE = 24,
    VT_BASESEVERITY = 26,
    VT_EXPLOITCODEMATURITY = 28,
    VT_REMEDIATIONLEVEL = 30,
    VT_REPORTCONFIDENCE = 32,
    VT_TEMPORALSCORE = 34,
    VT_TEMPORALSEVERITY = 36,
    VT_CONFIDENTIALITYREQUIREMENT = 38,
    VT_INTEGRITYREQUIREMENT = 40,
    VT_AVAILABILITYREQUIREMENT = 42,
    VT_MODIFIEDATTACKVECTOR = 44,
    VT_MODIFIEDATTACKCOMPLEXITY = 46,
    VT_MODIFIEDPRIVILEGESREQUIRED = 48,
    VT_MODIFIEDUSERINTERACTION = 50,
    VT_MODIFIEDSCOPE = 52,
    VT_MODIFIEDCONFIDENTIALITYIMPACT = 54,
    VT_MODIFIEDINTEGRITYIMPACT = 56,
    VT_MODIFIEDAVAILABILITYIMPACT = 58,
    VT_ENVIRONMENTALSCORE = 60,
    VT_ENVIRONMENTALSEVERITY = 62
  };
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  const ::flatbuffers::String *vectorString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VECTORSTRING);
  }
  const ::flatbuffers::String *attackVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATTACKVECTOR);
  }
  const ::flatbuffers::String *attackComplexity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ATTACKCOMPLEXITY);
  }
  const ::flatbuffers::String *privilegesRequired() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRIVILEGESREQUIRED);
  }
  const ::flatbuffers::String *userInteraction() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USERINTERACTION);
  }
  const ::flatbuffers::String *scope() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SCOPE);
  }
  const ::flatbuffers::String *confidentialityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENTIALITYIMPACT);
  }
  const ::flatbuffers::String *integrityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRITYIMPACT);
  }
  const ::flatbuffers::String *availabilityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AVAILABILITYIMPACT);
  }
  float baseScore() const {
    return GetField<float>(VT_BASESCORE, 0.0f);
  }
  const ::flatbuffers::String *baseSeverity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BASESEVERITY);
  }
  const ::flatbuffers::String *exploitCodeMaturity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPLOITCODEMATURITY);
  }
  const ::flatbuffers::String *remediationLevel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REMEDIATIONLEVEL);
  }
  const ::flatbuffers::String *reportConfidence() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTCONFIDENCE);
  }
  float temporalScore() const {
    return GetField<float>(VT_TEMPORALSCORE, 0.0f);
  }
  const ::flatbuffers::String *temporalSeverity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TEMPORALSEVERITY);
  }
  const ::flatbuffers::String *confidentialityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENTIALITYREQUIREMENT);
  }
  const ::flatbuffers::String *integrityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRITYREQUIREMENT);
  }
  const ::flatbuffers::String *availabilityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AVAILABILITYREQUIREMENT);
  }
  const ::flatbuffers::String *modifiedAttackVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDATTACKVECTOR);
  }
  const ::flatbuffers::String *modifiedAttackComplexity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDATTACKCOMPLEXITY);
  }
  const ::flatbuffers::String *modifiedPrivilegesRequired() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDPRIVILEGESREQUIRED);
  }
  const ::flatbuffers::String *modifiedUserInteraction() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDUSERINTERACTION);
  }
  const ::flatbuffers::String *modifiedScope() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDSCOPE);
  }
  const ::flatbuffers::String *modifiedConfidentialityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDCONFIDENTIALITYIMPACT);
  }
  const ::flatbuffers::String *modifiedIntegrityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDINTEGRITYIMPACT);
  }
  const ::flatbuffers::String *modifiedAvailabilityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MODIFIEDAVAILABILITYIMPACT);
  }
  float environmentalScore() const {
    return GetField<float>(VT_ENVIRONMENTALSCORE, 0.0f);
  }
  const ::flatbuffers::String *environmentalSeverity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ENVIRONMENTALSEVERITY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_VECTORSTRING) &&
           verifier.VerifyString(vectorString()) &&
           VerifyOffset(verifier, VT_ATTACKVECTOR) &&
           verifier.VerifyString(attackVector()) &&
           VerifyOffset(verifier, VT_ATTACKCOMPLEXITY) &&
           verifier.VerifyString(attackComplexity()) &&
           VerifyOffset(verifier, VT_PRIVILEGESREQUIRED) &&
           verifier.VerifyString(privilegesRequired()) &&
           VerifyOffset(verifier, VT_USERINTERACTION) &&
           verifier.VerifyString(userInteraction()) &&
           VerifyOffset(verifier, VT_SCOPE) &&
           verifier.VerifyString(scope()) &&
           VerifyOffset(verifier, VT_CONFIDENTIALITYIMPACT) &&
           verifier.VerifyString(confidentialityImpact()) &&
           VerifyOffset(verifier, VT_INTEGRITYIMPACT) &&
           verifier.VerifyString(integrityImpact()) &&
           VerifyOffset(verifier, VT_AVAILABILITYIMPACT) &&
           verifier.VerifyString(availabilityImpact()) &&
           VerifyField<float>(verifier, VT_BASESCORE, 4) &&
           VerifyOffset(verifier, VT_BASESEVERITY) &&
           verifier.VerifyString(baseSeverity()) &&
           VerifyOffset(verifier, VT_EXPLOITCODEMATURITY) &&
           verifier.VerifyString(exploitCodeMaturity()) &&
           VerifyOffset(verifier, VT_REMEDIATIONLEVEL) &&
           verifier.VerifyString(remediationLevel()) &&
           VerifyOffset(verifier, VT_REPORTCONFIDENCE) &&
           verifier.VerifyString(reportConfidence()) &&
           VerifyField<float>(verifier, VT_TEMPORALSCORE, 4) &&
           VerifyOffset(verifier, VT_TEMPORALSEVERITY) &&
           verifier.VerifyString(temporalSeverity()) &&
           VerifyOffset(verifier, VT_CONFIDENTIALITYREQUIREMENT) &&
           verifier.VerifyString(confidentialityRequirement()) &&
           VerifyOffset(verifier, VT_INTEGRITYREQUIREMENT) &&
           verifier.VerifyString(integrityRequirement()) &&
           VerifyOffset(verifier, VT_AVAILABILITYREQUIREMENT) &&
           verifier.VerifyString(availabilityRequirement()) &&
           VerifyOffset(verifier, VT_MODIFIEDATTACKVECTOR) &&
           verifier.VerifyString(modifiedAttackVector()) &&
           VerifyOffset(verifier, VT_MODIFIEDATTACKCOMPLEXITY) &&
           verifier.VerifyString(modifiedAttackComplexity()) &&
           VerifyOffset(verifier, VT_MODIFIEDPRIVILEGESREQUIRED) &&
           verifier.VerifyString(modifiedPrivilegesRequired()) &&
           VerifyOffset(verifier, VT_MODIFIEDUSERINTERACTION) &&
           verifier.VerifyString(modifiedUserInteraction()) &&
           VerifyOffset(verifier, VT_MODIFIEDSCOPE) &&
           verifier.VerifyString(modifiedScope()) &&
           VerifyOffset(verifier, VT_MODIFIEDCONFIDENTIALITYIMPACT) &&
           verifier.VerifyString(modifiedConfidentialityImpact()) &&
           VerifyOffset(verifier, VT_MODIFIEDINTEGRITYIMPACT) &&
           verifier.VerifyString(modifiedIntegrityImpact()) &&
           VerifyOffset(verifier, VT_MODIFIEDAVAILABILITYIMPACT) &&
           verifier.VerifyString(modifiedAvailabilityImpact()) &&
           VerifyField<float>(verifier, VT_ENVIRONMENTALSCORE, 4) &&
           VerifyOffset(verifier, VT_ENVIRONMENTALSEVERITY) &&
           verifier.VerifyString(environmentalSeverity()) &&
           verifier.EndTable();
  }
};

struct CVSS_V3_0Builder {
  typedef CVSS_V3_0 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(CVSS_V3_0::VT_VERSION, version);
  }
  void add_vectorString(::flatbuffers::Offset<::flatbuffers::String> vectorString) {
    fbb_.AddOffset(CVSS_V3_0::VT_VECTORSTRING, vectorString);
  }
  void add_attackVector(::flatbuffers::Offset<::flatbuffers::String> attackVector) {
    fbb_.AddOffset(CVSS_V3_0::VT_ATTACKVECTOR, attackVector);
  }
  void add_attackComplexity(::flatbuffers::Offset<::flatbuffers::String> attackComplexity) {
    fbb_.AddOffset(CVSS_V3_0::VT_ATTACKCOMPLEXITY, attackComplexity);
  }
  void add_privilegesRequired(::flatbuffers::Offset<::flatbuffers::String> privilegesRequired) {
    fbb_.AddOffset(CVSS_V3_0::VT_PRIVILEGESREQUIRED, privilegesRequired);
  }
  void add_userInteraction(::flatbuffers::Offset<::flatbuffers::String> userInteraction) {
    fbb_.AddOffset(CVSS_V3_0::VT_USERINTERACTION, userInteraction);
  }
  void add_scope(::flatbuffers::Offset<::flatbuffers::String> scope) {
    fbb_.AddOffset(CVSS_V3_0::VT_SCOPE, scope);
  }
  void add_confidentialityImpact(::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact) {
    fbb_.AddOffset(CVSS_V3_0::VT_CONFIDENTIALITYIMPACT, confidentialityImpact);
  }
  void add_integrityImpact(::flatbuffers::Offset<::flatbuffers::String> integrityImpact) {
    fbb_.AddOffset(CVSS_V3_0::VT_INTEGRITYIMPACT, integrityImpact);
  }
  void add_availabilityImpact(::flatbuffers::Offset<::flatbuffers::String> availabilityImpact) {
    fbb_.AddOffset(CVSS_V3_0::VT_AVAILABILITYIMPACT, availabilityImpact);
  }
  void add_baseScore(float baseScore) {
    fbb_.AddElement<float>(CVSS_V3_0::VT_BASESCORE, baseScore, 0.0f);
  }
  void add_baseSeverity(::flatbuffers::Offset<::flatbuffers::String> baseSeverity) {
    fbb_.AddOffset(CVSS_V3_0::VT_BASESEVERITY, baseSeverity);
  }
  void add_exploitCodeMaturity(::flatbuffers::Offset<::flatbuffers::String> exploitCodeMaturity) {
    fbb_.AddOffset(CVSS_V3_0::VT_EXPLOITCODEMATURITY, exploitCodeMaturity);
  }
  void add_remediationLevel(::flatbuffers::Offset<::flatbuffers::String> remediationLevel) {
    fbb_.AddOffset(CVSS_V3_0::VT_REMEDIATIONLEVEL, remediationLevel);
  }
  void add_reportConfidence(::flatbuffers::Offset<::flatbuffers::String> reportConfidence) {
    fbb_.AddOffset(CVSS_V3_0::VT_REPORTCONFIDENCE, reportConfidence);
  }
  void add_temporalScore(float temporalScore) {
    fbb_.AddElement<float>(CVSS_V3_0::VT_TEMPORALSCORE, temporalScore, 0.0f);
  }
  void add_temporalSeverity(::flatbuffers::Offset<::flatbuffers::String> temporalSeverity) {
    fbb_.AddOffset(CVSS_V3_0::VT_TEMPORALSEVERITY, temporalSeverity);
  }
  void add_confidentialityRequirement(::flatbuffers::Offset<::flatbuffers::String> confidentialityRequirement) {
    fbb_.AddOffset(CVSS_V3_0::VT_CONFIDENTIALITYREQUIREMENT, confidentialityRequirement);
  }
  void add_integrityRequirement(::flatbuffers::Offset<::flatbuffers::String> integrityRequirement) {
    fbb_.AddOffset(CVSS_V3_0::VT_INTEGRITYREQUIREMENT, integrityRequirement);
  }
  void add_availabilityRequirement(::flatbuffers::Offset<::flatbuffers::String> availabilityRequirement) {
    fbb_.AddOffset(CVSS_V3_0::VT_AVAILABILITYREQUIREMENT, availabilityRequirement);
  }
  void add_modifiedAttackVector(::flatbuffers::Offset<::flatbuffers::String> modifiedAttackVector) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDATTACKVECTOR, modifiedAttackVector);
  }
  void add_modifiedAttackComplexity(::flatbuffers::Offset<::flatbuffers::String> modifiedAttackComplexity) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDATTACKCOMPLEXITY, modifiedAttackComplexity);
  }
  void add_modifiedPrivilegesRequired(::flatbuffers::Offset<::flatbuffers::String> modifiedPrivilegesRequired) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDPRIVILEGESREQUIRED, modifiedPrivilegesRequired);
  }
  void add_modifiedUserInteraction(::flatbuffers::Offset<::flatbuffers::String> modifiedUserInteraction) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDUSERINTERACTION, modifiedUserInteraction);
  }
  void add_modifiedScope(::flatbuffers::Offset<::flatbuffers::String> modifiedScope) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDSCOPE, modifiedScope);
  }
  void add_modifiedConfidentialityImpact(::flatbuffers::Offset<::flatbuffers::String> modifiedConfidentialityImpact) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDCONFIDENTIALITYIMPACT, modifiedConfidentialityImpact);
  }
  void add_modifiedIntegrityImpact(::flatbuffers::Offset<::flatbuffers::String> modifiedIntegrityImpact) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDINTEGRITYIMPACT, modifiedIntegrityImpact);
  }
  void add_modifiedAvailabilityImpact(::flatbuffers::Offset<::flatbuffers::String> modifiedAvailabilityImpact) {
    fbb_.AddOffset(CVSS_V3_0::VT_MODIFIEDAVAILABILITYIMPACT, modifiedAvailabilityImpact);
  }
  void add_environmentalScore(float environmentalScore) {
    fbb_.AddElement<float>(CVSS_V3_0::VT_ENVIRONMENTALSCORE, environmentalScore, 0.0f);
  }
  void add_environmentalSeverity(::flatbuffers::Offset<::flatbuffers::String> environmentalSeverity) {
    fbb_.AddOffset(CVSS_V3_0::VT_ENVIRONMENTALSEVERITY, environmentalSeverity);
  }
  explicit CVSS_V3_0Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CVSS_V3_0> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CVSS_V3_0>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CVSS_V3_0> CreateCVSS_V3_0(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vectorString = 0,
    ::flatbuffers::Offset<::flatbuffers::String> attackVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> attackComplexity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> privilegesRequired = 0,
    ::flatbuffers::Offset<::flatbuffers::String> userInteraction = 0,
    ::flatbuffers::Offset<::flatbuffers::String> scope = 0,
    ::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> integrityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> availabilityImpact = 0,
    float baseScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> baseSeverity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> exploitCodeMaturity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> remediationLevel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportConfidence = 0,
    float temporalScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> temporalSeverity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> confidentialityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> integrityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> availabilityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedAttackVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedAttackComplexity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedPrivilegesRequired = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedUserInteraction = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedScope = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedConfidentialityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedIntegrityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> modifiedAvailabilityImpact = 0,
    float environmentalScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> environmentalSeverity = 0) {
  CVSS_V3_0Builder builder_(_fbb);
  builder_.add_environmentalSeverity(environmentalSeverity);
  builder_.add_environmentalScore(environmentalScore);
  builder_.add_modifiedAvailabilityImpact(modifiedAvailabilityImpact);
  builder_.add_modifiedIntegrityImpact(modifiedIntegrityImpact);
  builder_.add_modifiedConfidentialityImpact(modifiedConfidentialityImpact);
  builder_.add_modifiedScope(modifiedScope);
  builder_.add_modifiedUserInteraction(modifiedUserInteraction);
  builder_.add_modifiedPrivilegesRequired(modifiedPrivilegesRequired);
  builder_.add_modifiedAttackComplexity(modifiedAttackComplexity);
  builder_.add_modifiedAttackVector(modifiedAttackVector);
  builder_.add_availabilityRequirement(availabilityRequirement);
  builder_.add_integrityRequirement(integrityRequirement);
  builder_.add_confidentialityRequirement(confidentialityRequirement);
  builder_.add_temporalSeverity(temporalSeverity);
  builder_.add_temporalScore(temporalScore);
  builder_.add_reportConfidence(reportConfidence);
  builder_.add_remediationLevel(remediationLevel);
  builder_.add_exploitCodeMaturity(exploitCodeMaturity);
  builder_.add_baseSeverity(baseSeverity);
  builder_.add_baseScore(baseScore);
  builder_.add_availabilityImpact(availabilityImpact);
  builder_.add_integrityImpact(integrityImpact);
  builder_.add_confidentialityImpact(confidentialityImpact);
  builder_.add_scope(scope);
  builder_.add_userInteraction(userInteraction);
  builder_.add_privilegesRequired(privilegesRequired);
  builder_.add_attackComplexity(attackComplexity);
  builder_.add_attackVector(attackVector);
  builder_.add_vectorString(vectorString);
  builder_.add_version(version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CVSS_V3_0> CreateCVSS_V3_0Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr,
    const char *vectorString = nullptr,
    const char *attackVector = nullptr,
    const char *attackComplexity = nullptr,
    const char *privilegesRequired = nullptr,
    const char *userInteraction = nullptr,
    const char *scope = nullptr,
    const char *confidentialityImpact = nullptr,
    const char *integrityImpact = nullptr,
    const char *availabilityImpact = nullptr,
    float baseScore = 0.0f,
    const char *baseSeverity = nullptr,
    const char *exploitCodeMaturity = nullptr,
    const char *remediationLevel = nullptr,
    const char *reportConfidence = nullptr,
    float temporalScore = 0.0f,
    const char *temporalSeverity = nullptr,
    const char *confidentialityRequirement = nullptr,
    const char *integrityRequirement = nullptr,
    const char *availabilityRequirement = nullptr,
    const char *modifiedAttackVector = nullptr,
    const char *modifiedAttackComplexity = nullptr,
    const char *modifiedPrivilegesRequired = nullptr,
    const char *modifiedUserInteraction = nullptr,
    const char *modifiedScope = nullptr,
    const char *modifiedConfidentialityImpact = nullptr,
    const char *modifiedIntegrityImpact = nullptr,
    const char *modifiedAvailabilityImpact = nullptr,
    float environmentalScore = 0.0f,
    const char *environmentalSeverity = nullptr) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto vectorString__ = vectorString ? _fbb.CreateString(vectorString) : 0;
  auto attackVector__ = attackVector ? _fbb.CreateString(attackVector) : 0;
  auto attackComplexity__ = attackComplexity ? _fbb.CreateString(attackComplexity) : 0;
  auto privilegesRequired__ = privilegesRequired ? _fbb.CreateString(privilegesRequired) : 0;
  auto userInteraction__ = userInteraction ? _fbb.CreateString(userInteraction) : 0;
  auto scope__ = scope ? _fbb.CreateString(scope) : 0;
  auto confidentialityImpact__ = confidentialityImpact ? _fbb.CreateString(confidentialityImpact) : 0;
  auto integrityImpact__ = integrityImpact ? _fbb.CreateString(integrityImpact) : 0;
  auto availabilityImpact__ = availabilityImpact ? _fbb.CreateString(availabilityImpact) : 0;
  auto baseSeverity__ = baseSeverity ? _fbb.CreateString(baseSeverity) : 0;
  auto exploitCodeMaturity__ = exploitCodeMaturity ? _fbb.CreateString(exploitCodeMaturity) : 0;
  auto remediationLevel__ = remediationLevel ? _fbb.CreateString(remediationLevel) : 0;
  auto reportConfidence__ = reportConfidence ? _fbb.CreateString(reportConfidence) : 0;
  auto temporalSeverity__ = temporalSeverity ? _fbb.CreateString(temporalSeverity) : 0;
  auto confidentialityRequirement__ = confidentialityRequirement ? _fbb.CreateString(confidentialityRequirement) : 0;
  auto integrityRequirement__ = integrityRequirement ? _fbb.CreateString(integrityRequirement) : 0;
  auto availabilityRequirement__ = availabilityRequirement ? _fbb.CreateString(availabilityRequirement) : 0;
  auto modifiedAttackVector__ = modifiedAttackVector ? _fbb.CreateString(modifiedAttackVector) : 0;
  auto modifiedAttackComplexity__ = modifiedAttackComplexity ? _fbb.CreateString(modifiedAttackComplexity) : 0;
  auto modifiedPrivilegesRequired__ = modifiedPrivilegesRequired ? _fbb.CreateString(modifiedPrivilegesRequired) : 0;
  auto modifiedUserInteraction__ = modifiedUserInteraction ? _fbb.CreateString(modifiedUserInteraction) : 0;
  auto modifiedScope__ = modifiedScope ? _fbb.CreateString(modifiedScope) : 0;
  auto modifiedConfidentialityImpact__ = modifiedConfidentialityImpact ? _fbb.CreateString(modifiedConfidentialityImpact) : 0;
  auto modifiedIntegrityImpact__ = modifiedIntegrityImpact ? _fbb.CreateString(modifiedIntegrityImpact) : 0;
  auto modifiedAvailabilityImpact__ = modifiedAvailabilityImpact ? _fbb.CreateString(modifiedAvailabilityImpact) : 0;
  auto environmentalSeverity__ = environmentalSeverity ? _fbb.CreateString(environmentalSeverity) : 0;
  return cve_v5::CreateCVSS_V3_0(
      _fbb,
      version__,
      vectorString__,
      attackVector__,
      attackComplexity__,
      privilegesRequired__,
      userInteraction__,
      scope__,
      confidentialityImpact__,
      integrityImpact__,
      availabilityImpact__,
      baseScore,
      baseSeverity__,
      exploitCodeMaturity__,
      remediationLevel__,
      reportConfidence__,
      temporalScore,
      temporalSeverity__,
      confidentialityRequirement__,
      integrityRequirement__,
      availabilityRequirement__,
      modifiedAttackVector__,
      modifiedAttackComplexity__,
      modifiedPrivilegesRequired__,
      modifiedUserInteraction__,
      modifiedScope__,
      modifiedConfidentialityImpact__,
      modifiedIntegrityImpact__,
      modifiedAvailabilityImpact__,
      environmentalScore,
      environmentalSeverity__);
}

struct CVSS_V2_0 FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CVSS_V2_0Builder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_VECTORSTRING = 6,
    VT_ACCESSVECTOR = 8,
    VT_ACCESSCOMPLEXITY = 10,
    VT_AUTHENTICATION = 12,
    VT_CONFIDENTIALITYIMPACT = 14,
    VT_INTEGRITYIMPACT = 16,
    VT_AVAILABILITYIMPACT = 18,
    VT_BASESCORE = 20,
    VT_EXPLOITABILITY = 22,
    VT_REMEDIATIONLEVEL = 24,
    VT_REPORTCONFIDENCE = 26,
    VT_TEMPORALSCORE = 28,
    VT_COLLATERALDAMAGEPOTENTIAL = 30,
    VT_TARGETDISTRIBUTION = 32,
    VT_CONFIDENTIALITYREQUIREMENT = 34,
    VT_INTEGRITYREQUIREMENT = 36,
    VT_AVAILABILITYREQUIREMENT = 38,
    VT_ENVIRONMENTALSCORE = 40
  };
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  const ::flatbuffers::String *vectorString() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VECTORSTRING);
  }
  const ::flatbuffers::String *accessVector() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCESSVECTOR);
  }
  const ::flatbuffers::String *accessComplexity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ACCESSCOMPLEXITY);
  }
  const ::flatbuffers::String *authentication() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AUTHENTICATION);
  }
  const ::flatbuffers::String *confidentialityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENTIALITYIMPACT);
  }
  const ::flatbuffers::String *integrityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRITYIMPACT);
  }
  const ::flatbuffers::String *availabilityImpact() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AVAILABILITYIMPACT);
  }
  float baseScore() const {
    return GetField<float>(VT_BASESCORE, 0.0f);
  }
  const ::flatbuffers::String *exploitability() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EXPLOITABILITY);
  }
  const ::flatbuffers::String *remediationLevel() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REMEDIATIONLEVEL);
  }
  const ::flatbuffers::String *reportConfidence() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPORTCONFIDENCE);
  }
  float temporalScore() const {
    return GetField<float>(VT_TEMPORALSCORE, 0.0f);
  }
  const ::flatbuffers::String *collateralDamagePotential() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLLATERALDAMAGEPOTENTIAL);
  }
  const ::flatbuffers::String *targetDistribution() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGETDISTRIBUTION);
  }
  const ::flatbuffers::String *confidentialityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CONFIDENTIALITYREQUIREMENT);
  }
  const ::flatbuffers::String *integrityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_INTEGRITYREQUIREMENT);
  }
  const ::flatbuffers::String *availabilityRequirement() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AVAILABILITYREQUIREMENT);
  }
  float environmentalScore() const {
    return GetField<float>(VT_ENVIRONMENTALSCORE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_VECTORSTRING) &&
           verifier.VerifyString(vectorString()) &&
           VerifyOffset(verifier, VT_ACCESSVECTOR) &&
           verifier.VerifyString(accessVector()) &&
           VerifyOffset(verifier, VT_ACCESSCOMPLEXITY) &&
           verifier.VerifyString(accessComplexity()) &&
           VerifyOffset(verifier, VT_AUTHENTICATION) &&
           verifier.VerifyString(authentication()) &&
           VerifyOffset(verifier, VT_CONFIDENTIALITYIMPACT) &&
           verifier.VerifyString(confidentialityImpact()) &&
           VerifyOffset(verifier, VT_INTEGRITYIMPACT) &&
           verifier.VerifyString(integrityImpact()) &&
           VerifyOffset(verifier, VT_AVAILABILITYIMPACT) &&
           verifier.VerifyString(availabilityImpact()) &&
           VerifyField<float>(verifier, VT_BASESCORE, 4) &&
           VerifyOffset(verifier, VT_EXPLOITABILITY) &&
           verifier.VerifyString(exploitability()) &&
           VerifyOffset(verifier, VT_REMEDIATIONLEVEL) &&
           verifier.VerifyString(remediationLevel()) &&
           VerifyOffset(verifier, VT_REPORTCONFIDENCE) &&
           verifier.VerifyString(reportConfidence()) &&
           VerifyField<float>(verifier, VT_TEMPORALSCORE, 4) &&
           VerifyOffset(verifier, VT_COLLATERALDAMAGEPOTENTIAL) &&
           verifier.VerifyString(collateralDamagePotential()) &&
           VerifyOffset(verifier, VT_TARGETDISTRIBUTION) &&
           verifier.VerifyString(targetDistribution()) &&
           VerifyOffset(verifier, VT_CONFIDENTIALITYREQUIREMENT) &&
           verifier.VerifyString(confidentialityRequirement()) &&
           VerifyOffset(verifier, VT_INTEGRITYREQUIREMENT) &&
           verifier.VerifyString(integrityRequirement()) &&
           VerifyOffset(verifier, VT_AVAILABILITYREQUIREMENT) &&
           verifier.VerifyString(availabilityRequirement()) &&
           VerifyField<float>(verifier, VT_ENVIRONMENTALSCORE, 4) &&
           verifier.EndTable();
  }
};

struct CVSS_V2_0Builder {
  typedef CVSS_V2_0 Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(CVSS_V2_0::VT_VERSION, version);
  }
  void add_vectorString(::flatbuffers::Offset<::flatbuffers::String> vectorString) {
    fbb_.AddOffset(CVSS_V2_0::VT_VECTORSTRING, vectorString);
  }
  void add_accessVector(::flatbuffers::Offset<::flatbuffers::String> accessVector) {
    fbb_.AddOffset(CVSS_V2_0::VT_ACCESSVECTOR, accessVector);
  }
  void add_accessComplexity(::flatbuffers::Offset<::flatbuffers::String> accessComplexity) {
    fbb_.AddOffset(CVSS_V2_0::VT_ACCESSCOMPLEXITY, accessComplexity);
  }
  void add_authentication(::flatbuffers::Offset<::flatbuffers::String> authentication) {
    fbb_.AddOffset(CVSS_V2_0::VT_AUTHENTICATION, authentication);
  }
  void add_confidentialityImpact(::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact) {
    fbb_.AddOffset(CVSS_V2_0::VT_CONFIDENTIALITYIMPACT, confidentialityImpact);
  }
  void add_integrityImpact(::flatbuffers::Offset<::flatbuffers::String> integrityImpact) {
    fbb_.AddOffset(CVSS_V2_0::VT_INTEGRITYIMPACT, integrityImpact);
  }
  void add_availabilityImpact(::flatbuffers::Offset<::flatbuffers::String> availabilityImpact) {
    fbb_.AddOffset(CVSS_V2_0::VT_AVAILABILITYIMPACT, availabilityImpact);
  }
  void add_baseScore(float baseScore) {
    fbb_.AddElement<float>(CVSS_V2_0::VT_BASESCORE, baseScore, 0.0f);
  }
  void add_exploitability(::flatbuffers::Offset<::flatbuffers::String> exploitability) {
    fbb_.AddOffset(CVSS_V2_0::VT_EXPLOITABILITY, exploitability);
  }
  void add_remediationLevel(::flatbuffers::Offset<::flatbuffers::String> remediationLevel) {
    fbb_.AddOffset(CVSS_V2_0::VT_REMEDIATIONLEVEL, remediationLevel);
  }
  void add_reportConfidence(::flatbuffers::Offset<::flatbuffers::String> reportConfidence) {
    fbb_.AddOffset(CVSS_V2_0::VT_REPORTCONFIDENCE, reportConfidence);
  }
  void add_temporalScore(float temporalScore) {
    fbb_.AddElement<float>(CVSS_V2_0::VT_TEMPORALSCORE, temporalScore, 0.0f);
  }
  void add_collateralDamagePotential(::flatbuffers::Offset<::flatbuffers::String> collateralDamagePotential) {
    fbb_.AddOffset(CVSS_V2_0::VT_COLLATERALDAMAGEPOTENTIAL, collateralDamagePotential);
  }
  void add_targetDistribution(::flatbuffers::Offset<::flatbuffers::String> targetDistribution) {
    fbb_.AddOffset(CVSS_V2_0::VT_TARGETDISTRIBUTION, targetDistribution);
  }
  void add_confidentialityRequirement(::flatbuffers::Offset<::flatbuffers::String> confidentialityRequirement) {
    fbb_.AddOffset(CVSS_V2_0::VT_CONFIDENTIALITYREQUIREMENT, confidentialityRequirement);
  }
  void add_integrityRequirement(::flatbuffers::Offset<::flatbuffers::String> integrityRequirement) {
    fbb_.AddOffset(CVSS_V2_0::VT_INTEGRITYREQUIREMENT, integrityRequirement);
  }
  void add_availabilityRequirement(::flatbuffers::Offset<::flatbuffers::String> availabilityRequirement) {
    fbb_.AddOffset(CVSS_V2_0::VT_AVAILABILITYREQUIREMENT, availabilityRequirement);
  }
  void add_environmentalScore(float environmentalScore) {
    fbb_.AddElement<float>(CVSS_V2_0::VT_ENVIRONMENTALSCORE, environmentalScore, 0.0f);
  }
  explicit CVSS_V2_0Builder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CVSS_V2_0> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CVSS_V2_0>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CVSS_V2_0> CreateCVSS_V2_0(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vectorString = 0,
    ::flatbuffers::Offset<::flatbuffers::String> accessVector = 0,
    ::flatbuffers::Offset<::flatbuffers::String> accessComplexity = 0,
    ::flatbuffers::Offset<::flatbuffers::String> authentication = 0,
    ::flatbuffers::Offset<::flatbuffers::String> confidentialityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> integrityImpact = 0,
    ::flatbuffers::Offset<::flatbuffers::String> availabilityImpact = 0,
    float baseScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> exploitability = 0,
    ::flatbuffers::Offset<::flatbuffers::String> remediationLevel = 0,
    ::flatbuffers::Offset<::flatbuffers::String> reportConfidence = 0,
    float temporalScore = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::String> collateralDamagePotential = 0,
    ::flatbuffers::Offset<::flatbuffers::String> targetDistribution = 0,
    ::flatbuffers::Offset<::flatbuffers::String> confidentialityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> integrityRequirement = 0,
    ::flatbuffers::Offset<::flatbuffers::String> availabilityRequirement = 0,
    float environmentalScore = 0.0f) {
  CVSS_V2_0Builder builder_(_fbb);
  builder_.add_environmentalScore(environmentalScore);
  builder_.add_availabilityRequirement(availabilityRequirement);
  builder_.add_integrityRequirement(integrityRequirement);
  builder_.add_confidentialityRequirement(confidentialityRequirement);
  builder_.add_targetDistribution(targetDistribution);
  builder_.add_collateralDamagePotential(collateralDamagePotential);
  builder_.add_temporalScore(temporalScore);
  builder_.add_reportConfidence(reportConfidence);
  builder_.add_remediationLevel(remediationLevel);
  builder_.add_exploitability(exploitability);
  builder_.add_baseScore(baseScore);
  builder_.add_availabilityImpact(availabilityImpact);
  builder_.add_integrityImpact(integrityImpact);
  builder_.add_confidentialityImpact(confidentialityImpact);
  builder_.add_authentication(authentication);
  builder_.add_accessComplexity(accessComplexity);
  builder_.add_accessVector(accessVector);
  builder_.add_vectorString(vectorString);
  builder_.add_version(version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CVSS_V2_0> CreateCVSS_V2_0Direct(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr,
    const char *vectorString = nullptr,
    const char *accessVector = nullptr,
    const char *accessComplexity = nullptr,
    const char *authentication = nullptr,
    const char *confidentialityImpact = nullptr,
    const char *integrityImpact = nullptr,
    const char *availabilityImpact = nullptr,
    float baseScore = 0.0f,
    const char *exploitability = nullptr,
    const char *remediationLevel = nullptr,
    const char *reportConfidence = nullptr,
    float temporalScore = 0.0f,
    const char *collateralDamagePotential = nullptr,
    const char *targetDistribution = nullptr,
    const char *confidentialityRequirement = nullptr,
    const char *integrityRequirement = nullptr,
    const char *availabilityRequirement = nullptr,
    float environmentalScore = 0.0f) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto vectorString__ = vectorString ? _fbb.CreateString(vectorString) : 0;
  auto accessVector__ = accessVector ? _fbb.CreateString(accessVector) : 0;
  auto accessComplexity__ = accessComplexity ? _fbb.CreateString(accessComplexity) : 0;
  auto authentication__ = authentication ? _fbb.CreateString(authentication) : 0;
  auto confidentialityImpact__ = confidentialityImpact ? _fbb.CreateString(confidentialityImpact) : 0;
  auto integrityImpact__ = integrityImpact ? _fbb.CreateString(integrityImpact) : 0;
  auto availabilityImpact__ = availabilityImpact ? _fbb.CreateString(availabilityImpact) : 0;
  auto exploitability__ = exploitability ? _fbb.CreateString(exploitability) : 0;
  auto remediationLevel__ = remediationLevel ? _fbb.CreateString(remediationLevel) : 0;
  auto reportConfidence__ = reportConfidence ? _fbb.CreateString(reportConfidence) : 0;
  auto collateralDamagePotential__ = collateralDamagePotential ? _fbb.CreateString(collateralDamagePotential) : 0;
  auto targetDistribution__ = targetDistribution ? _fbb.CreateString(targetDistribution) : 0;
  auto confidentialityRequirement__ = confidentialityRequirement ? _fbb.CreateString(confidentialityRequirement) : 0;
  auto integrityRequirement__ = integrityRequirement ? _fbb.CreateString(integrityRequirement) : 0;
  auto availabilityRequirement__ = availabilityRequirement ? _fbb.CreateString(availabilityRequirement) : 0;
  return cve_v5::CreateCVSS_V2_0(
      _fbb,
      version__,
      vectorString__,
      accessVector__,
      accessComplexity__,
      authentication__,
      confidentialityImpact__,
      integrityImpact__,
      availabilityImpact__,
      baseScore,
      exploitability__,
      remediationLevel__,
      reportConfidence__,
      temporalScore,
      collateralDamagePotential__,
      targetDistribution__,
      confidentialityRequirement__,
      integrityRequirement__,
      availabilityRequirement__,
      environmentalScore);
}

struct StringifiedObject FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StringifiedObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const ::flatbuffers::String *data() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyString(data()) &&
           verifier.EndTable();
  }
};

struct StringifiedObjectBuilder {
  typedef StringifiedObject Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(::flatbuffers::Offset<::flatbuffers::String> data) {
    fbb_.AddOffset(StringifiedObject::VT_DATA, data);
  }
  explicit StringifiedObjectBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StringifiedObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StringifiedObject>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StringifiedObject> CreateStringifiedObject(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> data = 0) {
  StringifiedObjectBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StringifiedObject> CreateStringifiedObjectDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  auto data__ = data ? _fbb.CreateString(data) : 0;
  return cve_v5::CreateStringifiedObject(
      _fbb,
      data__);
}

struct SupportingMedia FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef SupportingMediaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BASE64 = 6,
    VT_VALUE = 8
  };
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  bool base64() const {
    return GetField<uint8_t>(VT_BASE64, 0) != 0;
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<uint8_t>(verifier, VT_BASE64, 1) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct SupportingMediaBuilder {
  typedef SupportingMedia Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(SupportingMedia::VT_TYPE, type);
  }
  void add_base64(bool base64) {
    fbb_.AddElement<uint8_t>(SupportingMedia::VT_BASE64, static_cast<uint8_t>(base64), 0);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(SupportingMedia::VT_VALUE, value);
  }
  explicit SupportingMediaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<SupportingMedia> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<SupportingMedia>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<SupportingMedia> CreateSupportingMedia(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    bool base64 = false,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  SupportingMediaBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_type(type);
  builder_.add_base64(base64);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<SupportingMedia> CreateSupportingMediaDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    bool base64 = false,
    const char *value = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return cve_v5::CreateSupportingMedia(
      _fbb,
      type__,
      base64,
      value__);
}

struct Description FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DescriptionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LANG = 4,
    VT_VALUE = 6,
    VT_SUPPORTINGMEDIA = 8
  };
  const ::flatbuffers::String *lang() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LANG);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::SupportingMedia>> *supportingMedia() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::SupportingMedia>> *>(VT_SUPPORTINGMEDIA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LANG) &&
           verifier.VerifyString(lang()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           VerifyOffset(verifier, VT_SUPPORTINGMEDIA) &&
           verifier.VerifyVector(supportingMedia()) &&
           verifier.VerifyVectorOfTables(supportingMedia()) &&
           verifier.EndTable();
  }
};

struct DescriptionBuilder {
  typedef Description Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lang(::flatbuffers::Offset<::flatbuffers::String> lang) {
    fbb_.AddOffset(Description::VT_LANG, lang);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Description::VT_VALUE, value);
  }
  void add_supportingMedia(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::SupportingMedia>>> supportingMedia) {
    fbb_.AddOffset(Description::VT_SUPPORTINGMEDIA, supportingMedia);
  }
  explicit DescriptionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Description> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Description>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Description> CreateDescription(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> lang = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::SupportingMedia>>> supportingMedia = 0) {
  DescriptionBuilder builder_(_fbb);
  builder_.add_supportingMedia(supportingMedia);
  builder_.add_value(value);
  builder_.add_lang(lang);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Description> CreateDescriptionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *lang = nullptr,
    const char *value = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::SupportingMedia>> *supportingMedia = nullptr) {
  auto lang__ = lang ? _fbb.CreateString(lang) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  auto supportingMedia__ = supportingMedia ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::SupportingMedia>>(*supportingMedia) : 0;
  return cve_v5::CreateDescription(
      _fbb,
      lang__,
      value__,
      supportingMedia__);
}

struct Change FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ChangeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AT = 4,
    VT_STATUS = 6
  };
  const ::flatbuffers::String *at() const {
    return GetPointer<const ::flatbuffers::String *>(VT_AT);
  }
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AT) &&
           verifier.VerifyString(at()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           verifier.EndTable();
  }
};

struct ChangeBuilder {
  typedef Change Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_at(::flatbuffers::Offset<::flatbuffers::String> at) {
    fbb_.AddOffset(Change::VT_AT, at);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(Change::VT_STATUS, status);
  }
  explicit ChangeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Change> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Change>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Change> CreateChange(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> at = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0) {
  ChangeBuilder builder_(_fbb);
  builder_.add_status(status);
  builder_.add_at(at);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Change> CreateChangeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *at = nullptr,
    const char *status = nullptr) {
  auto at__ = at ? _fbb.CreateString(at) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  return cve_v5::CreateChange(
      _fbb,
      at__,
      status__);
}

struct Version FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VersionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_STATUS = 6,
    VT_VERSIONTYPE = 8,
    VT_LESSTHAN = 10,
    VT_LESSTHANOREQUAL = 12,
    VT_CHANGES = 14
  };
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  const ::flatbuffers::String *status() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATUS);
  }
  const ::flatbuffers::String *versionType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSIONTYPE);
  }
  const ::flatbuffers::String *lessThan() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LESSTHAN);
  }
  const ::flatbuffers::String *lessThanOrEqual() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LESSTHANOREQUAL);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Change>> *changes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Change>> *>(VT_CHANGES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_STATUS) &&
           verifier.VerifyString(status()) &&
           VerifyOffset(verifier, VT_VERSIONTYPE) &&
           verifier.VerifyString(versionType()) &&
           VerifyOffset(verifier, VT_LESSTHAN) &&
           verifier.VerifyString(lessThan()) &&
           VerifyOffset(verifier, VT_LESSTHANOREQUAL) &&
           verifier.VerifyString(lessThanOrEqual()) &&
           VerifyOffset(verifier, VT_CHANGES) &&
           verifier.VerifyVector(changes()) &&
           verifier.VerifyVectorOfTables(changes()) &&
           verifier.EndTable();
  }
};

struct VersionBuilder {
  typedef Version Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(Version::VT_VERSION, version);
  }
  void add_status(::flatbuffers::Offset<::flatbuffers::String> status) {
    fbb_.AddOffset(Version::VT_STATUS, status);
  }
  void add_versionType(::flatbuffers::Offset<::flatbuffers::String> versionType) {
    fbb_.AddOffset(Version::VT_VERSIONTYPE, versionType);
  }
  void add_lessThan(::flatbuffers::Offset<::flatbuffers::String> lessThan) {
    fbb_.AddOffset(Version::VT_LESSTHAN, lessThan);
  }
  void add_lessThanOrEqual(::flatbuffers::Offset<::flatbuffers::String> lessThanOrEqual) {
    fbb_.AddOffset(Version::VT_LESSTHANOREQUAL, lessThanOrEqual);
  }
  void add_changes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Change>>> changes) {
    fbb_.AddOffset(Version::VT_CHANGES, changes);
  }
  explicit VersionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Version> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Version>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Version> CreateVersion(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::String> status = 0,
    ::flatbuffers::Offset<::flatbuffers::String> versionType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lessThan = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lessThanOrEqual = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Change>>> changes = 0) {
  VersionBuilder builder_(_fbb);
  builder_.add_changes(changes);
  builder_.add_lessThanOrEqual(lessThanOrEqual);
  builder_.add_lessThan(lessThan);
  builder_.add_versionType(versionType);
  builder_.add_status(status);
  builder_.add_version(version);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Version> CreateVersionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *version = nullptr,
    const char *status = nullptr,
    const char *versionType = nullptr,
    const char *lessThan = nullptr,
    const char *lessThanOrEqual = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Change>> *changes = nullptr) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto status__ = status ? _fbb.CreateString(status) : 0;
  auto versionType__ = versionType ? _fbb.CreateString(versionType) : 0;
  auto lessThan__ = lessThan ? _fbb.CreateString(lessThan) : 0;
  auto lessThanOrEqual__ = lessThanOrEqual ? _fbb.CreateString(lessThanOrEqual) : 0;
  auto changes__ = changes ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Change>>(*changes) : 0;
  return cve_v5::CreateVersion(
      _fbb,
      version__,
      status__,
      versionType__,
      lessThan__,
      lessThanOrEqual__,
      changes__);
}

struct ProgramRoutine FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProgramRoutineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct ProgramRoutineBuilder {
  typedef ProgramRoutine Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(ProgramRoutine::VT_NAME, name);
  }
  explicit ProgramRoutineBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProgramRoutine> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProgramRoutine>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProgramRoutine> CreateProgramRoutine(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0) {
  ProgramRoutineBuilder builder_(_fbb);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProgramRoutine> CreateProgramRoutineDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return cve_v5::CreateProgramRoutine(
      _fbb,
      name__);
}

struct Affected FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AffectedBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VENDOR = 4,
    VT_PRODUCT = 6,
    VT_COLLECTIONURL = 8,
    VT_PACKAGENAME = 10,
    VT_CPES = 12,
    VT_MODULES = 14,
    VT_PROGRAMFILES = 16,
    VT_PROGRAMROUTINES = 18,
    VT_PLATFORMS = 20,
    VT_REPO = 22,
    VT_DEFAULTSTATUS = 24,
    VT_VERSIONS = 26
  };
  const ::flatbuffers::String *vendor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VENDOR);
  }
  const ::flatbuffers::String *product() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PRODUCT);
  }
  const ::flatbuffers::String *collectionURL() const {
    return GetPointer<const ::flatbuffers::String *>(VT_COLLECTIONURL);
  }
  const ::flatbuffers::String *packageName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_PACKAGENAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *cpes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_CPES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *modules() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_MODULES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *programFiles() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PROGRAMFILES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProgramRoutine>> *programRoutines() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProgramRoutine>> *>(VT_PROGRAMROUTINES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *platforms() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PLATFORMS);
  }
  const ::flatbuffers::String *repo() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REPO);
  }
  const ::flatbuffers::String *defaultStatus() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEFAULTSTATUS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Version>> *versions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Version>> *>(VT_VERSIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VENDOR) &&
           verifier.VerifyString(vendor()) &&
           VerifyOffset(verifier, VT_PRODUCT) &&
           verifier.VerifyString(product()) &&
           VerifyOffset(verifier, VT_COLLECTIONURL) &&
           verifier.VerifyString(collectionURL()) &&
           VerifyOffset(verifier, VT_PACKAGENAME) &&
           verifier.VerifyString(packageName()) &&
           VerifyOffset(verifier, VT_CPES) &&
           verifier.VerifyVector(cpes()) &&
           verifier.VerifyVectorOfStrings(cpes()) &&
           VerifyOffset(verifier, VT_MODULES) &&
           verifier.VerifyVector(modules()) &&
           verifier.VerifyVectorOfStrings(modules()) &&
           VerifyOffset(verifier, VT_PROGRAMFILES) &&
           verifier.VerifyVector(programFiles()) &&
           verifier.VerifyVectorOfStrings(programFiles()) &&
           VerifyOffset(verifier, VT_PROGRAMROUTINES) &&
           verifier.VerifyVector(programRoutines()) &&
           verifier.VerifyVectorOfTables(programRoutines()) &&
           VerifyOffset(verifier, VT_PLATFORMS) &&
           verifier.VerifyVector(platforms()) &&
           verifier.VerifyVectorOfStrings(platforms()) &&
           VerifyOffset(verifier, VT_REPO) &&
           verifier.VerifyString(repo()) &&
           VerifyOffset(verifier, VT_DEFAULTSTATUS) &&
           verifier.VerifyString(defaultStatus()) &&
           VerifyOffset(verifier, VT_VERSIONS) &&
           verifier.VerifyVector(versions()) &&
           verifier.VerifyVectorOfTables(versions()) &&
           verifier.EndTable();
  }
};

struct AffectedBuilder {
  typedef Affected Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vendor(::flatbuffers::Offset<::flatbuffers::String> vendor) {
    fbb_.AddOffset(Affected::VT_VENDOR, vendor);
  }
  void add_product(::flatbuffers::Offset<::flatbuffers::String> product) {
    fbb_.AddOffset(Affected::VT_PRODUCT, product);
  }
  void add_collectionURL(::flatbuffers::Offset<::flatbuffers::String> collectionURL) {
    fbb_.AddOffset(Affected::VT_COLLECTIONURL, collectionURL);
  }
  void add_packageName(::flatbuffers::Offset<::flatbuffers::String> packageName) {
    fbb_.AddOffset(Affected::VT_PACKAGENAME, packageName);
  }
  void add_cpes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cpes) {
    fbb_.AddOffset(Affected::VT_CPES, cpes);
  }
  void add_modules(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> modules) {
    fbb_.AddOffset(Affected::VT_MODULES, modules);
  }
  void add_programFiles(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> programFiles) {
    fbb_.AddOffset(Affected::VT_PROGRAMFILES, programFiles);
  }
  void add_programRoutines(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProgramRoutine>>> programRoutines) {
    fbb_.AddOffset(Affected::VT_PROGRAMROUTINES, programRoutines);
  }
  void add_platforms(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> platforms) {
    fbb_.AddOffset(Affected::VT_PLATFORMS, platforms);
  }
  void add_repo(::flatbuffers::Offset<::flatbuffers::String> repo) {
    fbb_.AddOffset(Affected::VT_REPO, repo);
  }
  void add_defaultStatus(::flatbuffers::Offset<::flatbuffers::String> defaultStatus) {
    fbb_.AddOffset(Affected::VT_DEFAULTSTATUS, defaultStatus);
  }
  void add_versions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Version>>> versions) {
    fbb_.AddOffset(Affected::VT_VERSIONS, versions);
  }
  explicit AffectedBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Affected> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Affected>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Affected> CreateAffected(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> vendor = 0,
    ::flatbuffers::Offset<::flatbuffers::String> product = 0,
    ::flatbuffers::Offset<::flatbuffers::String> collectionURL = 0,
    ::flatbuffers::Offset<::flatbuffers::String> packageName = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> cpes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> modules = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> programFiles = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProgramRoutine>>> programRoutines = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> platforms = 0,
    ::flatbuffers::Offset<::flatbuffers::String> repo = 0,
    ::flatbuffers::Offset<::flatbuffers::String> defaultStatus = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Version>>> versions = 0) {
  AffectedBuilder builder_(_fbb);
  builder_.add_versions(versions);
  builder_.add_defaultStatus(defaultStatus);
  builder_.add_repo(repo);
  builder_.add_platforms(platforms);
  builder_.add_programRoutines(programRoutines);
  builder_.add_programFiles(programFiles);
  builder_.add_modules(modules);
  builder_.add_cpes(cpes);
  builder_.add_packageName(packageName);
  builder_.add_collectionURL(collectionURL);
  builder_.add_product(product);
  builder_.add_vendor(vendor);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Affected> CreateAffectedDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *vendor = nullptr,
    const char *product = nullptr,
    const char *collectionURL = nullptr,
    const char *packageName = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *cpes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *modules = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *programFiles = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::ProgramRoutine>> *programRoutines = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *platforms = nullptr,
    const char *repo = nullptr,
    const char *defaultStatus = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Version>> *versions = nullptr) {
  auto vendor__ = vendor ? _fbb.CreateString(vendor) : 0;
  auto product__ = product ? _fbb.CreateString(product) : 0;
  auto collectionURL__ = collectionURL ? _fbb.CreateString(collectionURL) : 0;
  auto packageName__ = packageName ? _fbb.CreateString(packageName) : 0;
  auto cpes__ = cpes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*cpes) : 0;
  auto modules__ = modules ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*modules) : 0;
  auto programFiles__ = programFiles ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*programFiles) : 0;
  auto programRoutines__ = programRoutines ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::ProgramRoutine>>(*programRoutines) : 0;
  auto platforms__ = platforms ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*platforms) : 0;
  auto repo__ = repo ? _fbb.CreateString(repo) : 0;
  auto defaultStatus__ = defaultStatus ? _fbb.CreateString(defaultStatus) : 0;
  auto versions__ = versions ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Version>>(*versions) : 0;
  return cve_v5::CreateAffected(
      _fbb,
      vendor__,
      product__,
      collectionURL__,
      packageName__,
      cpes__,
      modules__,
      programFiles__,
      programRoutines__,
      platforms__,
      repo__,
      defaultStatus__,
      versions__);
}

struct Reference FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ReferenceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_URL = 4,
    VT_NAME = 6,
    VT_TAGS = 8
  };
  const ::flatbuffers::String *url() const {
    return GetPointer<const ::flatbuffers::String *>(VT_URL);
  }
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_URL) &&
           verifier.VerifyString(url()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           verifier.EndTable();
  }
};

struct ReferenceBuilder {
  typedef Reference Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_url(::flatbuffers::Offset<::flatbuffers::String> url) {
    fbb_.AddOffset(Reference::VT_URL, url);
  }
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Reference::VT_NAME, name);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(Reference::VT_TAGS, tags);
  }
  explicit ReferenceBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Reference> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Reference>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Reference> CreateReference(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> url = 0,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0) {
  ReferenceBuilder builder_(_fbb);
  builder_.add_tags(tags);
  builder_.add_name(name);
  builder_.add_url(url);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Reference> CreateReferenceDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *url = nullptr,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr) {
  auto url__ = url ? _fbb.CreateString(url) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  return cve_v5::CreateReference(
      _fbb,
      url__,
      name__,
      tags__);
}

struct DescriptionProblemTypes FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef DescriptionProblemTypesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LANG = 4,
    VT_DESCRIPTION = 6,
    VT_CWEID = 8,
    VT_TYPE = 10
  };
  const ::flatbuffers::String *lang() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LANG);
  }
  const ::flatbuffers::String *description() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DESCRIPTION);
  }
  const ::flatbuffers::String *cweId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CWEID);
  }
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LANG) &&
           verifier.VerifyString(lang()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_CWEID) &&
           verifier.VerifyString(cweId()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           verifier.EndTable();
  }
};

struct DescriptionProblemTypesBuilder {
  typedef DescriptionProblemTypes Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lang(::flatbuffers::Offset<::flatbuffers::String> lang) {
    fbb_.AddOffset(DescriptionProblemTypes::VT_LANG, lang);
  }
  void add_description(::flatbuffers::Offset<::flatbuffers::String> description) {
    fbb_.AddOffset(DescriptionProblemTypes::VT_DESCRIPTION, description);
  }
  void add_cweId(::flatbuffers::Offset<::flatbuffers::String> cweId) {
    fbb_.AddOffset(DescriptionProblemTypes::VT_CWEID, cweId);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(DescriptionProblemTypes::VT_TYPE, type);
  }
  explicit DescriptionProblemTypesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<DescriptionProblemTypes> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<DescriptionProblemTypes>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<DescriptionProblemTypes> CreateDescriptionProblemTypes(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> lang = 0,
    ::flatbuffers::Offset<::flatbuffers::String> description = 0,
    ::flatbuffers::Offset<::flatbuffers::String> cweId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0) {
  DescriptionProblemTypesBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_cweId(cweId);
  builder_.add_description(description);
  builder_.add_lang(lang);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<DescriptionProblemTypes> CreateDescriptionProblemTypesDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *lang = nullptr,
    const char *description = nullptr,
    const char *cweId = nullptr,
    const char *type = nullptr) {
  auto lang__ = lang ? _fbb.CreateString(lang) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto cweId__ = cweId ? _fbb.CreateString(cweId) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return cve_v5::CreateDescriptionProblemTypes(
      _fbb,
      lang__,
      description__,
      cweId__,
      type__);
}

struct ProblemType FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProblemTypeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DESCRIPTIONS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::DescriptionProblemTypes>> *descriptions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::DescriptionProblemTypes>> *>(VT_DESCRIPTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DESCRIPTIONS) &&
           verifier.VerifyVector(descriptions()) &&
           verifier.VerifyVectorOfTables(descriptions()) &&
           verifier.EndTable();
  }
};

struct ProblemTypeBuilder {
  typedef ProblemType Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_descriptions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::DescriptionProblemTypes>>> descriptions) {
    fbb_.AddOffset(ProblemType::VT_DESCRIPTIONS, descriptions);
  }
  explicit ProblemTypeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProblemType> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProblemType>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProblemType> CreateProblemType(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::DescriptionProblemTypes>>> descriptions = 0) {
  ProblemTypeBuilder builder_(_fbb);
  builder_.add_descriptions(descriptions);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProblemType> CreateProblemTypeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<cve_v5::DescriptionProblemTypes>> *descriptions = nullptr) {
  auto descriptions__ = descriptions ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::DescriptionProblemTypes>>(*descriptions) : 0;
  return cve_v5::CreateProblemType(
      _fbb,
      descriptions__);
}

struct Impact FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ImpactBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CAPECID = 4,
    VT_DESCRIPTIONS = 6
  };
  const ::flatbuffers::String *capecId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CAPECID);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *descriptions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_DESCRIPTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CAPECID) &&
           verifier.VerifyString(capecId()) &&
           VerifyOffset(verifier, VT_DESCRIPTIONS) &&
           verifier.VerifyVector(descriptions()) &&
           verifier.VerifyVectorOfTables(descriptions()) &&
           verifier.EndTable();
  }
};

struct ImpactBuilder {
  typedef Impact Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_capecId(::flatbuffers::Offset<::flatbuffers::String> capecId) {
    fbb_.AddOffset(Impact::VT_CAPECID, capecId);
  }
  void add_descriptions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> descriptions) {
    fbb_.AddOffset(Impact::VT_DESCRIPTIONS, descriptions);
  }
  explicit ImpactBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Impact> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Impact>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Impact> CreateImpact(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> capecId = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> descriptions = 0) {
  ImpactBuilder builder_(_fbb);
  builder_.add_descriptions(descriptions);
  builder_.add_capecId(capecId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Impact> CreateImpactDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *capecId = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *descriptions = nullptr) {
  auto capecId__ = capecId ? _fbb.CreateString(capecId) : 0;
  auto descriptions__ = descriptions ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*descriptions) : 0;
  return cve_v5::CreateImpact(
      _fbb,
      capecId__,
      descriptions__);
}

struct Other FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef OtherBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_CONTENT = 6
  };
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  const cve_v5::StringifiedObject *content() const {
    return GetPointer<const cve_v5::StringifiedObject *>(VT_CONTENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_CONTENT) &&
           verifier.VerifyTable(content()) &&
           verifier.EndTable();
  }
};

struct OtherBuilder {
  typedef Other Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Other::VT_TYPE, type);
  }
  void add_content(::flatbuffers::Offset<cve_v5::StringifiedObject> content) {
    fbb_.AddOffset(Other::VT_CONTENT, content);
  }
  explicit OtherBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Other> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Other>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Other> CreateOther(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<cve_v5::StringifiedObject> content = 0) {
  OtherBuilder builder_(_fbb);
  builder_.add_content(content);
  builder_.add_type(type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Other> CreateOtherDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    ::flatbuffers::Offset<cve_v5::StringifiedObject> content = 0) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return cve_v5::CreateOther(
      _fbb,
      type__,
      content);
}

struct Scenario FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScenarioBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LANG = 4,
    VT_VALUE = 6
  };
  const ::flatbuffers::String *lang() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LANG);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LANG) &&
           verifier.VerifyString(lang()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct ScenarioBuilder {
  typedef Scenario Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lang(::flatbuffers::Offset<::flatbuffers::String> lang) {
    fbb_.AddOffset(Scenario::VT_LANG, lang);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Scenario::VT_VALUE, value);
  }
  explicit ScenarioBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Scenario> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Scenario>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Scenario> CreateScenario(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> lang = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  ScenarioBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_lang(lang);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Scenario> CreateScenarioDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *lang = nullptr,
    const char *value = nullptr) {
  auto lang__ = lang ? _fbb.CreateString(lang) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return cve_v5::CreateScenario(
      _fbb,
      lang__,
      value__);
}

struct Metric FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MetricBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_FORMAT = 4,
    VT_SCENARIOS = 6,
    VT_CVSSV3_1 = 8,
    VT_CVSSV3_0 = 10,
    VT_CVSSV2_0 = 12,
    VT_OTHER = 14
  };
  const ::flatbuffers::String *format() const {
    return GetPointer<const ::flatbuffers::String *>(VT_FORMAT);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Scenario>> *scenarios() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Scenario>> *>(VT_SCENARIOS);
  }
  const cve_v5::CVSS_V3_1 *cvssV3_1() const {
    return GetPointer<const cve_v5::CVSS_V3_1 *>(VT_CVSSV3_1);
  }
  const cve_v5::CVSS_V3_0 *cvssV3_0() const {
    return GetPointer<const cve_v5::CVSS_V3_0 *>(VT_CVSSV3_0);
  }
  const cve_v5::CVSS_V2_0 *cvssV2_0() const {
    return GetPointer<const cve_v5::CVSS_V2_0 *>(VT_CVSSV2_0);
  }
  const cve_v5::Other *other() const {
    return GetPointer<const cve_v5::Other *>(VT_OTHER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FORMAT) &&
           verifier.VerifyString(format()) &&
           VerifyOffset(verifier, VT_SCENARIOS) &&
           verifier.VerifyVector(scenarios()) &&
           verifier.VerifyVectorOfTables(scenarios()) &&
           VerifyOffset(verifier, VT_CVSSV3_1) &&
           verifier.VerifyTable(cvssV3_1()) &&
           VerifyOffset(verifier, VT_CVSSV3_0) &&
           verifier.VerifyTable(cvssV3_0()) &&
           VerifyOffset(verifier, VT_CVSSV2_0) &&
           verifier.VerifyTable(cvssV2_0()) &&
           VerifyOffset(verifier, VT_OTHER) &&
           verifier.VerifyTable(other()) &&
           verifier.EndTable();
  }
};

struct MetricBuilder {
  typedef Metric Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_format(::flatbuffers::Offset<::flatbuffers::String> format) {
    fbb_.AddOffset(Metric::VT_FORMAT, format);
  }
  void add_scenarios(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Scenario>>> scenarios) {
    fbb_.AddOffset(Metric::VT_SCENARIOS, scenarios);
  }
  void add_cvssV3_1(::flatbuffers::Offset<cve_v5::CVSS_V3_1> cvssV3_1) {
    fbb_.AddOffset(Metric::VT_CVSSV3_1, cvssV3_1);
  }
  void add_cvssV3_0(::flatbuffers::Offset<cve_v5::CVSS_V3_0> cvssV3_0) {
    fbb_.AddOffset(Metric::VT_CVSSV3_0, cvssV3_0);
  }
  void add_cvssV2_0(::flatbuffers::Offset<cve_v5::CVSS_V2_0> cvssV2_0) {
    fbb_.AddOffset(Metric::VT_CVSSV2_0, cvssV2_0);
  }
  void add_other(::flatbuffers::Offset<cve_v5::Other> other) {
    fbb_.AddOffset(Metric::VT_OTHER, other);
  }
  explicit MetricBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Metric> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Metric>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Metric> CreateMetric(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> format = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Scenario>>> scenarios = 0,
    ::flatbuffers::Offset<cve_v5::CVSS_V3_1> cvssV3_1 = 0,
    ::flatbuffers::Offset<cve_v5::CVSS_V3_0> cvssV3_0 = 0,
    ::flatbuffers::Offset<cve_v5::CVSS_V2_0> cvssV2_0 = 0,
    ::flatbuffers::Offset<cve_v5::Other> other = 0) {
  MetricBuilder builder_(_fbb);
  builder_.add_other(other);
  builder_.add_cvssV2_0(cvssV2_0);
  builder_.add_cvssV3_0(cvssV3_0);
  builder_.add_cvssV3_1(cvssV3_1);
  builder_.add_scenarios(scenarios);
  builder_.add_format(format);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Metric> CreateMetricDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *format = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Scenario>> *scenarios = nullptr,
    ::flatbuffers::Offset<cve_v5::CVSS_V3_1> cvssV3_1 = 0,
    ::flatbuffers::Offset<cve_v5::CVSS_V3_0> cvssV3_0 = 0,
    ::flatbuffers::Offset<cve_v5::CVSS_V2_0> cvssV2_0 = 0,
    ::flatbuffers::Offset<cve_v5::Other> other = 0) {
  auto format__ = format ? _fbb.CreateString(format) : 0;
  auto scenarios__ = scenarios ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Scenario>>(*scenarios) : 0;
  return cve_v5::CreateMetric(
      _fbb,
      format__,
      scenarios__,
      cvssV3_1,
      cvssV3_0,
      cvssV2_0,
      other);
}

struct Timeline FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TimelineBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TIME = 4,
    VT_LANG = 6,
    VT_VALUE = 8
  };
  const ::flatbuffers::String *time() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TIME);
  }
  const ::flatbuffers::String *lang() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LANG);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TIME) &&
           verifier.VerifyString(time()) &&
           VerifyOffset(verifier, VT_LANG) &&
           verifier.VerifyString(lang()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct TimelineBuilder {
  typedef Timeline Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_time(::flatbuffers::Offset<::flatbuffers::String> time) {
    fbb_.AddOffset(Timeline::VT_TIME, time);
  }
  void add_lang(::flatbuffers::Offset<::flatbuffers::String> lang) {
    fbb_.AddOffset(Timeline::VT_LANG, lang);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Timeline::VT_VALUE, value);
  }
  explicit TimelineBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Timeline> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Timeline>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Timeline> CreateTimeline(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> time = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lang = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0) {
  TimelineBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_lang(lang);
  builder_.add_time(time);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Timeline> CreateTimelineDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *time = nullptr,
    const char *lang = nullptr,
    const char *value = nullptr) {
  auto time__ = time ? _fbb.CreateString(time) : 0;
  auto lang__ = lang ? _fbb.CreateString(lang) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return cve_v5::CreateTimeline(
      _fbb,
      time__,
      lang__,
      value__);
}

struct Credit FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CreditBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LANG = 4,
    VT_VALUE = 6,
    VT_USER = 8,
    VT_TYPE = 10
  };
  const ::flatbuffers::String *lang() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LANG);
  }
  const ::flatbuffers::String *value() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VALUE);
  }
  const ::flatbuffers::String *user() const {
    return GetPointer<const ::flatbuffers::String *>(VT_USER);
  }
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_LANG) &&
           verifier.VerifyString(lang()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           VerifyOffset(verifier, VT_USER) &&
           verifier.VerifyString(user()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           verifier.EndTable();
  }
};

struct CreditBuilder {
  typedef Credit Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_lang(::flatbuffers::Offset<::flatbuffers::String> lang) {
    fbb_.AddOffset(Credit::VT_LANG, lang);
  }
  void add_value(::flatbuffers::Offset<::flatbuffers::String> value) {
    fbb_.AddOffset(Credit::VT_VALUE, value);
  }
  void add_user(::flatbuffers::Offset<::flatbuffers::String> user) {
    fbb_.AddOffset(Credit::VT_USER, user);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Credit::VT_TYPE, type);
  }
  explicit CreditBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Credit> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Credit>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Credit> CreateCredit(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> lang = 0,
    ::flatbuffers::Offset<::flatbuffers::String> value = 0,
    ::flatbuffers::Offset<::flatbuffers::String> user = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0) {
  CreditBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_user(user);
  builder_.add_value(value);
  builder_.add_lang(lang);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Credit> CreateCreditDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *lang = nullptr,
    const char *value = nullptr,
    const char *user = nullptr,
    const char *type = nullptr) {
  auto lang__ = lang ? _fbb.CreateString(lang) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  auto user__ = user ? _fbb.CreateString(user) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return cve_v5::CreateCredit(
      _fbb,
      lang__,
      value__,
      user__,
      type__);
}

struct Remediation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RemediationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANYOF = 4,
    VT_PRODUCTS = 6,
    VT_TYPE = 8
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *anyOf() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ANYOF);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *products() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PRODUCTS);
  }
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ANYOF) &&
           verifier.VerifyVector(anyOf()) &&
           verifier.VerifyVectorOfStrings(anyOf()) &&
           VerifyOffset(verifier, VT_PRODUCTS) &&
           verifier.VerifyVector(products()) &&
           verifier.VerifyVectorOfStrings(products()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           verifier.EndTable();
  }
};

struct RemediationBuilder {
  typedef Remediation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_anyOf(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> anyOf) {
    fbb_.AddOffset(Remediation::VT_ANYOF, anyOf);
  }
  void add_products(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> products) {
    fbb_.AddOffset(Remediation::VT_PRODUCTS, products);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(Remediation::VT_TYPE, type);
  }
  explicit RemediationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Remediation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Remediation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Remediation> CreateRemediation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> anyOf = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> products = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0) {
  RemediationBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_products(products);
  builder_.add_anyOf(anyOf);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Remediation> CreateRemediationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *anyOf = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *products = nullptr,
    const char *type = nullptr) {
  auto anyOf__ = anyOf ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*anyOf) : 0;
  auto products__ = products ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*products) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return cve_v5::CreateRemediation(
      _fbb,
      anyOf__,
      products__,
      type__);
}

struct Remediations FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RemediationsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WINDOWS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Remediation>> *windows() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Remediation>> *>(VT_WINDOWS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WINDOWS) &&
           verifier.VerifyVector(windows()) &&
           verifier.VerifyVectorOfTables(windows()) &&
           verifier.EndTable();
  }
};

struct RemediationsBuilder {
  typedef Remediations Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_windows(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Remediation>>> windows) {
    fbb_.AddOffset(Remediations::VT_WINDOWS, windows);
  }
  explicit RemediationsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Remediations> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Remediations>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Remediations> CreateRemediations(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Remediation>>> windows = 0) {
  RemediationsBuilder builder_(_fbb);
  builder_.add_windows(windows);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Remediations> CreateRemediationsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<cve_v5::Remediation>> *windows = nullptr) {
  auto windows__ = windows ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Remediation>>(*windows) : 0;
  return cve_v5::CreateRemediations(
      _fbb,
      windows__);
}

struct ProviderMetadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProviderMetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORGID = 4,
    VT_SHORTNAME = 6,
    VT_DATEUPDATED = 8,
    VT_X_SUBSHORTNAME = 10
  };
  const ::flatbuffers::String *orgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ORGID);
  }
  const ::flatbuffers::String *shortName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SHORTNAME);
  }
  const ::flatbuffers::String *dateUpdated() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEUPDATED);
  }
  const ::flatbuffers::String *x_subShortName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_X_SUBSHORTNAME);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ORGID) &&
           verifier.VerifyString(orgId()) &&
           VerifyOffset(verifier, VT_SHORTNAME) &&
           verifier.VerifyString(shortName()) &&
           VerifyOffset(verifier, VT_DATEUPDATED) &&
           verifier.VerifyString(dateUpdated()) &&
           VerifyOffset(verifier, VT_X_SUBSHORTNAME) &&
           verifier.VerifyString(x_subShortName()) &&
           verifier.EndTable();
  }
};

struct ProviderMetadataBuilder {
  typedef ProviderMetadata Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_orgId(::flatbuffers::Offset<::flatbuffers::String> orgId) {
    fbb_.AddOffset(ProviderMetadata::VT_ORGID, orgId);
  }
  void add_shortName(::flatbuffers::Offset<::flatbuffers::String> shortName) {
    fbb_.AddOffset(ProviderMetadata::VT_SHORTNAME, shortName);
  }
  void add_dateUpdated(::flatbuffers::Offset<::flatbuffers::String> dateUpdated) {
    fbb_.AddOffset(ProviderMetadata::VT_DATEUPDATED, dateUpdated);
  }
  void add_x_subShortName(::flatbuffers::Offset<::flatbuffers::String> x_subShortName) {
    fbb_.AddOffset(ProviderMetadata::VT_X_SUBSHORTNAME, x_subShortName);
  }
  explicit ProviderMetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProviderMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProviderMetadata>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProviderMetadata> CreateProviderMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> orgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> shortName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dateUpdated = 0,
    ::flatbuffers::Offset<::flatbuffers::String> x_subShortName = 0) {
  ProviderMetadataBuilder builder_(_fbb);
  builder_.add_x_subShortName(x_subShortName);
  builder_.add_dateUpdated(dateUpdated);
  builder_.add_shortName(shortName);
  builder_.add_orgId(orgId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProviderMetadata> CreateProviderMetadataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *orgId = nullptr,
    const char *shortName = nullptr,
    const char *dateUpdated = nullptr,
    const char *x_subShortName = nullptr) {
  auto orgId__ = orgId ? _fbb.CreateString(orgId) : 0;
  auto shortName__ = shortName ? _fbb.CreateString(shortName) : 0;
  auto dateUpdated__ = dateUpdated ? _fbb.CreateString(dateUpdated) : 0;
  auto x_subShortName__ = x_subShortName ? _fbb.CreateString(x_subShortName) : 0;
  return cve_v5::CreateProviderMetadata(
      _fbb,
      orgId__,
      shortName__,
      dateUpdated__,
      x_subShortName__);
}

struct TaxonomyRelation FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TaxonomyRelationBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TAXONOMYID = 4,
    VT_RELATIONSHIPNAME = 6,
    VT_RELATIONSHIPVALUE = 8
  };
  const ::flatbuffers::String *taxonomyId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAXONOMYID);
  }
  const ::flatbuffers::String *relationshipName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RELATIONSHIPNAME);
  }
  const ::flatbuffers::String *relationshipValue() const {
    return GetPointer<const ::flatbuffers::String *>(VT_RELATIONSHIPVALUE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TAXONOMYID) &&
           verifier.VerifyString(taxonomyId()) &&
           VerifyOffset(verifier, VT_RELATIONSHIPNAME) &&
           verifier.VerifyString(relationshipName()) &&
           VerifyOffset(verifier, VT_RELATIONSHIPVALUE) &&
           verifier.VerifyString(relationshipValue()) &&
           verifier.EndTable();
  }
};

struct TaxonomyRelationBuilder {
  typedef TaxonomyRelation Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_taxonomyId(::flatbuffers::Offset<::flatbuffers::String> taxonomyId) {
    fbb_.AddOffset(TaxonomyRelation::VT_TAXONOMYID, taxonomyId);
  }
  void add_relationshipName(::flatbuffers::Offset<::flatbuffers::String> relationshipName) {
    fbb_.AddOffset(TaxonomyRelation::VT_RELATIONSHIPNAME, relationshipName);
  }
  void add_relationshipValue(::flatbuffers::Offset<::flatbuffers::String> relationshipValue) {
    fbb_.AddOffset(TaxonomyRelation::VT_RELATIONSHIPVALUE, relationshipValue);
  }
  explicit TaxonomyRelationBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TaxonomyRelation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TaxonomyRelation>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TaxonomyRelation> CreateTaxonomyRelation(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> taxonomyId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> relationshipName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> relationshipValue = 0) {
  TaxonomyRelationBuilder builder_(_fbb);
  builder_.add_relationshipValue(relationshipValue);
  builder_.add_relationshipName(relationshipName);
  builder_.add_taxonomyId(taxonomyId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TaxonomyRelation> CreateTaxonomyRelationDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *taxonomyId = nullptr,
    const char *relationshipName = nullptr,
    const char *relationshipValue = nullptr) {
  auto taxonomyId__ = taxonomyId ? _fbb.CreateString(taxonomyId) : 0;
  auto relationshipName__ = relationshipName ? _fbb.CreateString(relationshipName) : 0;
  auto relationshipValue__ = relationshipValue ? _fbb.CreateString(relationshipValue) : 0;
  return cve_v5::CreateTaxonomyRelation(
      _fbb,
      taxonomyId__,
      relationshipName__,
      relationshipValue__);
}

struct TaxonomyMapping FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TaxonomyMappingBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TAXONOMYNAME = 4,
    VT_TAXONOMYVERSION = 6,
    VT_TAXONOMYRELATIONS = 8
  };
  const ::flatbuffers::String *taxonomyName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAXONOMYNAME);
  }
  const ::flatbuffers::String *taxonomyVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TAXONOMYVERSION);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyRelation>> *taxonomyRelations() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyRelation>> *>(VT_TAXONOMYRELATIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TAXONOMYNAME) &&
           verifier.VerifyString(taxonomyName()) &&
           VerifyOffset(verifier, VT_TAXONOMYVERSION) &&
           verifier.VerifyString(taxonomyVersion()) &&
           VerifyOffset(verifier, VT_TAXONOMYRELATIONS) &&
           verifier.VerifyVector(taxonomyRelations()) &&
           verifier.VerifyVectorOfTables(taxonomyRelations()) &&
           verifier.EndTable();
  }
};

struct TaxonomyMappingBuilder {
  typedef TaxonomyMapping Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_taxonomyName(::flatbuffers::Offset<::flatbuffers::String> taxonomyName) {
    fbb_.AddOffset(TaxonomyMapping::VT_TAXONOMYNAME, taxonomyName);
  }
  void add_taxonomyVersion(::flatbuffers::Offset<::flatbuffers::String> taxonomyVersion) {
    fbb_.AddOffset(TaxonomyMapping::VT_TAXONOMYVERSION, taxonomyVersion);
  }
  void add_taxonomyRelations(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyRelation>>> taxonomyRelations) {
    fbb_.AddOffset(TaxonomyMapping::VT_TAXONOMYRELATIONS, taxonomyRelations);
  }
  explicit TaxonomyMappingBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TaxonomyMapping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TaxonomyMapping>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TaxonomyMapping> CreateTaxonomyMapping(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> taxonomyName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> taxonomyVersion = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyRelation>>> taxonomyRelations = 0) {
  TaxonomyMappingBuilder builder_(_fbb);
  builder_.add_taxonomyRelations(taxonomyRelations);
  builder_.add_taxonomyVersion(taxonomyVersion);
  builder_.add_taxonomyName(taxonomyName);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TaxonomyMapping> CreateTaxonomyMappingDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *taxonomyName = nullptr,
    const char *taxonomyVersion = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::TaxonomyRelation>> *taxonomyRelations = nullptr) {
  auto taxonomyName__ = taxonomyName ? _fbb.CreateString(taxonomyName) : 0;
  auto taxonomyVersion__ = taxonomyVersion ? _fbb.CreateString(taxonomyVersion) : 0;
  auto taxonomyRelations__ = taxonomyRelations ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::TaxonomyRelation>>(*taxonomyRelations) : 0;
  return cve_v5::CreateTaxonomyMapping(
      _fbb,
      taxonomyName__,
      taxonomyVersion__,
      taxonomyRelations__);
}

struct Adp FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AdpBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROVIDERMETADATA = 4,
    VT_DATEPUBLIC = 6,
    VT_TITLE = 8,
    VT_DESCRIPTIONS = 10,
    VT_AFFECTED = 12,
    VT_PROBLEMTYPES = 14,
    VT_REFERENCES = 16,
    VT_IMPACTS = 18,
    VT_METRICS = 20,
    VT_CONFIGURATIONS = 22,
    VT_WORKAROUNDS = 24,
    VT_SOLUTIONS = 26,
    VT_EXPLOITS = 28,
    VT_TIMELINE = 30,
    VT_CREDITS = 32,
    VT_SOURCE = 34,
    VT_TAGS = 36,
    VT_TAXONOMYMAPPINGS = 38
  };
  const cve_v5::ProviderMetadata *providerMetadata() const {
    return GetPointer<const cve_v5::ProviderMetadata *>(VT_PROVIDERMETADATA);
  }
  const ::flatbuffers::String *datePublic() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEPUBLIC);
  }
  const ::flatbuffers::String *title() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *descriptions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_DESCRIPTIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>> *affected() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>> *>(VT_AFFECTED);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>> *problemTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>> *>(VT_PROBLEMTYPES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>> *references() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>> *>(VT_REFERENCES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>> *impacts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>> *>(VT_IMPACTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>> *metrics() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>> *>(VT_METRICS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *configurations() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_CONFIGURATIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *workarounds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_WORKAROUNDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *solutions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_SOLUTIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *exploits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_EXPLOITS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>> *timeline() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>> *>(VT_TIMELINE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>> *credits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>> *>(VT_CREDITS);
  }
  const cve_v5::StringifiedObject *source() const {
    return GetPointer<const cve_v5::StringifiedObject *>(VT_SOURCE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>> *taxonomyMappings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>> *>(VT_TAXONOMYMAPPINGS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROVIDERMETADATA) &&
           verifier.VerifyTable(providerMetadata()) &&
           VerifyOffset(verifier, VT_DATEPUBLIC) &&
           verifier.VerifyString(datePublic()) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_DESCRIPTIONS) &&
           verifier.VerifyVector(descriptions()) &&
           verifier.VerifyVectorOfTables(descriptions()) &&
           VerifyOffset(verifier, VT_AFFECTED) &&
           verifier.VerifyVector(affected()) &&
           verifier.VerifyVectorOfTables(affected()) &&
           VerifyOffset(verifier, VT_PROBLEMTYPES) &&
           verifier.VerifyVector(problemTypes()) &&
           verifier.VerifyVectorOfTables(problemTypes()) &&
           VerifyOffset(verifier, VT_REFERENCES) &&
           verifier.VerifyVector(references()) &&
           verifier.VerifyVectorOfTables(references()) &&
           VerifyOffset(verifier, VT_IMPACTS) &&
           verifier.VerifyVector(impacts()) &&
           verifier.VerifyVectorOfTables(impacts()) &&
           VerifyOffset(verifier, VT_METRICS) &&
           verifier.VerifyVector(metrics()) &&
           verifier.VerifyVectorOfTables(metrics()) &&
           VerifyOffset(verifier, VT_CONFIGURATIONS) &&
           verifier.VerifyVector(configurations()) &&
           verifier.VerifyVectorOfTables(configurations()) &&
           VerifyOffset(verifier, VT_WORKAROUNDS) &&
           verifier.VerifyVector(workarounds()) &&
           verifier.VerifyVectorOfTables(workarounds()) &&
           VerifyOffset(verifier, VT_SOLUTIONS) &&
           verifier.VerifyVector(solutions()) &&
           verifier.VerifyVectorOfTables(solutions()) &&
           VerifyOffset(verifier, VT_EXPLOITS) &&
           verifier.VerifyVector(exploits()) &&
           verifier.VerifyVectorOfTables(exploits()) &&
           VerifyOffset(verifier, VT_TIMELINE) &&
           verifier.VerifyVector(timeline()) &&
           verifier.VerifyVectorOfTables(timeline()) &&
           VerifyOffset(verifier, VT_CREDITS) &&
           verifier.VerifyVector(credits()) &&
           verifier.VerifyVectorOfTables(credits()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyTable(source()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_TAXONOMYMAPPINGS) &&
           verifier.VerifyVector(taxonomyMappings()) &&
           verifier.VerifyVectorOfTables(taxonomyMappings()) &&
           verifier.EndTable();
  }
};

struct AdpBuilder {
  typedef Adp Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_providerMetadata(::flatbuffers::Offset<cve_v5::ProviderMetadata> providerMetadata) {
    fbb_.AddOffset(Adp::VT_PROVIDERMETADATA, providerMetadata);
  }
  void add_datePublic(::flatbuffers::Offset<::flatbuffers::String> datePublic) {
    fbb_.AddOffset(Adp::VT_DATEPUBLIC, datePublic);
  }
  void add_title(::flatbuffers::Offset<::flatbuffers::String> title) {
    fbb_.AddOffset(Adp::VT_TITLE, title);
  }
  void add_descriptions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> descriptions) {
    fbb_.AddOffset(Adp::VT_DESCRIPTIONS, descriptions);
  }
  void add_affected(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>>> affected) {
    fbb_.AddOffset(Adp::VT_AFFECTED, affected);
  }
  void add_problemTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>>> problemTypes) {
    fbb_.AddOffset(Adp::VT_PROBLEMTYPES, problemTypes);
  }
  void add_references(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>>> references) {
    fbb_.AddOffset(Adp::VT_REFERENCES, references);
  }
  void add_impacts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>>> impacts) {
    fbb_.AddOffset(Adp::VT_IMPACTS, impacts);
  }
  void add_metrics(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>>> metrics) {
    fbb_.AddOffset(Adp::VT_METRICS, metrics);
  }
  void add_configurations(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> configurations) {
    fbb_.AddOffset(Adp::VT_CONFIGURATIONS, configurations);
  }
  void add_workarounds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> workarounds) {
    fbb_.AddOffset(Adp::VT_WORKAROUNDS, workarounds);
  }
  void add_solutions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> solutions) {
    fbb_.AddOffset(Adp::VT_SOLUTIONS, solutions);
  }
  void add_exploits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> exploits) {
    fbb_.AddOffset(Adp::VT_EXPLOITS, exploits);
  }
  void add_timeline(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>>> timeline) {
    fbb_.AddOffset(Adp::VT_TIMELINE, timeline);
  }
  void add_credits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>>> credits) {
    fbb_.AddOffset(Adp::VT_CREDITS, credits);
  }
  void add_source(::flatbuffers::Offset<cve_v5::StringifiedObject> source) {
    fbb_.AddOffset(Adp::VT_SOURCE, source);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(Adp::VT_TAGS, tags);
  }
  void add_taxonomyMappings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>>> taxonomyMappings) {
    fbb_.AddOffset(Adp::VT_TAXONOMYMAPPINGS, taxonomyMappings);
  }
  explicit AdpBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Adp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Adp>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Adp> CreateAdp(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<cve_v5::ProviderMetadata> providerMetadata = 0,
    ::flatbuffers::Offset<::flatbuffers::String> datePublic = 0,
    ::flatbuffers::Offset<::flatbuffers::String> title = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> descriptions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>>> affected = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>>> problemTypes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>>> references = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>>> impacts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>>> metrics = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> configurations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> workarounds = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> solutions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> exploits = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>>> timeline = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>>> credits = 0,
    ::flatbuffers::Offset<cve_v5::StringifiedObject> source = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>>> taxonomyMappings = 0) {
  AdpBuilder builder_(_fbb);
  builder_.add_taxonomyMappings(taxonomyMappings);
  builder_.add_tags(tags);
  builder_.add_source(source);
  builder_.add_credits(credits);
  builder_.add_timeline(timeline);
  builder_.add_exploits(exploits);
  builder_.add_solutions(solutions);
  builder_.add_workarounds(workarounds);
  builder_.add_configurations(configurations);
  builder_.add_metrics(metrics);
  builder_.add_impacts(impacts);
  builder_.add_references(references);
  builder_.add_problemTypes(problemTypes);
  builder_.add_affected(affected);
  builder_.add_descriptions(descriptions);
  builder_.add_title(title);
  builder_.add_datePublic(datePublic);
  builder_.add_providerMetadata(providerMetadata);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Adp> CreateAdpDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<cve_v5::ProviderMetadata> providerMetadata = 0,
    const char *datePublic = nullptr,
    const char *title = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *descriptions = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Affected>> *affected = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::ProblemType>> *problemTypes = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Reference>> *references = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Impact>> *impacts = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Metric>> *metrics = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *configurations = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *workarounds = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *solutions = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *exploits = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Timeline>> *timeline = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Credit>> *credits = nullptr,
    ::flatbuffers::Offset<cve_v5::StringifiedObject> source = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>> *taxonomyMappings = nullptr) {
  auto datePublic__ = datePublic ? _fbb.CreateString(datePublic) : 0;
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto descriptions__ = descriptions ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*descriptions) : 0;
  auto affected__ = affected ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Affected>>(*affected) : 0;
  auto problemTypes__ = problemTypes ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::ProblemType>>(*problemTypes) : 0;
  auto references__ = references ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Reference>>(*references) : 0;
  auto impacts__ = impacts ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Impact>>(*impacts) : 0;
  auto metrics__ = metrics ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Metric>>(*metrics) : 0;
  auto configurations__ = configurations ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*configurations) : 0;
  auto workarounds__ = workarounds ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*workarounds) : 0;
  auto solutions__ = solutions ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*solutions) : 0;
  auto exploits__ = exploits ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*exploits) : 0;
  auto timeline__ = timeline ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Timeline>>(*timeline) : 0;
  auto credits__ = credits ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Credit>>(*credits) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto taxonomyMappings__ = taxonomyMappings ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>>(*taxonomyMappings) : 0;
  return cve_v5::CreateAdp(
      _fbb,
      providerMetadata,
      datePublic__,
      title__,
      descriptions__,
      affected__,
      problemTypes__,
      references__,
      impacts__,
      metrics__,
      configurations__,
      workarounds__,
      solutions__,
      exploits__,
      timeline__,
      credits__,
      source,
      tags__,
      taxonomyMappings__);
}

struct Cna FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CnaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROVIDERMETADATA = 4,
    VT_DATEASSIGNED = 6,
    VT_DATEPUBLIC = 8,
    VT_TITLE = 10,
    VT_DESCRIPTIONS = 12,
    VT_AFFECTED = 14,
    VT_PROBLEMTYPES = 16,
    VT_REFERENCES = 18,
    VT_IMPACTS = 20,
    VT_METRICS = 22,
    VT_CONFIGURATIONS = 24,
    VT_WORKAROUNDS = 26,
    VT_SOLUTIONS = 28,
    VT_EXPLOITS = 30,
    VT_TIMELINE = 32,
    VT_CREDITS = 34,
    VT_SOURCE = 36,
    VT_TAGS = 38,
    VT_TAXONOMYMAPPINGS = 40,
    VT_X_REMEDIATIONS = 42,
    VT_REJECTEDREASONS = 44,
    VT_REPLACEDBY = 46
  };
  const cve_v5::ProviderMetadata *providerMetadata() const {
    return GetPointer<const cve_v5::ProviderMetadata *>(VT_PROVIDERMETADATA);
  }
  const ::flatbuffers::String *dateAssigned() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEASSIGNED);
  }
  const ::flatbuffers::String *datePublic() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEPUBLIC);
  }
  const ::flatbuffers::String *title() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TITLE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *descriptions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_DESCRIPTIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>> *affected() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>> *>(VT_AFFECTED);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>> *problemTypes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>> *>(VT_PROBLEMTYPES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>> *references() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>> *>(VT_REFERENCES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>> *impacts() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>> *>(VT_IMPACTS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>> *metrics() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>> *>(VT_METRICS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *configurations() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_CONFIGURATIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *workarounds() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_WORKAROUNDS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *solutions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_SOLUTIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *exploits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_EXPLOITS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>> *timeline() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>> *>(VT_TIMELINE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>> *credits() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>> *>(VT_CREDITS);
  }
  const cve_v5::StringifiedObject *source() const {
    return GetPointer<const cve_v5::StringifiedObject *>(VT_SOURCE);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *tags() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_TAGS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>> *taxonomyMappings() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>> *>(VT_TAXONOMYMAPPINGS);
  }
  const cve_v5::Remediations *x_remediations() const {
    return GetPointer<const cve_v5::Remediations *>(VT_X_REMEDIATIONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *rejectedReasons() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>> *>(VT_REJECTEDREASONS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *replacedBy() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REPLACEDBY);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROVIDERMETADATA) &&
           verifier.VerifyTable(providerMetadata()) &&
           VerifyOffset(verifier, VT_DATEASSIGNED) &&
           verifier.VerifyString(dateAssigned()) &&
           VerifyOffset(verifier, VT_DATEPUBLIC) &&
           verifier.VerifyString(datePublic()) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_DESCRIPTIONS) &&
           verifier.VerifyVector(descriptions()) &&
           verifier.VerifyVectorOfTables(descriptions()) &&
           VerifyOffset(verifier, VT_AFFECTED) &&
           verifier.VerifyVector(affected()) &&
           verifier.VerifyVectorOfTables(affected()) &&
           VerifyOffset(verifier, VT_PROBLEMTYPES) &&
           verifier.VerifyVector(problemTypes()) &&
           verifier.VerifyVectorOfTables(problemTypes()) &&
           VerifyOffset(verifier, VT_REFERENCES) &&
           verifier.VerifyVector(references()) &&
           verifier.VerifyVectorOfTables(references()) &&
           VerifyOffset(verifier, VT_IMPACTS) &&
           verifier.VerifyVector(impacts()) &&
           verifier.VerifyVectorOfTables(impacts()) &&
           VerifyOffset(verifier, VT_METRICS) &&
           verifier.VerifyVector(metrics()) &&
           verifier.VerifyVectorOfTables(metrics()) &&
           VerifyOffset(verifier, VT_CONFIGURATIONS) &&
           verifier.VerifyVector(configurations()) &&
           verifier.VerifyVectorOfTables(configurations()) &&
           VerifyOffset(verifier, VT_WORKAROUNDS) &&
           verifier.VerifyVector(workarounds()) &&
           verifier.VerifyVectorOfTables(workarounds()) &&
           VerifyOffset(verifier, VT_SOLUTIONS) &&
           verifier.VerifyVector(solutions()) &&
           verifier.VerifyVectorOfTables(solutions()) &&
           VerifyOffset(verifier, VT_EXPLOITS) &&
           verifier.VerifyVector(exploits()) &&
           verifier.VerifyVectorOfTables(exploits()) &&
           VerifyOffset(verifier, VT_TIMELINE) &&
           verifier.VerifyVector(timeline()) &&
           verifier.VerifyVectorOfTables(timeline()) &&
           VerifyOffset(verifier, VT_CREDITS) &&
           verifier.VerifyVector(credits()) &&
           verifier.VerifyVectorOfTables(credits()) &&
           VerifyOffset(verifier, VT_SOURCE) &&
           verifier.VerifyTable(source()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_TAXONOMYMAPPINGS) &&
           verifier.VerifyVector(taxonomyMappings()) &&
           verifier.VerifyVectorOfTables(taxonomyMappings()) &&
           VerifyOffset(verifier, VT_X_REMEDIATIONS) &&
           verifier.VerifyTable(x_remediations()) &&
           VerifyOffset(verifier, VT_REJECTEDREASONS) &&
           verifier.VerifyVector(rejectedReasons()) &&
           verifier.VerifyVectorOfTables(rejectedReasons()) &&
           VerifyOffset(verifier, VT_REPLACEDBY) &&
           verifier.VerifyVector(replacedBy()) &&
           verifier.VerifyVectorOfStrings(replacedBy()) &&
           verifier.EndTable();
  }
};

struct CnaBuilder {
  typedef Cna Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_providerMetadata(::flatbuffers::Offset<cve_v5::ProviderMetadata> providerMetadata) {
    fbb_.AddOffset(Cna::VT_PROVIDERMETADATA, providerMetadata);
  }
  void add_dateAssigned(::flatbuffers::Offset<::flatbuffers::String> dateAssigned) {
    fbb_.AddOffset(Cna::VT_DATEASSIGNED, dateAssigned);
  }
  void add_datePublic(::flatbuffers::Offset<::flatbuffers::String> datePublic) {
    fbb_.AddOffset(Cna::VT_DATEPUBLIC, datePublic);
  }
  void add_title(::flatbuffers::Offset<::flatbuffers::String> title) {
    fbb_.AddOffset(Cna::VT_TITLE, title);
  }
  void add_descriptions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> descriptions) {
    fbb_.AddOffset(Cna::VT_DESCRIPTIONS, descriptions);
  }
  void add_affected(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>>> affected) {
    fbb_.AddOffset(Cna::VT_AFFECTED, affected);
  }
  void add_problemTypes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>>> problemTypes) {
    fbb_.AddOffset(Cna::VT_PROBLEMTYPES, problemTypes);
  }
  void add_references(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>>> references) {
    fbb_.AddOffset(Cna::VT_REFERENCES, references);
  }
  void add_impacts(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>>> impacts) {
    fbb_.AddOffset(Cna::VT_IMPACTS, impacts);
  }
  void add_metrics(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>>> metrics) {
    fbb_.AddOffset(Cna::VT_METRICS, metrics);
  }
  void add_configurations(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> configurations) {
    fbb_.AddOffset(Cna::VT_CONFIGURATIONS, configurations);
  }
  void add_workarounds(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> workarounds) {
    fbb_.AddOffset(Cna::VT_WORKAROUNDS, workarounds);
  }
  void add_solutions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> solutions) {
    fbb_.AddOffset(Cna::VT_SOLUTIONS, solutions);
  }
  void add_exploits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> exploits) {
    fbb_.AddOffset(Cna::VT_EXPLOITS, exploits);
  }
  void add_timeline(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>>> timeline) {
    fbb_.AddOffset(Cna::VT_TIMELINE, timeline);
  }
  void add_credits(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>>> credits) {
    fbb_.AddOffset(Cna::VT_CREDITS, credits);
  }
  void add_source(::flatbuffers::Offset<cve_v5::StringifiedObject> source) {
    fbb_.AddOffset(Cna::VT_SOURCE, source);
  }
  void add_tags(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags) {
    fbb_.AddOffset(Cna::VT_TAGS, tags);
  }
  void add_taxonomyMappings(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>>> taxonomyMappings) {
    fbb_.AddOffset(Cna::VT_TAXONOMYMAPPINGS, taxonomyMappings);
  }
  void add_x_remediations(::flatbuffers::Offset<cve_v5::Remediations> x_remediations) {
    fbb_.AddOffset(Cna::VT_X_REMEDIATIONS, x_remediations);
  }
  void add_rejectedReasons(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> rejectedReasons) {
    fbb_.AddOffset(Cna::VT_REJECTEDREASONS, rejectedReasons);
  }
  void add_replacedBy(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> replacedBy) {
    fbb_.AddOffset(Cna::VT_REPLACEDBY, replacedBy);
  }
  explicit CnaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Cna> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Cna>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Cna> CreateCna(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<cve_v5::ProviderMetadata> providerMetadata = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dateAssigned = 0,
    ::flatbuffers::Offset<::flatbuffers::String> datePublic = 0,
    ::flatbuffers::Offset<::flatbuffers::String> title = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> descriptions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Affected>>> affected = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::ProblemType>>> problemTypes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Reference>>> references = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Impact>>> impacts = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Metric>>> metrics = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> configurations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> workarounds = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> solutions = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> exploits = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Timeline>>> timeline = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Credit>>> credits = 0,
    ::flatbuffers::Offset<cve_v5::StringifiedObject> source = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> tags = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>>> taxonomyMappings = 0,
    ::flatbuffers::Offset<cve_v5::Remediations> x_remediations = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Description>>> rejectedReasons = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> replacedBy = 0) {
  CnaBuilder builder_(_fbb);
  builder_.add_replacedBy(replacedBy);
  builder_.add_rejectedReasons(rejectedReasons);
  builder_.add_x_remediations(x_remediations);
  builder_.add_taxonomyMappings(taxonomyMappings);
  builder_.add_tags(tags);
  builder_.add_source(source);
  builder_.add_credits(credits);
  builder_.add_timeline(timeline);
  builder_.add_exploits(exploits);
  builder_.add_solutions(solutions);
  builder_.add_workarounds(workarounds);
  builder_.add_configurations(configurations);
  builder_.add_metrics(metrics);
  builder_.add_impacts(impacts);
  builder_.add_references(references);
  builder_.add_problemTypes(problemTypes);
  builder_.add_affected(affected);
  builder_.add_descriptions(descriptions);
  builder_.add_title(title);
  builder_.add_datePublic(datePublic);
  builder_.add_dateAssigned(dateAssigned);
  builder_.add_providerMetadata(providerMetadata);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Cna> CreateCnaDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<cve_v5::ProviderMetadata> providerMetadata = 0,
    const char *dateAssigned = nullptr,
    const char *datePublic = nullptr,
    const char *title = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *descriptions = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Affected>> *affected = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::ProblemType>> *problemTypes = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Reference>> *references = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Impact>> *impacts = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Metric>> *metrics = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *configurations = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *workarounds = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *solutions = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *exploits = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Timeline>> *timeline = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::Credit>> *credits = nullptr,
    ::flatbuffers::Offset<cve_v5::StringifiedObject> source = 0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *tags = nullptr,
    const std::vector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>> *taxonomyMappings = nullptr,
    ::flatbuffers::Offset<cve_v5::Remediations> x_remediations = 0,
    const std::vector<::flatbuffers::Offset<cve_v5::Description>> *rejectedReasons = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *replacedBy = nullptr) {
  auto dateAssigned__ = dateAssigned ? _fbb.CreateString(dateAssigned) : 0;
  auto datePublic__ = datePublic ? _fbb.CreateString(datePublic) : 0;
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto descriptions__ = descriptions ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*descriptions) : 0;
  auto affected__ = affected ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Affected>>(*affected) : 0;
  auto problemTypes__ = problemTypes ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::ProblemType>>(*problemTypes) : 0;
  auto references__ = references ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Reference>>(*references) : 0;
  auto impacts__ = impacts ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Impact>>(*impacts) : 0;
  auto metrics__ = metrics ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Metric>>(*metrics) : 0;
  auto configurations__ = configurations ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*configurations) : 0;
  auto workarounds__ = workarounds ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*workarounds) : 0;
  auto solutions__ = solutions ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*solutions) : 0;
  auto exploits__ = exploits ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*exploits) : 0;
  auto timeline__ = timeline ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Timeline>>(*timeline) : 0;
  auto credits__ = credits ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Credit>>(*credits) : 0;
  auto tags__ = tags ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*tags) : 0;
  auto taxonomyMappings__ = taxonomyMappings ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::TaxonomyMapping>>(*taxonomyMappings) : 0;
  auto rejectedReasons__ = rejectedReasons ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Description>>(*rejectedReasons) : 0;
  auto replacedBy__ = replacedBy ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*replacedBy) : 0;
  return cve_v5::CreateCna(
      _fbb,
      providerMetadata,
      dateAssigned__,
      datePublic__,
      title__,
      descriptions__,
      affected__,
      problemTypes__,
      references__,
      impacts__,
      metrics__,
      configurations__,
      workarounds__,
      solutions__,
      exploits__,
      timeline__,
      credits__,
      source,
      tags__,
      taxonomyMappings__,
      x_remediations,
      rejectedReasons__,
      replacedBy__);
}

struct CveMetadata FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CveMetadataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CVEID = 4,
    VT_ASSIGNERORGID = 6,
    VT_ASSIGNERSHORTNAME = 8,
    VT_REQUESTERUSERID = 10,
    VT_DATEUPDATED = 12,
    VT_SERIAL = 14,
    VT_DATERESERVED = 16,
    VT_DATEPUBLISHED = 18,
    VT_STATE = 20,
    VT_DATEREJECTED = 22
  };
  const ::flatbuffers::String *cveId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CVEID);
  }
  const ::flatbuffers::String *assignerOrgId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASSIGNERORGID);
  }
  const ::flatbuffers::String *assignerShortName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ASSIGNERSHORTNAME);
  }
  const ::flatbuffers::String *requesterUserId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_REQUESTERUSERID);
  }
  const ::flatbuffers::String *dateUpdated() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEUPDATED);
  }
  int32_t serial() const {
    return GetField<int32_t>(VT_SERIAL, 0);
  }
  const ::flatbuffers::String *dateReserved() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATERESERVED);
  }
  const ::flatbuffers::String *datePublished() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEPUBLISHED);
  }
  const ::flatbuffers::String *state() const {
    return GetPointer<const ::flatbuffers::String *>(VT_STATE);
  }
  const ::flatbuffers::String *dateRejected() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATEREJECTED);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CVEID) &&
           verifier.VerifyString(cveId()) &&
           VerifyOffset(verifier, VT_ASSIGNERORGID) &&
           verifier.VerifyString(assignerOrgId()) &&
           VerifyOffset(verifier, VT_ASSIGNERSHORTNAME) &&
           verifier.VerifyString(assignerShortName()) &&
           VerifyOffset(verifier, VT_REQUESTERUSERID) &&
           verifier.VerifyString(requesterUserId()) &&
           VerifyOffset(verifier, VT_DATEUPDATED) &&
           verifier.VerifyString(dateUpdated()) &&
           VerifyField<int32_t>(verifier, VT_SERIAL, 4) &&
           VerifyOffset(verifier, VT_DATERESERVED) &&
           verifier.VerifyString(dateReserved()) &&
           VerifyOffset(verifier, VT_DATEPUBLISHED) &&
           verifier.VerifyString(datePublished()) &&
           VerifyOffset(verifier, VT_STATE) &&
           verifier.VerifyString(state()) &&
           VerifyOffset(verifier, VT_DATEREJECTED) &&
           verifier.VerifyString(dateRejected()) &&
           verifier.EndTable();
  }
};

struct CveMetadataBuilder {
  typedef CveMetadata Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cveId(::flatbuffers::Offset<::flatbuffers::String> cveId) {
    fbb_.AddOffset(CveMetadata::VT_CVEID, cveId);
  }
  void add_assignerOrgId(::flatbuffers::Offset<::flatbuffers::String> assignerOrgId) {
    fbb_.AddOffset(CveMetadata::VT_ASSIGNERORGID, assignerOrgId);
  }
  void add_assignerShortName(::flatbuffers::Offset<::flatbuffers::String> assignerShortName) {
    fbb_.AddOffset(CveMetadata::VT_ASSIGNERSHORTNAME, assignerShortName);
  }
  void add_requesterUserId(::flatbuffers::Offset<::flatbuffers::String> requesterUserId) {
    fbb_.AddOffset(CveMetadata::VT_REQUESTERUSERID, requesterUserId);
  }
  void add_dateUpdated(::flatbuffers::Offset<::flatbuffers::String> dateUpdated) {
    fbb_.AddOffset(CveMetadata::VT_DATEUPDATED, dateUpdated);
  }
  void add_serial(int32_t serial) {
    fbb_.AddElement<int32_t>(CveMetadata::VT_SERIAL, serial, 0);
  }
  void add_dateReserved(::flatbuffers::Offset<::flatbuffers::String> dateReserved) {
    fbb_.AddOffset(CveMetadata::VT_DATERESERVED, dateReserved);
  }
  void add_datePublished(::flatbuffers::Offset<::flatbuffers::String> datePublished) {
    fbb_.AddOffset(CveMetadata::VT_DATEPUBLISHED, datePublished);
  }
  void add_state(::flatbuffers::Offset<::flatbuffers::String> state) {
    fbb_.AddOffset(CveMetadata::VT_STATE, state);
  }
  void add_dateRejected(::flatbuffers::Offset<::flatbuffers::String> dateRejected) {
    fbb_.AddOffset(CveMetadata::VT_DATEREJECTED, dateRejected);
  }
  explicit CveMetadataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CveMetadata> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CveMetadata>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CveMetadata> CreateCveMetadata(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> cveId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> assignerOrgId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> assignerShortName = 0,
    ::flatbuffers::Offset<::flatbuffers::String> requesterUserId = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dateUpdated = 0,
    int32_t serial = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dateReserved = 0,
    ::flatbuffers::Offset<::flatbuffers::String> datePublished = 0,
    ::flatbuffers::Offset<::flatbuffers::String> state = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dateRejected = 0) {
  CveMetadataBuilder builder_(_fbb);
  builder_.add_dateRejected(dateRejected);
  builder_.add_state(state);
  builder_.add_datePublished(datePublished);
  builder_.add_dateReserved(dateReserved);
  builder_.add_serial(serial);
  builder_.add_dateUpdated(dateUpdated);
  builder_.add_requesterUserId(requesterUserId);
  builder_.add_assignerShortName(assignerShortName);
  builder_.add_assignerOrgId(assignerOrgId);
  builder_.add_cveId(cveId);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<CveMetadata> CreateCveMetadataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *cveId = nullptr,
    const char *assignerOrgId = nullptr,
    const char *assignerShortName = nullptr,
    const char *requesterUserId = nullptr,
    const char *dateUpdated = nullptr,
    int32_t serial = 0,
    const char *dateReserved = nullptr,
    const char *datePublished = nullptr,
    const char *state = nullptr,
    const char *dateRejected = nullptr) {
  auto cveId__ = cveId ? _fbb.CreateString(cveId) : 0;
  auto assignerOrgId__ = assignerOrgId ? _fbb.CreateString(assignerOrgId) : 0;
  auto assignerShortName__ = assignerShortName ? _fbb.CreateString(assignerShortName) : 0;
  auto requesterUserId__ = requesterUserId ? _fbb.CreateString(requesterUserId) : 0;
  auto dateUpdated__ = dateUpdated ? _fbb.CreateString(dateUpdated) : 0;
  auto dateReserved__ = dateReserved ? _fbb.CreateString(dateReserved) : 0;
  auto datePublished__ = datePublished ? _fbb.CreateString(datePublished) : 0;
  auto state__ = state ? _fbb.CreateString(state) : 0;
  auto dateRejected__ = dateRejected ? _fbb.CreateString(dateRejected) : 0;
  return cve_v5::CreateCveMetadata(
      _fbb,
      cveId__,
      assignerOrgId__,
      assignerShortName__,
      requesterUserId__,
      dateUpdated__,
      serial,
      dateReserved__,
      datePublished__,
      state__,
      dateRejected__);
}

struct Containers FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ContainersBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CNA = 4,
    VT_ADP = 6
  };
  const cve_v5::Cna *cna() const {
    return GetPointer<const cve_v5::Cna *>(VT_CNA);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Adp>> *adp() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Adp>> *>(VT_ADP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CNA) &&
           verifier.VerifyTable(cna()) &&
           VerifyOffset(verifier, VT_ADP) &&
           verifier.VerifyVector(adp()) &&
           verifier.VerifyVectorOfTables(adp()) &&
           verifier.EndTable();
  }
};

struct ContainersBuilder {
  typedef Containers Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cna(::flatbuffers::Offset<cve_v5::Cna> cna) {
    fbb_.AddOffset(Containers::VT_CNA, cna);
  }
  void add_adp(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Adp>>> adp) {
    fbb_.AddOffset(Containers::VT_ADP, adp);
  }
  explicit ContainersBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Containers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Containers>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Containers> CreateContainers(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<cve_v5::Cna> cna = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<cve_v5::Adp>>> adp = 0) {
  ContainersBuilder builder_(_fbb);
  builder_.add_adp(adp);
  builder_.add_cna(cna);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Containers> CreateContainersDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<cve_v5::Cna> cna = 0,
    const std::vector<::flatbuffers::Offset<cve_v5::Adp>> *adp = nullptr) {
  auto adp__ = adp ? _fbb.CreateVector<::flatbuffers::Offset<cve_v5::Adp>>(*adp) : 0;
  return cve_v5::CreateContainers(
      _fbb,
      cna,
      adp__);
}

struct Entry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EntryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATATYPE = 4,
    VT_DATAVERSION = 6,
    VT_CVEMETADATA = 8,
    VT_CONTAINERS = 10
  };
  const ::flatbuffers::String *dataType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATATYPE);
  }
  const ::flatbuffers::String *dataVersion() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DATAVERSION);
  }
  const cve_v5::CveMetadata *cveMetadata() const {
    return GetPointer<const cve_v5::CveMetadata *>(VT_CVEMETADATA);
  }
  const cve_v5::Containers *containers() const {
    return GetPointer<const cve_v5::Containers *>(VT_CONTAINERS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATATYPE) &&
           verifier.VerifyString(dataType()) &&
           VerifyOffset(verifier, VT_DATAVERSION) &&
           verifier.VerifyString(dataVersion()) &&
           VerifyOffset(verifier, VT_CVEMETADATA) &&
           verifier.VerifyTable(cveMetadata()) &&
           VerifyOffset(verifier, VT_CONTAINERS) &&
           verifier.VerifyTable(containers()) &&
           verifier.EndTable();
  }
};

struct EntryBuilder {
  typedef Entry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_dataType(::flatbuffers::Offset<::flatbuffers::String> dataType) {
    fbb_.AddOffset(Entry::VT_DATATYPE, dataType);
  }
  void add_dataVersion(::flatbuffers::Offset<::flatbuffers::String> dataVersion) {
    fbb_.AddOffset(Entry::VT_DATAVERSION, dataVersion);
  }
  void add_cveMetadata(::flatbuffers::Offset<cve_v5::CveMetadata> cveMetadata) {
    fbb_.AddOffset(Entry::VT_CVEMETADATA, cveMetadata);
  }
  void add_containers(::flatbuffers::Offset<cve_v5::Containers> containers) {
    fbb_.AddOffset(Entry::VT_CONTAINERS, containers);
  }
  explicit EntryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Entry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Entry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Entry> CreateEntry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> dataType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> dataVersion = 0,
    ::flatbuffers::Offset<cve_v5::CveMetadata> cveMetadata = 0,
    ::flatbuffers::Offset<cve_v5::Containers> containers = 0) {
  EntryBuilder builder_(_fbb);
  builder_.add_containers(containers);
  builder_.add_cveMetadata(cveMetadata);
  builder_.add_dataVersion(dataVersion);
  builder_.add_dataType(dataType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Entry> CreateEntryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *dataType = nullptr,
    const char *dataVersion = nullptr,
    ::flatbuffers::Offset<cve_v5::CveMetadata> cveMetadata = 0,
    ::flatbuffers::Offset<cve_v5::Containers> containers = 0) {
  auto dataType__ = dataType ? _fbb.CreateString(dataType) : 0;
  auto dataVersion__ = dataVersion ? _fbb.CreateString(dataVersion) : 0;
  return cve_v5::CreateEntry(
      _fbb,
      dataType__,
      dataVersion__,
      cveMetadata,
      containers);
}

inline const cve_v5::Entry *GetEntry(const void *buf) {
  return ::flatbuffers::GetRoot<cve_v5::Entry>(buf);
}

inline const cve_v5::Entry *GetSizePrefixedEntry(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<cve_v5::Entry>(buf);
}

inline bool VerifyEntryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<cve_v5::Entry>(nullptr);
}

inline bool VerifySizePrefixedEntryBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<cve_v5::Entry>(nullptr);
}

inline void FinishEntryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<cve_v5::Entry> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEntryBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<cve_v5::Entry> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace cve_v5

#endif  // FLATBUFFERS_GENERATED_CVE5_CVE_V5_H_
