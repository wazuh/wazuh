// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VULNERABILITYCANDIDATE_NSVULNERABILITYSCANNER_H_
#define FLATBUFFERS_GENERATED_VULNERABILITYCANDIDATE_NSVULNERABILITYSCANNER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 25,
             "Non-compatible flatbuffers version included");

namespace NSVulnerabilityScanner {

struct Version;
struct VersionBuilder;

struct ScanVulnerabilityCandidate;
struct ScanVulnerabilityCandidateBuilder;

struct ScanVulnerabilityCandidateArray;
struct ScanVulnerabilityCandidateArrayBuilder;

enum Status : int8_t {
  Status_affected = 0,
  Status_unaffected = 1,
  Status_unknown = 2,
  Status_MIN = Status_affected,
  Status_MAX = Status_unknown
};

inline const Status (&EnumValuesStatus())[3] {
  static const Status values[] = {
    Status_affected,
    Status_unaffected,
    Status_unknown
  };
  return values;
}

inline const char * const *EnumNamesStatus() {
  static const char * const names[4] = {
    "affected",
    "unaffected",
    "unknown",
    nullptr
  };
  return names;
}

inline const char *EnumNameStatus(Status e) {
  if (::flatbuffers::IsOutRange(e, Status_affected, Status_unknown)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesStatus()[index];
}

struct Version FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VersionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_VERSION = 6,
    VT_LESSTHAN = 8,
    VT_LESSTHANOREQUAL = 10,
    VT_VERSIONTYPE = 12
  };
  NSVulnerabilityScanner::Status status() const {
    return static_cast<NSVulnerabilityScanner::Status>(GetField<int8_t>(VT_STATUS, 0));
  }
  const ::flatbuffers::String *version() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSION);
  }
  const ::flatbuffers::String *lessThan() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LESSTHAN);
  }
  const ::flatbuffers::String *lessThanOrEqual() const {
    return GetPointer<const ::flatbuffers::String *>(VT_LESSTHANOREQUAL);
  }
  const ::flatbuffers::String *versionType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VERSIONTYPE);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           VerifyOffset(verifier, VT_LESSTHAN) &&
           verifier.VerifyString(lessThan()) &&
           VerifyOffset(verifier, VT_LESSTHANOREQUAL) &&
           verifier.VerifyString(lessThanOrEqual()) &&
           VerifyOffset(verifier, VT_VERSIONTYPE) &&
           verifier.VerifyString(versionType()) &&
           verifier.EndTable();
  }
};

struct VersionBuilder {
  typedef Version Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_status(NSVulnerabilityScanner::Status status) {
    fbb_.AddElement<int8_t>(Version::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_version(::flatbuffers::Offset<::flatbuffers::String> version) {
    fbb_.AddOffset(Version::VT_VERSION, version);
  }
  void add_lessThan(::flatbuffers::Offset<::flatbuffers::String> lessThan) {
    fbb_.AddOffset(Version::VT_LESSTHAN, lessThan);
  }
  void add_lessThanOrEqual(::flatbuffers::Offset<::flatbuffers::String> lessThanOrEqual) {
    fbb_.AddOffset(Version::VT_LESSTHANOREQUAL, lessThanOrEqual);
  }
  void add_versionType(::flatbuffers::Offset<::flatbuffers::String> versionType) {
    fbb_.AddOffset(Version::VT_VERSIONTYPE, versionType);
  }
  explicit VersionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Version> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Version>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Version> CreateVersion(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    NSVulnerabilityScanner::Status status = NSVulnerabilityScanner::Status_affected,
    ::flatbuffers::Offset<::flatbuffers::String> version = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lessThan = 0,
    ::flatbuffers::Offset<::flatbuffers::String> lessThanOrEqual = 0,
    ::flatbuffers::Offset<::flatbuffers::String> versionType = 0) {
  VersionBuilder builder_(_fbb);
  builder_.add_versionType(versionType);
  builder_.add_lessThanOrEqual(lessThanOrEqual);
  builder_.add_lessThan(lessThan);
  builder_.add_version(version);
  builder_.add_status(status);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Version> CreateVersionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    NSVulnerabilityScanner::Status status = NSVulnerabilityScanner::Status_affected,
    const char *version = nullptr,
    const char *lessThan = nullptr,
    const char *lessThanOrEqual = nullptr,
    const char *versionType = nullptr) {
  auto version__ = version ? _fbb.CreateString(version) : 0;
  auto lessThan__ = lessThan ? _fbb.CreateString(lessThan) : 0;
  auto lessThanOrEqual__ = lessThanOrEqual ? _fbb.CreateString(lessThanOrEqual) : 0;
  auto versionType__ = versionType ? _fbb.CreateString(versionType) : 0;
  return NSVulnerabilityScanner::CreateVersion(
      _fbb,
      status,
      version__,
      lessThan__,
      lessThanOrEqual__,
      versionType__);
}

struct ScanVulnerabilityCandidate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScanVulnerabilityCandidateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CVEID = 4,
    VT_DEFAULTSTATUS = 6,
    VT_PLATFORMS = 8,
    VT_VERSIONS = 10,
    VT_VENDOR = 12
  };
  const ::flatbuffers::String *cveId() const {
    return GetPointer<const ::flatbuffers::String *>(VT_CVEID);
  }
  NSVulnerabilityScanner::Status defaultStatus() const {
    return static_cast<NSVulnerabilityScanner::Status>(GetField<int8_t>(VT_DEFAULTSTATUS, 2));
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *platforms() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PLATFORMS);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::Version>> *versions() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::Version>> *>(VT_VERSIONS);
  }
  const ::flatbuffers::String *vendor() const {
    return GetPointer<const ::flatbuffers::String *>(VT_VENDOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CVEID) &&
           verifier.VerifyString(cveId()) &&
           VerifyField<int8_t>(verifier, VT_DEFAULTSTATUS, 1) &&
           VerifyOffset(verifier, VT_PLATFORMS) &&
           verifier.VerifyVector(platforms()) &&
           verifier.VerifyVectorOfStrings(platforms()) &&
           VerifyOffset(verifier, VT_VERSIONS) &&
           verifier.VerifyVector(versions()) &&
           verifier.VerifyVectorOfTables(versions()) &&
           VerifyOffset(verifier, VT_VENDOR) &&
           verifier.VerifyString(vendor()) &&
           verifier.EndTable();
  }
};

struct ScanVulnerabilityCandidateBuilder {
  typedef ScanVulnerabilityCandidate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_cveId(::flatbuffers::Offset<::flatbuffers::String> cveId) {
    fbb_.AddOffset(ScanVulnerabilityCandidate::VT_CVEID, cveId);
  }
  void add_defaultStatus(NSVulnerabilityScanner::Status defaultStatus) {
    fbb_.AddElement<int8_t>(ScanVulnerabilityCandidate::VT_DEFAULTSTATUS, static_cast<int8_t>(defaultStatus), 2);
  }
  void add_platforms(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> platforms) {
    fbb_.AddOffset(ScanVulnerabilityCandidate::VT_PLATFORMS, platforms);
  }
  void add_versions(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::Version>>> versions) {
    fbb_.AddOffset(ScanVulnerabilityCandidate::VT_VERSIONS, versions);
  }
  void add_vendor(::flatbuffers::Offset<::flatbuffers::String> vendor) {
    fbb_.AddOffset(ScanVulnerabilityCandidate::VT_VENDOR, vendor);
  }
  explicit ScanVulnerabilityCandidateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ScanVulnerabilityCandidate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ScanVulnerabilityCandidate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ScanVulnerabilityCandidate> CreateScanVulnerabilityCandidate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> cveId = 0,
    NSVulnerabilityScanner::Status defaultStatus = NSVulnerabilityScanner::Status_unknown,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> platforms = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::Version>>> versions = 0,
    ::flatbuffers::Offset<::flatbuffers::String> vendor = 0) {
  ScanVulnerabilityCandidateBuilder builder_(_fbb);
  builder_.add_vendor(vendor);
  builder_.add_versions(versions);
  builder_.add_platforms(platforms);
  builder_.add_cveId(cveId);
  builder_.add_defaultStatus(defaultStatus);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ScanVulnerabilityCandidate> CreateScanVulnerabilityCandidateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *cveId = nullptr,
    NSVulnerabilityScanner::Status defaultStatus = NSVulnerabilityScanner::Status_unknown,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *platforms = nullptr,
    const std::vector<::flatbuffers::Offset<NSVulnerabilityScanner::Version>> *versions = nullptr,
    const char *vendor = nullptr) {
  auto cveId__ = cveId ? _fbb.CreateString(cveId) : 0;
  auto platforms__ = platforms ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*platforms) : 0;
  auto versions__ = versions ? _fbb.CreateVector<::flatbuffers::Offset<NSVulnerabilityScanner::Version>>(*versions) : 0;
  auto vendor__ = vendor ? _fbb.CreateString(vendor) : 0;
  return NSVulnerabilityScanner::CreateScanVulnerabilityCandidate(
      _fbb,
      cveId__,
      defaultStatus,
      platforms__,
      versions__,
      vendor__);
}

struct ScanVulnerabilityCandidateArray FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ScanVulnerabilityCandidateArrayBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CANDIDATES = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidate>> *candidates() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidate>> *>(VT_CANDIDATES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CANDIDATES) &&
           verifier.VerifyVector(candidates()) &&
           verifier.VerifyVectorOfTables(candidates()) &&
           verifier.EndTable();
  }
};

struct ScanVulnerabilityCandidateArrayBuilder {
  typedef ScanVulnerabilityCandidateArray Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_candidates(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidate>>> candidates) {
    fbb_.AddOffset(ScanVulnerabilityCandidateArray::VT_CANDIDATES, candidates);
  }
  explicit ScanVulnerabilityCandidateArrayBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ScanVulnerabilityCandidateArray> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ScanVulnerabilityCandidateArray>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ScanVulnerabilityCandidateArray> CreateScanVulnerabilityCandidateArray(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidate>>> candidates = 0) {
  ScanVulnerabilityCandidateArrayBuilder builder_(_fbb);
  builder_.add_candidates(candidates);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ScanVulnerabilityCandidateArray> CreateScanVulnerabilityCandidateArrayDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidate>> *candidates = nullptr) {
  auto candidates__ = candidates ? _fbb.CreateVector<::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidate>>(*candidates) : 0;
  return NSVulnerabilityScanner::CreateScanVulnerabilityCandidateArray(
      _fbb,
      candidates__);
}

inline const NSVulnerabilityScanner::ScanVulnerabilityCandidateArray *GetScanVulnerabilityCandidateArray(const void *buf) {
  return ::flatbuffers::GetRoot<NSVulnerabilityScanner::ScanVulnerabilityCandidateArray>(buf);
}

inline const NSVulnerabilityScanner::ScanVulnerabilityCandidateArray *GetSizePrefixedScanVulnerabilityCandidateArray(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<NSVulnerabilityScanner::ScanVulnerabilityCandidateArray>(buf);
}

inline bool VerifyScanVulnerabilityCandidateArrayBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<NSVulnerabilityScanner::ScanVulnerabilityCandidateArray>(nullptr);
}

inline bool VerifySizePrefixedScanVulnerabilityCandidateArrayBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<NSVulnerabilityScanner::ScanVulnerabilityCandidateArray>(nullptr);
}

inline void FinishScanVulnerabilityCandidateArrayBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidateArray> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedScanVulnerabilityCandidateArrayBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<NSVulnerabilityScanner::ScanVulnerabilityCandidateArray> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace NSVulnerabilityScanner

#endif  // FLATBUFFERS_GENERATED_VULNERABILITYCANDIDATE_NSVULNERABILITYSCANNER_H_
