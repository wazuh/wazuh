namespace cve_v5;

table CVSS_V3_1 {
    version: string;
    vectorString: string;
    attackVector: string;
    attackComplexity: string;
    privilegesRequired: string;
    userInteraction: string;
    scope: string;
    confidentialityImpact: string;
    integrityImpact: string;
    availabilityImpact: string;
    baseScore: float;
    baseSeverity: string;
    exploitCodeMaturity: string;
    remediationLevel: string;
    reportConfidence: string;
    temporalScore: float;
    temporalSeverity: string;
    confidentialityRequirement: string;
    integrityRequirement: string;
    availabilityRequirement: string;
    modifiedAttackVector: string;
    modifiedAttackComplexity: string;
    modifiedPrivilegesRequired: string;
    modifiedUserInteraction: string;
    modifiedScope: string;
    modifiedConfidentialityImpact: string;
    modifiedIntegrityImpact: string;
    modifiedAvailabilityImpact: string;
    environmentalScore: float;
    environmentalSeverity: string;
}

table CVSS_V3_0 {
    version: string;
    vectorString: string;
    attackVector: string;
    attackComplexity: string;
    privilegesRequired: string;
    userInteraction: string;
    scope: string;
    confidentialityImpact: string;
    integrityImpact: string;
    availabilityImpact: string;
    baseScore: float;
    baseSeverity: string;
    exploitCodeMaturity: string;
    remediationLevel: string;
    reportConfidence: string;
    temporalScore: float;
    temporalSeverity: string;
    confidentialityRequirement: string;
    integrityRequirement: string;
    availabilityRequirement: string;
    modifiedAttackVector: string;
    modifiedAttackComplexity: string;
    modifiedPrivilegesRequired: string;
    modifiedUserInteraction: string;
    modifiedScope: string;
    modifiedConfidentialityImpact: string;
    modifiedIntegrityImpact: string;
    modifiedAvailabilityImpact: string;
    environmentalScore: float;
    environmentalSeverity: string;
}

table CVSS_V2_0 {
    version: string;
    vectorString: string;
    accessVector: string;
    accessComplexity: string;
    authentication: string;
    confidentialityImpact: string;
    integrityImpact: string;
    availabilityImpact: string;
    baseScore: float;
    exploitability: string;
    remediationLevel: string;
    reportConfidence: string;
    temporalScore: float;
    collateralDamagePotential: string;
    targetDistribution: string;
    confidentialityRequirement: string;
    integrityRequirement: string;
    availabilityRequirement: string;
    environmentalScore: float;
}

table StringifiedObject {
    data: string;
}

table SupportingMedia {
    type: string;
    base64: bool;
    value: string;
}

table Description {
    lang: string;
    value: string;
    supportingMedia: [SupportingMedia];
}

table Change {
    at: string;
    status: string;
}

table Version {
    version: string;
    status: string;
    versionType: string;
    lessThan: string;
    lessThanOrEqual: string;
    changes: [Change];
}

table ProgramRoutine {
    name: string;
}

table Affected {
    vendor: string;
    product: string;
    collectionURL: string;
    packageName: string;
    cpes: [string];
    modules: [string];
    programFiles: [string];
    programRoutines: [ProgramRoutine];
    platforms: [string];
    repo: string;
    defaultStatus: string;
    versions: [Version];
}

table Reference {
    url: string;
    name: string;
    tags: [string];
}

table DescriptionProblemTypes {
    lang: string;
    description: string;
    cweId: string;
    type: string;
}

table ProblemType {
    descriptions: [DescriptionProblemTypes];
}

table Impact {
    capecId: string;
    descriptions: [Description];
}

table Other {
    type: string;
    content: StringifiedObject;
}

table Scenario {
    lang: string;
    value: string;
}

table Metric {
    format: string;
    scenarios: [Scenario];
    cvssV3_1: CVSS_V3_1;
    cvssV3_0: CVSS_V3_0;
    cvssV2_0: CVSS_V2_0;
    other: Other;
}

table Timeline {
    time: string;
    lang: string;
    value: string;
}

table Credit {
    lang: string;
    value: string;
    user: string;
    type: string;
}

table Remediation {
    anyOf: [string];
    products: [string];
    type: string;
}

table Remediations {
    windows: [Remediation];
}

table ProviderMetadata {
    orgId: string;
    shortName: string;
    dateUpdated: string;
    x_subShortName: string;
}

table TaxonomyRelation {
    taxonomyId: string;
    relationshipName: string;
    relationshipValue: string;
}

table TaxonomyMapping {
    taxonomyName: string;
    taxonomyVersion: string;
    taxonomyRelations: [TaxonomyRelation];
}

table Adp {
    providerMetadata: ProviderMetadata;
    datePublic: string;
    title: string;
    descriptions: [Description];
    affected: [Affected];
    problemTypes: [ProblemType];
    references: [Reference];
    impacts: [Impact];
    metrics: [Metric];
    configurations: [Description];
    workarounds: [Description];
    solutions: [Description];
    exploits: [Description];
    timeline: [Timeline];
    credits: [Credit];
    source: StringifiedObject;
    tags: [string];
    taxonomyMappings: [TaxonomyMapping];
}

table Cna {
    providerMetadata: ProviderMetadata;
    dateAssigned: string;
    datePublic: string;
    title: string;
    descriptions: [Description];
    affected: [Affected];
    problemTypes: [ProblemType];
    references: [Reference];
    impacts: [Impact];
    metrics: [Metric];
    configurations: [Description];
    workarounds: [Description];
    solutions: [Description];
    exploits: [Description];
    timeline: [Timeline];
    credits: [Credit];
    source: StringifiedObject;
    tags: [string];
    taxonomyMappings: [TaxonomyMapping];
    x_remediations: Remediations;
    rejectedReasons: [Description];
    replacedBy: [string];
}

table CveMetadata {
    cveId: string;
    assignerOrgId: string;
    assignerShortName: string;
    requesterUserId: string;
    dateUpdated: string;
    serial: int;
    dateReserved: string;
    datePublished: string;
    state: string;
    dateRejected: string;
}

table Containers {
    cna: Cna;
    adp: [Adp];
}

table Entry {
    dataType: string;
    dataVersion: string;
    cveMetadata: CveMetadata;
    containers: Containers;
}

root_type Entry;
