---
test_name: POST /agents (IPV6)

marks:
  - xfail

stages:

    # POST /agents
  - name: Create a new agent with a valid IPV6
    request: &agent_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        name: "NewIPV6Agent"
        ip: "fdb9:8d4a:1fc2:12a0:11aa:22ff:33eb:99cd"
    response:
      status_code: 200
      json: &agent_create_response
        error: 0
        data:
          id: !anystr
          key: !anystr
      save:
        json:
          agent1_id_ipv6: data.id

    # POST /agents
  - name: Create a new agent with a compressed IPV6
    request:
      verify: False
      <<: *agent_request
      json:
        name: "NewCompressedIPV6Agent"
        ip: "fdb9::99cd"
    response:
      status_code: 200
      json:
        <<: *agent_create_response
      save:
        json:
          agent2_id_ipv6: data.id

    # POST /agents
  - name: Create a new agent with an invalid IPV6
    request:
      verify: False
      <<: *agent_request
      json:
        name: "InvalidIPV6Agent"
        ip: "fdb9:8d4a:1fc2:12a0:11aa:22ff:33eb:99gh"
    response:
      status_code: 400
      json:
        error: 1706

    # POST /agents
  - name: Create a new agent with an invalid compressed IPV6
    request:
      verify: False
      <<: *agent_request
      json:
        name: "InvalidIPV6Agent"
        ip: "fdb9::99gh"
    response:
      status_code: 400
      json:
        error: 1706
    delay_after: !float "{global_db_delay}"

    # GET /agents
  - name: Check all registered IPV6 agents
    request: &agent_list_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: "{agent1_id_ipv6:s},{agent2_id_ipv6:s}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{agent1_id_ipv6:s}"
              registerIP: !anystr
              ip: !anystr
            - id: "{agent2_id_ipv6:s}"
              registerIP: !anystr
              ip: !anystr

---
test_name: POST /agents

marks:
  - xfail

stages:

    # POST /agents
  - name: Try to create a new agent without body
    request:
      verify: False
      <<: *agent_request
    response:
      status_code: 400
      json: &error_spec
        detail: !anystr
        title: !anystr

    # POST /agents
  - name: Create a new agent
    request:
      verify: False
      <<: *agent_request
      json:
        name: "NewAgentPost"
        ip: "any"
    response:
      status_code: 200
      json:
        <<: *agent_create_response
    delay_after: !float "{global_db_delay}"

    # POST /agents
  - name: Try to create agent with a name already present
    request:
      verify: False
      <<: *agent_request
      json:
        name: "NewAgentPost"
        ip: "any"
    response:
      status_code: 400
      json:
        error: 1705

    # POST /agents
  - name: Try to create an agent with a name longer than 128 chars
    request:
      verify: False
      <<: *agent_request
      method: POST
      json:
        name: "IhavetoolongofanamebecauseireallywantthisframeworktostopmeireallyhopeitdoesstopmeotherwiseiwillcauserealpainintheAPIandidontwantto"
        ip: "any"
        force:
          enabled: True
          disconnected_time:
            enabled: True
            value: "1s"
          after_registration_time: "1s"
    response:
      status_code: 400
      json:
        error: 1738

    # POST /agents
  - name: Try to create agent with missing field name
    request:
      verify: False
      <<: *agent_request
      json:
        ip: "any"
    response:
      status_code: 400
      json:
        <<: *error_spec

    # POST /agents
  - name: Create agent without assigning an specific IP
    request:
      verify: False
      <<: *agent_request
      json:
        name: "NewAgentPost2"
    response:
      status_code: 200
      json:
        <<: *agent_create_response

    # POST /agents
  - name: Create agent with an specific IP
    request:
      verify: False
      <<: *agent_request
      method: POST
      json:
        name: "NewAgentPost3"
        ip: "100.100.100.100"
    response:
      status_code: 200
      json:
        <<: *agent_create_response
    delay_after: !float "{global_db_delay}"

    # POST /agents
  - name: Try to create an agent with a duplicated IP
    request:
      verify: False
      <<: *agent_request
      method: POST
      json:
        name: "NewAgentPost4"
        ip: "100.100.100.100"
    response:
      status_code: 400
      json:
        error: 1706

    # POST /agents
  - name: Try to create an agent with an invalid IP (letters)
    request:
      verify: False
      <<: *agent_request
      json:
        name: "NewAgentPost5"
        ip: "A.B.C.D"
    response:
      status_code: 400
      json:
        error: 1706

    # POST /agents
  - name: Try to create an agent with an invalid IP (wrong numbers)
    request:
      verify: False
      <<: *agent_request
      json:
        name: "NewAgentPost5"
        ip: "333.333.333.333"
    response:
      status_code: 400
      json:
        error: 1706

    # POST /agents
  - name: Create an agent with force time
    request:
      verify: False
      <<: *agent_request
      method: POST
      json:
        name: "NewAgentPost3"
        ip: "any"
        force:
          enabled: True
          disconnected_time:
            enabled: True
            value: "1s"
          after_registration_time: "1s"
    response:
      status_code: 200
      json:
        <<: *agent_create_response

---
test_name: POST /agents (no IP)

marks:
  - xfail

stages:
  # POST /agents without IP. It must be any
  - name: Create an agent without IP
    request:
      verify: False
      <<: *agent_request
      method: POST
      json:
        name: "NewAgentWithoutIP"
    response:
      status_code: 200
      json:
        <<: *agent_create_response
      save:
        json:
          agent_id_no_ip: data.id
    delay_after: !float "{global_db_delay}"

  - name: Check that this agent has the IP 'any'
    request:
      verify: False
      <<: *agent_list_request
      params:
        agents_list: "{agent_id_no_ip:s}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: "{agent_id_no_ip:s}"
              registerIP: 'any'
              ip: 'any'

---
test_name: POST /groups

stages:

    # POST /groups
  - name: Try to create a group without body
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

    # POST /groups
  - name: Create a group called group4
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        group_id: "group4"
    response:
      status_code: 200
      json:
        message: !anystr

    # POST /groups
  - name: Try to create a group that already exists
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        group_id: "group1"
    response:
      status_code: 400
      json:
        error: 1711

    # POST /groups
  - name: Try to create a group with an invalid name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        group_id: ";wrong_name"
    response:
      status_code: 400
      json:
        <<: *error_spec

    # POST /groups
  - name: Try to create a group with a forbidden name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups"
      method: POST
      headers:
        Authorization: "Bearer {test_login_token}"
      json:
        group_id: "ar.conf"
    response:
      status_code: 400
      json:
        error: 1713
