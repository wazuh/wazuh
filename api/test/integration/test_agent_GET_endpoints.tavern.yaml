---
test_name: GET /agents

marks:
  - xfail

stages:

  - name: Get all agents
    request: &get_agents
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json: &basic_response
        error: 0
        data:
          affected_items:
            - id: '001'
            - id: '002'
            - id: '003'
            - id: '004'
            - id: '005'
            - id: '006'
            - id: '007'
            - id: '008'
            - id: '009'
            - id: '010'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 12
          total_failed_items: 0

  - name: Get all agents inverse order
    request:
      verify: False
      <<: *get_agents
      params:
        sort: -id
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "id"
            reverse: true
      status_code: 200

  - name: Get all agents sorted by multiple fields
    request:
      verify: False
      <<: *get_agents
      params:
        sort: os.name,os.major
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "os.name,os.major"
      status_code: 200

  - name: Get all agents sorted by status
    request:
      verify: False
      <<: *get_agents
      params:
        sort: status
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "status"
      status_code: 200

  - name: Get all agents sorted by status_code
    request:
      verify: False
      <<: *get_agents
      params:
        sort: status_code
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "status_code"
      status_code: 200

  - name: Pagination with offset 0 and limit 2
    request:
      verify: False
      <<: *get_agents
      params:
        offset: 0
        limit: 2
    response:
      status_code: 200
      save:
        json:
          expected_agent_name: data.affected_items[0].name
          expected_os_platform: data.affected_items[0].os.platform
          expected_os_version: data.affected_items[0].os.version
          expected_os_name: data.affected_items[0].os.name
          expected_manager_host: data.affected_items[0].manager
          expected_node_name: data.affected_items[0].node_name
          expected_name: data.affected_items[0].name
          expected_ip: data.affected_items[0].ip
      json:
        error: 0
        data:
          affected_items:
            - status: active
              id: '001'
            - status: active
              id: '002'
          failed_items: []
          total_affected_items: 12
          total_failed_items: 0

  - name: Try to show agents using offset -1
    request:
      verify: False
      <<: *get_agents
      params:
        offset: -1
    response:
      status_code: 400
      json: &error_spec
        detail: !anystr
        title: !anystr

  - name: Try to show agents with offset not integer value
    request:
      verify: False
      <<: *get_agents
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *get_agents
      params:
        offset: 9999999999999999999
    response:
      status_code: 400
      json:
        error: 2003

  - name: Try to show agents with limit 0
    request:
      verify: False
      <<: *get_agents
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show agents with an invalid limit value
    request:
      verify: False
      <<: *get_agents
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show agents with limit 999999
    request:
      verify: False
      <<: *get_agents
      params:
        limit: 999999
    response:
      status_code: 400

  - name: Try to show agents using wrong sort
    request:
      verify: False
      <<: *get_agents
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *get_agents
      params:
        search: 'wazuh-agent6'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '006'
              name: 'wazuh-agent6'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Search (Check injection)
    request:
      verify: False
      <<: *get_agents
      params:
        search: "wazuh-agent6' or 'wazuh'='wazuh"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Try to show agents using a search with no return
    request:
      verify: False
      <<: *get_agents
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: 0
        data: &affected_empty_answer
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Filter select one field
    request:
      verify: False
      <<: *get_agents
      params:
        select: 'os.platform'
        limit: 2
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'os.platform'
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              os:
                platform: !anystr
          failed_items: []
          total_affected_items: 12
          total_failed_items: 0

  - name: Filter select multiple fields
    request:
      verify: False
      <<: *get_agents
      params:
        select: 'dateAdd,mergedSum'
        limit: 2
        offset: 1
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'dateAdd,mergedSum'
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              dateAdd: !anystr
              mergedSum: !anystr
            - id: '002'
              dateAdd: !anystr
              mergedSum: !anystr
          failed_items: []
          total_affected_items: 13
          total_failed_items: 0

  - name: Try to show agents using a not allowed selector
    request:
      verify: False
      <<: *get_agents
      params:
        select: param_test
    response:
      status_code: 400
      json:
        error: 1724

  - name: Try to show agents using not allowed selector (invalid character)
    request:
      verify: False
      <<: *get_agents
      params:
        select: param_%_test
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent version following the 'wazuh vX.Y.Z' format
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'Wazuh v3.9.2'
    response: &old_wazuh_agents_response
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
            - id: '010'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Filter by agent version following the 'wazuh X.Y.Z' format
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'Wazuh 3.9.2'
    response:
      <<: *old_wazuh_agents_response

  - name: Filter by agent version following the 'vX.Y.Z' format
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'v3.9.2'
    response:
      <<: *old_wazuh_agents_response

  - name: Filter by agent version following the 'X.Y.Z' format
    request:
      verify: False
      <<: *get_agents
      params:
        version: '3.9.2'
    response:
      <<: *old_wazuh_agents_response

  - name: Try to show agents using a non existing version
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'TestVersion'
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid version
    request:
      verify: False
      <<: *get_agents
      params:
        version: 'Test%Version'
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent OS Platform
    request:
      verify: False
      <<: *get_agents
      params:
        os.platform: "{expected_os_platform:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              os:
                platform: "{expected_os_platform:s}"
          failed_items: []
          total_affected_items: 10
          total_failed_items: 0

  - name: Try to show agents using a non existing OS Platform
    request:
      verify: False
      <<: *get_agents
      params:
        os.platform: test_platform
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try show agents with not existed OS Platform (invalid character)
    request:
      verify: False
      <<: *get_agents
      params:
        os.platform: test_%_platform
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent OS Version
    request:
      verify: False
      <<: *get_agents
      params:
        os.version: "{expected_os_version:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              os:
                version: "{expected_os_version:s}"
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Try to show agents using a non existing OS Version
    request:
      verify: False
      <<: *get_agents
      params:
        os.version: test_version
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid OS Version
    request:
      verify: False
      <<: *get_agents
      params:
        os.version: test_version_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent OS Name
    request:
      verify: False
      <<: *get_agents
      params:
        os.name: "{expected_os_name:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              os:
                name: "{expected_os_name:s}"
          failed_items: []
          total_affected_items: 11
          total_failed_items: 0

  - name: Try to show agents using a non existing OS Name
    request:
      verify: False
      <<: *get_agents
      params:
        os.name: test_name
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid OS Name
    request:
      verify: False
      <<: *get_agents
      params:
        os.name: test_name_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent Node Name
    request:
      verify: False
      <<: *get_agents
      params:
        node_name: "{expected_node_name:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              node_name: "{expected_node_name:s}"
          failed_items: []
          total_failed_items: 0

  - name: Try to show agents using a non existing Node Name
    request:
      verify: False
      <<: *get_agents
      params:
        node_name: test_node_name%
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try show agents using an invalid Node Name
    request:
      verify: False
      <<: *get_agents
      params:
        node_name: test_node_name_*
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent name
    request:
      verify: False
      <<: *get_agents
      params:
        name: "{expected_name:s}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              name: "{expected_name:s}"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show agents using a non existing agent name
    request:
      verify: False
      <<: *get_agents
      params:
        name: test_name
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid agent name
    request:
      verify: False
      <<: *get_agents
      params:
        name: test_name_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent IP
    request:
      verify: False
      <<: *get_agents
      params:
        ip: "{expected_ip:s}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              ip: "{expected_ip:s}"
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show agents using a non existing IP
    request:
      verify: False
      <<: *get_agents
      params:
        ip: test_ip
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid IP
    request:
      verify: False
      <<: *get_agents
      params:
        ip: test_ip_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent ManagerHost
    request:
      verify: False
      <<: *get_agents
      params:
        manager: "{expected_manager_host:s}"
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - manager: "{expected_manager_host:s}"
          failed_items: []
          total_failed_items: 0

  - name: Try to show agents using a non existing ManagerHost
    request:
      verify: False
      <<: *get_agents
      params:
        manager: test_manager
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try to show agents using an invalid ManagerHost
    request:
      verify: False
      <<: *get_agents
      params:
        manager: test_manager_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter by agent status
    request:
      verify: False
      <<: *get_agents
      params:
        status: disconnected
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
            - id: '010'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Filter by agent status 2
    request:
      verify: False
      <<: *get_agents
      params:
        status: disconnected,never_connected
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
            - id: '010'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter by agent status 3 (Upper and lowercase letters in values)
    request:
      verify: False
      <<: *get_agents
      params:
        status: DiScoNNected
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
            - id: '010'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Try to show agents with a non existing status
    request:
      verify: False
      <<: *get_agents
      params:
        status: test_status
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents by group
    request:
      verify: False
      <<: *get_agents
      params:
        group: group1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
            - id: '005'
            - id: '007'
            - id: '008'
            - id: '009'
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Try to show agents using a non existing group
    request:
      verify: False
      <<: *get_agents
      params:
        group: test_group
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try show agents using an invalid group
    request:
      verify: False
      <<: *get_agents
      params:
        group: test_group_%
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents by group_config_status (synced)
    request:
      verify: False
      <<: *get_agents
      params:
        group_config_status: "synced"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
            - id: '002'
            - id: '003'
            - id: '004'
            - id: '005'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 8
          total_failed_items: 0

  - name: Filter agents by group_config_status (not synced)
    request:
      verify: False
      <<: *get_agents
      params:
        group_config_status: "not synced"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
            - id: '010'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents using an invalid group_config_status
    request:
      verify: False
      <<: *get_agents
      params:
        group_config_status: invalid
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents by query
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=group2;lastKeepAlive<1d
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '002'
            - id: '005'
            - id: '006'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter agents by query (group - group does not exist)
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=noexists
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Filter agents by query (group - group1)
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=group1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
            - id: '005'
            - id: '007'
            - id: '008'
            - id: '009'
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Filter agents by query (group - get agents that are not in group1)
    request:
      verify: False
      <<: *get_agents
      params:
        q: group!=group1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '002'
            - id: '003'
            - id: '004'
            - id: '006'
            - id: '010'
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Filter agents by query (group - get agents with group~group)
    request:
      verify: False
      <<: *get_agents
      params:
        q: group~group
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
            - id: '002'
            - id: '003'
            - id: '005'
            - id: '006'
            - id: '007'
            - id: '008'
            - id: '009'
            - id: '010'
          failed_items: []
          total_affected_items: 9
          total_failed_items: 0

  - name: Filter agents by query (group - invalid operator)
    request:
      verify: False
      <<: *get_agents
      params:
        q: group<whatever
    response:
      status_code: 400
      json:
        error: 1409

  - name: Filter agents by query (datetime)
    request:
      verify: False
      <<: *get_agents
      params:
        q: dateAdd>2021-07-03 00:00:00;lastKeepAlive>2021-07-02
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
            - id: '010'
          failed_items: [ ]
          total_affected_items: 2
          total_failed_items: 0

  - name: Filter agents by query (datetime)
    request:
      verify: False
      <<: *get_agents
      params:
        q: dateAdd>2021-07-03 00:00:00;dateAdd<2021-07-05 00:00:00
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
          failed_items: [ ]
          total_affected_items: 1
          total_failed_items: 0

  - name: Filter agents by query (datetime)
    request:
      verify: False
      <<: *get_agents
      params:
        q: dateAdd>2021-07-07 00:00:00,dateAdd>2021-07-04 00:00:00
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '010'
          failed_items: [ ]
          total_affected_items: 1
          total_failed_items: 0

  - name: Filter agents by complex query
    request:
      verify: False
      <<: *get_agents
      params:
        q: id<5;id!=2;manager~waz;(os.major=16,os.major=20)
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
            - id: '003'
            - id: '004'
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0

  - name: Filter agents by nested queries (first)
    request:
      verify: False
      <<: *get_agents
      params:
        q: id!=001;(status=active;(group=group1,group=group2))
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '002'
            - id: '005'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0

  - name: Filter agents by nested queries (second)
    request:
      verify: False
      <<: *get_agents
      params:
        q: (status=never_connected,(id<4;(group=group1,group=group2)))
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
            - id: '002'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try to show agents using an wrong query
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=default;lastKeepAe<1d
    response:
      status_code: 400
      json:
        error: 1408

  - name: Try to show agents using an invalid query
    request:
      verify: False
      <<: *get_agents
      params:
        q: group=default;lastKeep%<1d
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents using older_than param
    request:
      verify: False
      <<: *get_agents
      params:
        older_than: 1d
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '009'
            - id: '010'
            - id: '011'
            - id: '012'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents using an invalid older_than
    request:
      verify: False
      <<: *get_agents
      params:
        older_than: bad_time
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to show a list of agents
    request:
      verify: False
      <<: *get_agents
      params:
        agents_list: "001,002,003"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - status: active
              id: '001'
            - status: active
              id: '002'
            - status: active
              id: '003'
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0

---
test_name: GET /agents with single agent id

stages:

  # GET /agents?agents_list=001
  - name: Basic response agent
    request: &get_agent
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: '001'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - dateAdd: !anystr
              id: "001"
              ip: !anystr
              lastKeepAlive: !anystr
              manager: !anystr
              name: !anystr
              node_name: !anystr
              os:
                arch: !anystr
                codename: !anystr
                major: !anystr
                minor: !anystr
                name: !anystr
                platform: !anystr
                uname: !anystr
                version: !anystr
              registerIP: !anystr
              status: !anystr
              version: !anystr
              status_code: !anyint
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /agents?agents_list=999
  - name: Try to show not existing agent
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: '999'
    response:
      status_code: 200
      json:
        error: 1
        data:
          affected_items: []
          failed_items:
            - id:
                - '999'
              error:
                code: 1701
          total_affected_items: 0
          total_failed_items: 1

  # GET /agents?agents_list=wrong_name
  - name: Try show not existing agent by name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        agents_list: wrong_name
    response:
      status_code: 400
      json:
        <<: *error_spec

  # GET /agents?agents_list=001&select=os.platform
  - name: Filter select one field
    request:
      verify: False
      <<: *get_agent
      params:
        select: 'os.platform'
        agents_list: '001'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'os.platform'
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              os:
                platform: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /agents?agents_list=001&select=dateAdd,status
  - name: Filter select multiple fields
    request:
      verify: False
      <<: *get_agent
      params:
        select: 'dateAdd,status'
        agents_list: '001'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'dateAdd,status'
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              dateAdd: !anystr
              status: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /agents - disconnection time
  - name: Assert active and never_connected agents do not have disconnection_time
    request:
      verify: False
      <<: *get_agent
      params:
        select: "disconnection_time"
        status: "active,never_connected"
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_validate_key_not_in_response
        extra_kwargs:
          key: 'disconnection_time'
      status_code: 200

  # GET /agents?agents_list=001&select=param_test
  - name: Try show agents with not allowed selector
    request:
      verify: False
      <<: *get_agent
      params:
        select: param_test
        agents_list: '001'
    response:
      status_code: 400
      json:
        error: 1724

  # GET /agents?agents_list=001&select=param_%_test
  - name: Try show agents with not allowed selector (invalid character)
    request:
      verify: False
      <<: *get_agent
      params:
        select: param_%_test
        agents_list: '001'
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /groups

stages:

  - name: Basic response agents groups
    request: &get_agents_groups
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      save:
        json:
          expected_total_agents: data.affected_items[2].count
      json:
        error: 0
        data: &get_groups_answer
          affected_items:
            - name: 'default'
              count: 10
            - name: 'group1'
              count: 5
            - name: 'group2'
              count: 5
            - name: 'group3'
              count: 4
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Pagination
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: 2
        limit: 1
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: 'group2'
              count: 5
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show groups with offset -1
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with offset not integer value
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with offset too large 99999999999 (valid)
    request:
      verify: False
      <<: *get_agents_groups
      params:
        offset: 99999999999
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show groups with limit 0
    request:
      verify: False
      <<: *get_agents_groups
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with limit not integer value
    request:
      verify: False
      <<: *get_agents_groups
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show groups with limit 999999
    request:
      verify: False
      <<: *get_agents_groups
      params:
        limit: 999999
    response:
      status_code: 400

  - name: Sort
    request:
      verify: False
      <<: *get_agents_groups
      params:
        sort: -name
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "name"
            reverse: true
      status_code: 200

  - name: Sort by count
    request:
      verify: False
      <<: *get_agents_groups
      params:
        sort: -count
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "count"
            reverse: true
      status_code: 200

  - name: Try to show groups with wrong sort
    request:
      verify: False
      <<: *get_agents_groups
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *get_agents_groups
      params:
        search: default
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: 'default'
              count: 10
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show groups with wrong search
    request:
      verify: False
      <<: *get_agents_groups
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Try show agents with wrong hash
    request:
      verify: False
      <<: *get_agents_groups
      params:
        hash: wrong_hash
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try to get a list of groups information
    request:
      verify: False
      <<: *get_agents_groups
      params:
        groups_list: 'group1,group3'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: 'group1'
            - name: 'group3'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Get groups using query parameter (name)
    request:
      verify: False
      <<: *get_agents_groups
      params:
        q: name=default
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: 'default'
              count: 10
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get groups using the query parameter (count)
    request:
      verify: False
      <<: *get_agents_groups
      params:
        q: count=4
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: 'group3'
              count: 4
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0


  - name: Try to get groups using an invalid query
    request:
      verify: False
      <<: *get_agents_groups
      params:
        q: name%=invalid
    response:
      status_code: 400
      json:
        error: 1407

  - name: Get agents groups using select
    request:
      verify: False
      <<: *get_agents_groups
      params:
        select: 'count'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'name,count' # required_fields={'name'}
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Get distinct agents groups
    request:
      verify: False
      <<: *get_agents_groups
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /groups filter hash

marks:
  - parametrize:
      key: hash
      vals:
        - md5
        - sha1
        - sha224
        - sha256
        - sha384
        - sha512
        - blake2b
        - blake2s
        - sha3_224
        - sha3_256
        - sha3_384
        - sha3_512

stages:

  - name: Filter hash
    request:
      verify: False
      <<: *get_agents_groups
      params:
        hash: "{hash:s}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *get_groups_answer

---
test_name: GET /groups/{group_id}/agents

stages:

  - name: Try get all agents in one group
    request: &groups_id_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/group3/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '003'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Pagination
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: 1
        limit: 2
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '006'
            - id: '007'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with offset -1
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: -1
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset not integer value
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: wrong_offset
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with offset too large 9999999999999999999
    request:
      verify: False
      <<: *groups_id_request
      params:
        offset: 9999999999999999999
    response:
      status_code: 400
      json:
        error: 2003

  - name: Try show agents with limit 0
    request:
      verify: False
      <<: *groups_id_request
      params:
        limit: 0
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit not integer value
    request:
      verify: False
      <<: *groups_id_request
      params:
        limit: wrong_limit
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Try show agents with limit 999999
    request:
      verify: False
      <<: *groups_id_request
      params:
        limit: 999999
    response:
      status_code: 400

  - name: Params, bad group name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_group/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response: &resource_not_found_group
      status_code: 404
      json:
        error: 1710

  - name: Params, invalid group name (not alphanumeric)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_%_group/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Sort
    request:
      verify: False
      <<: *groups_id_request
      params:
        sort: -id
        limit: 3
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "id"
            reverse: true
      status_code: 200

  - name: Try show agents with wrong sort
    request:
      verify: False
      <<: *groups_id_request
      params:
        sort: -wrong_sort
    response:
      status_code: 400
      json:
        error: 1403

  - name: Search
    request:
      verify: False
      <<: *groups_id_request
      params:
        search: 'wazuh-agent8'
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '008'
              name: 'wazuh-agent8'
              group:
                - default
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show agents with wrong search
    request:
      verify: False
      <<: *groups_id_request
      params:
        search: wrong_search
    response:
      status_code: 200
      json:
        error: 0
        data:
          <<: *affected_empty_answer

  - name: Filter select one field
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: 'os.platform'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'os.platform'
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '003'
              os:
                platform: !anystr
            - id: '006'
              os:
                platform: !anystr
            - id: '007'
              os:
                platform: !anystr
            - id: '008'
              os:
                platform: !anystr
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter select multiple fields
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: 'dateAdd,mergedSum'
        limit: 1
        offset: 2
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'dateAdd,mergedSum'
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '007'
              dateAdd: !anystr
              mergedSum: !anystr
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with not allowed selector
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: param_test
    response:
      status_code: 400
      json:
        error: 1724

  - name: Try show agents with not allowed selector (invalid character)
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: param_%_test
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Status multiple
    request:
      verify: False
      <<: *groups_id_request
      params:
        status: active,disconnected
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '003'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Try show agents with not allowed status
    request:
      verify: False
      <<: *groups_id_request
      params:
        status: wrong_status
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Filter agents by query
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: group=group1;lastKeepAlive<1d
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  - name: Filter agents by complex query
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: id<5;id!=2;manager~waz;(os.major>14,os.major<20)
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '003'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show agents with bad query
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: group=default;lastKeepAe<1d
    response:
      status_code: 400
      json:
        error: 1408

  - name: Try show agents with bad query (invalid character)
    request:
      verify: False
      <<: *groups_id_request
      params:
        q: group=default;lastKeep%<1d
    response:
      status_code: 400
      json:
        <<: *error_spec

  - name: Get distinct group agents
    request:
      verify: False
      <<: *groups_id_request
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /groups/{group_id}/agents {sort,select}

marks:
  - parametrize:
      key: field
      vals:
        - configSum
        - dateAdd
        - group
        - id
        - ip
        - lastKeepAlive
        - manager
        - mergedSum
        - name
        - node_name
        - os.arch
        - os.build
        - os.codename
        - os.major
        - os.minor
        - os.name
        - os.platform
        - os.uname
        - os.version
        - registerIP
        - status
        - version
        - status_code

stages:

  - name: Filter groups, select
    request:
      verify: False
      <<: *groups_id_request
      params:
        select: "{field}"
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: "{field}"
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '003'
            - id: '006'
            - id: '007'
            - id: '008'
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0

  - name: Filter groups, sort
    request:
      verify: False
      <<: *groups_id_request
      params:
        sort: "{field}"
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "{field}"
      status_code: 200

---
test_name: GET /groups/{group_id}/configuration

stages:

  - name: Try get the configuration of a group
    request: &groups_id_config_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/default/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json: &groups_id_config_response
        error: 0
        data:
          affected_items:
            - config: !anything
              filters: !anything
          total_affected_items: !anyint

  - name: Try get the configuration of a bad group
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_group/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *resource_not_found_group

  - name: Try get the configuration of a bad group (not alphanumeric)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/groups/wrong_%group/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 400
      json:
        <<: *error_spec

---
test_name: GET /agents?name=agent_name

stages:

  - name: Basic response agents name
    request: &get_agents_by_name
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        name: wazuh-agent1
    response:
      status_code: 200
      json:
        error: 0
        data: &get_agents_by_name_response
          affected_items:
            - id: '001'
              name: 'wazuh-agent1'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Error agent name
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/agents?name=wrong_agent"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        name: wrong_agent
    response:
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: 0

  - name: Select one field
    request:
      verify: False
      <<: *get_agents_by_name
      params:
        select: name
        name: wazuh-agent1
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'name'
      status_code: 200
      json:
        error: 0
        data:
          <<: *get_agents_by_name_response

  - name: Select three fields
    request:
      verify: False
      <<: *get_agents_by_name
      params:
        select: name,id,status
        name: wazuh-agent1
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'name,id,status'
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - id: '001'
              name: 'wazuh-agent1'
              status: 'active'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try show agents with wrong select
    request:
      verify: False
      <<: *get_agents_by_name
      params:
        select: wrong_select
        name: wazuh-agent1
    response:
      status_code: 400
      json:
        error: 1724
