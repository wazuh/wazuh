---
test_name: /cluster/local/config

marks:
  - rbac_tests

stages:

  - name: Get cluster config
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/local/config"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response: &permission_denied
      status_code: 403
      json:
        error: 4000

---
test_name: GET /cluster/healthcheck

stages:

  - name: Get cluster healtcheck
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/healthcheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: 'worker1,worker2'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - info:
                name: "worker1"
                ip: !anystr
                version: !anystr
                type: !anystr
                n_active_agents: !anyint
              status: !anything
          failed_items:
            - error:
                code: 4000
              id:
                - 'worker2'
          total_affected_items: 1
          total_failed_items: 1

  - name: Get cluster healtcheck
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/healthcheck"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - info:
                name: "worker1"
                ip: !anystr
                version: !anystr
                type: !anystr
                n_active_agents: !anyint
              status: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /cluster/ruleset/synchronization

stages:

  - name: Get cluster ruleset synchronization status (partial response, user agnostic)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/ruleset/synchronization"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: 'worker1'
              synced: !anybool
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get cluster ruleset synchronization status (permission denied)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/ruleset/synchronization"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: "master-node"
    response:
      <<: *permission_denied

  - name: Get cluster ruleset synchronization status (partial response, user aware)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/ruleset/synchronization"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: "master-node,worker1"
    response:
      status_code: 200
      json:
        error: 2
        data:
          affected_items:
            - name: 'worker1'
              synced: !anybool
          failed_items:
            - error:
                code: 4000
              id:
                - "master-node"
          total_affected_items: 1
          total_failed_items: 1

---
test_name: GET /cluster/local/info

stages:

  - name: Get cluster node
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/local/info"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

---
test_name: GET /cluster/nodes

stages:

  - name: Get cluster nodes
    request: &get_cluster_nodes
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 5
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: &cluster_nodes_response
            - name: !anystr
              type: !anystr
              version: !anystr
              ip: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get cluster nodes
    request:
      verify: False
      <<: *get_cluster_nodes
      params:
        limit: 500
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *cluster_nodes_response
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Filters (type) -> master
    request:
      verify: False
      <<: *get_cluster_nodes
      params:
        type: master
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Filters (type) -> worker
    request:
      verify: False
      <<: *get_cluster_nodes
      params:
        limit: 5
        type: worker
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *cluster_nodes_response
              type: worker
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /cluster/nodes/{node_id}

stages:

  - name: Get cluster {worker2} (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: 'worker2'
    response:
      <<: *permission_denied

  - name: Get cluster {worker2} (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: 'worker1'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *cluster_nodes_response
              type: worker
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Get cluster {master-node,worker1,worker2} (Allow, Deny, Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/nodes"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: 'master-node,worker1,worker2'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - <<: *cluster_nodes_response
              type: worker
          failed_items:
            - error:
                code: 4000
                message: !anystr
                remediation: !anystr
              id:
                - 'master-node'
                - 'worker2'
          total_affected_items: 1
          total_failed_items: 2

---
test_name: GET /cluster/status

stages:

  - name: Get cluster status
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

---
test_name: GET /cluster/{node_id}/configuration

stages:

  - name: Request {node_id}
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - alerts: !anything
              auth: !anything
              cis-cat: !anything
              cluster: !anything
              command: !anything
              global: !anything
              localfile: !anything
              osquery: !anything
              remote: !anything
              rootcheck: !anything
              ruleset: !anything
              sca: !anything
              syscheck: !anything
              syscollector: !anything
              vulnerability-detector: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Request (worker1) (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/master-node/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

---
test_name: GET /cluster/configuration/validation

stages:

  - name: Request cluster validation
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/configuration/validation"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - name: worker1
              status: 'OK'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Request cluster validation
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/configuration/validation"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: 'worker1,worker2'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - name: worker1
              status: OK
          failed_items:
            - error:
                code: 4000
                message: !anystr
                remediation: !anystr
              id:
                - worker2
          total_affected_items: 1
          total_failed_items: 1

---
test_name: GET /cluster/{node_id}/configuration/{component}/{configuration}

stages:

  - name: Try to show the config of analisys/global through a worker
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/configuration/analysis/global"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      <<: *permission_denied

  - name: Try to show the config of analisys/global through a worker
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/configuration/analysis/global"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200

---
test_name: GET /cluster/{node_id}/info

stages:

  - name: Request {node_id}
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/info"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

  - name: Request {node_id}
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/info"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

---
test_name: GET /cluster/{node_id}/logs

stages:

  - name: Request {worker1} (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request {worker2} (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

---
test_name: GET /cluster/{node_id}/logs/summary

stages:

  - name: Request {worker1} (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/logs/summary"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request {worker2} (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/logs/summary"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

---
test_name: GET /cluster/{node_id}/stats

stages:

  - name: Cluster stats {worker2} today (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

  - name: Cluster stats {worker1} today (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        date: "2019-08-27"
    response:
      status_code: 200

---
test_name: GET /cluster/{node_id}/status

stages:

  - name: Request {worker1} (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200

  - name: Request {worker2} (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker2/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      <<: *permission_denied

---
test_name: GET /cluster/api/config

stages:

  - name: Request API config (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/api/config"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: 'worker1,worker2'
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - node_name: worker1
          failed_items:
            - error:
                code: 4000
              id:
                - worker2
          total_affected_items: 1
          total_failed_items: 1

---
test_name: PUT /cluster/{node_id}/configuration

stages:

  - name: Upload a valid configuration (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/worker1/configuration"
      method: PUT
      data: "{valid_ossec_conf:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - 'worker1'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        error: 0

  - name: Try to upload a valid configuration (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/master-node/configuration"
      method: PUT
      data: "{valid_ossec_conf:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      <<: *permission_denied

---
test_name: PUT /cluster/restart

stages:

  - name: Restart cluster
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        nodes_list: 'worker1,worker2'
    response:
      <<: *permission_denied

  - name: Restart cluster
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/cluster/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data: # Empty response. Lack of combined permissions for every node
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
