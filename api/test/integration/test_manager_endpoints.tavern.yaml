---
test_name: GET /manager/status

stages:

  # GET /manager/status
  - name: Request
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/status"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
              wazuh-analysisd: !anystr
              wazuh-authd: !anystr
              wazuh-execd: !anystr
              wazuh-logcollector: !anystr
              wazuh-monitord: !anystr
              wazuh-remoted: !anystr
              wazuh-syscheckd: !anystr
              wazuh-apid: !anystr
              wazuh-clusterd: !anystr
              wazuh-db: !anystr
              wazuh-modulesd: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /manager/info

stages:

  # GET /manager/info
  - name: Request
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/info"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - max_agents: !anystr
              openssl_support: !anystr
              path: !anystr
              type: !anystr
              tz_name: !anystr
              tz_offset: !anystr
              version: !anystr
              uuid: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /manager/configuration?{section}

marks:
 - parametrize:
     key: section
     vals:
       - alerts
       - auth
       - cluster
       - command
       - global
       - localfile
       - remote
       - rootcheck
       - ruleset
       - sca
       - syscheck
       - syscollector
       - vulnerability-detection
       - indexer

stages:

  # GET /manager/configuration
  - name: Request all sections
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
      params:
        section: "{section}"
    response:
      status_code: 200
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: "{section:s}"

  # GET /manager/configuration
  - name: Request all sections in raw format
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        raw: True
    response:
      status_code: 200
      headers:
        content-type: "application/xml; charset=utf-8"

---
test_name: GET /manager/configuration

stages:

  # GET /manager/configuration
  - name: Request
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - alerts: !anything
              auth: !anything
              cluster: !anything
              command: !anything
              global: !anything
              localfile: !anything
              remote: !anything
              rootcheck: !anything
              ruleset: !anything
              sca: !anything
              syscheck: !anything
              syscollector: !anything
              vulnerability-detection: !anything
              indexer: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0


  # GET /manager/configuration
  - name: Request section and field (1)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
      params:
        section: rootcheck
        field: disabled
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - rootcheck:
                disabled: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /manager/configuration
  - name: Request section and field (2)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
      params:
        section: syscheck
        field: frequency
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - syscheck:
                frequency: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  # GET /manager/configuration
  - name: Request invalid section
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
      params:
        section: invalid_section
    response:
      status_code: 400

  # GET /manager/configuration
  - name: Request invalid field
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
      params:
        section: syscheck
        field: invalid_field
    response:
      status_code: 200
      json:
        error: 1
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1103
              id:
                - !anystr
          total_affected_items: 0
          total_failed_items: 1

  - name: Get ruleset decoder_dir section distinct configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
      params:
        section: ruleset
        field: decoder_dir
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

  - name: Get ruleset rule_dir section distinct configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: GET
      headers:
          Authorization: "Bearer {test_login_token}"
      params:
        section: ruleset
        field: rule_dir
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /manager/daemons/stats

stages:

  # GET /manager/daemons/stats
  - name: Get all daemons' statistics
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/daemons/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: wazuh-remoted
            - name: wazuh-analysisd
            - name: wazuh-db
          total_affected_items: 3
          failed_items: []
          total_failed_items: 0

  # GET /manager/daemons/stats?daemons_list=wazuh-remoted
  - name: Get statistics from a single daemon
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/daemons/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        daemons_list: wazuh-remoted
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: wazuh-remoted
          total_affected_items: 1
          failed_items: []
          total_failed_items: 0

  # GET /manager/daemons/stats?daemons_list=wazuh-remoted,wazuh-db,wazuh-analysisd
  - name: Get statistics from a list of daemons
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/daemons/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        daemons_list: wazuh-remoted,wazuh-db,wazuh-analysisd
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: wazuh-remoted
            - name: wazuh-db
            - name: wazuh-analysisd
          total_affected_items: 3
          failed_items: []
          total_failed_items: 0

  # GET /manager/daemons/stats?daemons_list=wrong-daemon-name
  - name: Try to get statistics from a wrong daemon
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/daemons/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        daemons_list: wrong-daemon-name
    response:
      status_code: 400

---
test_name: GET /manager/stats

stages:

  # GET /manager/stats
  - name: Manager stats
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
        status_code: 400
        json:
          error: 1308

  - name: Manager stats
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        date: "2019-08-27"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - alerts: !anything
              events: !anyint
              firewall: !anyint
              hour: !anyint
              syscheck: !anyint
              totalAlerts: !anyint
          total_affected_items: 1
          failed_items: []
          total_failed_items: 0

  # GET /manager/stats
  - name: Manager stats with old date
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/stats"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        date: "1970-01-01"
    response:
      status_code: 400
      json:
        error: 1308

---
test_name: GET /manager/stats/hourly

stages:

  # GET /manager/stats/hourly
  - name: Hourly stats
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/stats/hourly"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - averages: !anything
                interactions: !anyint
            total_affected_items: 1
            failed_items: []
            total_failed_items: 0
---
test_name: GET /manager/stats/weekly

stages:

  # GET /manager/stats/weekly
  - name: Weekly stats
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/stats/weekly"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - Sun:
                    hours: !anything
                    interactions: !anyint
              - Mon:
                  hours: !anything
                  interactions: !anyint
              - Tue:
                  hours: !anything
                  interactions: !anyint
              - Wed:
                  hours: !anything
                  interactions: !anyint
              - Thu:
                  hours: !anything
                  interactions: !anyint
              - Fri:
                  hours: !anything
                  interactions: !anyint
              - Sat:
                  hours: !anything
                  interactions: !anyint
            total_affected_items: 7
            failed_items: []
            total_failed_items: 0
---
test_name: GET /manager/stats/analysisd

stages:

  # GET /manager/stats/analysisd
  - name: Analysisd stats
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/stats/analysisd"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - total_events_decoded: !anyfloat
                syscheck_events_decoded: !anyfloat
                syscollector_events_decoded: !anyfloat
                rootcheck_events_decoded: !anyfloat
                sca_events_decoded: !anyfloat
                winevt_events_decoded: !anyfloat
                other_events_decoded: !anyfloat
                events_processed: !anyfloat
                events_received: !anyfloat
                events_dropped: !anyfloat
                alerts_written: !anyfloat
                firewall_written: !anyfloat
                fts_written: !anyfloat
                syscheck_queue_usage: !anyfloat
                syscheck_queue_size: !anyfloat
                syscollector_queue_usage: !anyfloat
                syscollector_queue_size: !anyfloat
                rootcheck_queue_usage: !anyfloat
                rootcheck_queue_size: !anyfloat
                sca_queue_usage: !anyfloat
                sca_queue_size: !anyfloat
                hostinfo_queue_usage: !anyfloat
                hostinfo_queue_size: !anyfloat
                winevt_queue_usage: !anyfloat
                winevt_queue_size: !anyfloat
                event_queue_usage: !anyfloat
                event_queue_size: !anyfloat
                rule_matching_queue_usage: !anyfloat
                rule_matching_queue_size: !anyfloat
                alerts_queue_usage: !anyfloat
                alerts_queue_size: !anyfloat
                firewall_queue_usage: !anyfloat
                firewall_queue_size: !anyfloat
                statistical_queue_usage: !anyfloat
                statistical_queue_size: !anyfloat
                archives_queue_usage: !anyfloat
                archives_queue_size: !anyfloat
            total_affected_items: 1
            failed_items: []
            total_failed_items: 0
---
test_name: GET /manager/stats/remoted

stages:

  # GET /manager/stats/remoted
  - name: Remoted stats
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/stats/remoted"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - queue_size: !anyfloat
                total_queue_size: !anyfloat
                tcp_sessions: !anyfloat
                evt_count: !anyfloat
                ctrl_msg_count: !anyfloat
                discarded_count: !anyfloat
                sent_bytes: !anyfloat
                recv_bytes: !anyfloat
            total_affected_items: 1
            failed_items: []
            total_failed_items: 0

---
test_name: GET /manager/logs

stages:

  # GET /manager/logs
  - name: Request
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items: !anything
            failed_items: []
            total_affected_items: !anyint
            total_failed_items: 0

  # GET /manager/logs
  - name: Filters -> limit=4
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 4
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - &manager_log
                description: !anystr
                level: !anystr
                tag: !anystr
                timestamp: !anystr
              - <<: *manager_log
              - <<: *manager_log
              - <<: *manager_log
            failed_items: []
            total_affected_items: !anyint
            total_failed_items: 0

  # GET /manager/logs
  - name: Filters -> limit=2, sort=-level
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 2
        sort: -level
    response:
      verify_response_with:
        - function: tavern_utils:test_sort_response
          extra_kwargs:
            key: "level"
            reverse: true
      status_code: 200

  # GET /manager/logs
  - name: Filters -> offset=3, limit=3
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 3
        offset: 3
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - <<: *manager_log
              - <<: *manager_log
              - <<: *manager_log
            failed_items: []
            total_affected_items: !anyint
            total_failed_items: 0

  # GET /manager/logs
  - name: Filters -> offset=3, level=info, limit=4
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        limit: 4
        offset: 3
        level: info
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - <<: *manager_log
              - <<: *manager_log
              - <<: *manager_log
              - <<: *manager_log
            failed_items: []
            total_affected_items: !anyint
            total_failed_items: 0

  # GET /manager/logs
  - name: Filters -> tag=wazuh-analysisd, limit=1
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        tag: wazuh-analysisd
        limit: 1
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - <<: *manager_log
            failed_items: []
            total_affected_items: !anyint
            total_failed_items: 0

  # GET /manager/logs
  - name: Filters -> tag=wazuh-syscheckd, limit=1
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        tag: wazuh-syscheckd
        limit: 1
    response:
        status_code: 200
        json:
          error: 0
          data:
            affected_items:
              - <<: *manager_log
            failed_items: []
            total_affected_items: !anyint
            total_failed_items: 0

  - name: Filters by query (tag=wazuh-syscheckd, level=info)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        q: tag=wazuh-syscheckd;level=info
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "tag"
            expected_values: "wazuh-syscheckd"
        - function: tavern_utils:test_expected_value
          extra_kwargs:
            key: "level"
            expected_values: "info"

  - name: Filters by query (timestamp<2021-07-01)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        q: timestamp<2021-07-01
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Filter by non-existent tag
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        tag: wazuh-unknown-daemon
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Read logs using valid select
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        select: 'timestamp,tag'
    response:
      verify_response_with:
        # Check response item keys are the selected keys
        function: tavern_utils:test_select_key_affected_items
        extra_kwargs:
          select_key: 'timestamp,tag'
      status_code: 200
      json:
        error: 0
        data:
          total_affected_items: !anyint
          failed_items: []
          total_failed_items: 0

  - name: Try to read logs using invalid select
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        select: 'noexists'
    response:
      status_code: 400
      json: &invalid_select
        error: 1724

  - name: Get distinct manager logs
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        distinct: true
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:test_distinct_key

---
test_name: GET /manager/logs/summary

stages:

  # GET /manager/logs/summary
  - name: Request
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/logs/summary"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0

---
test_name: GET /manager/api/config

stages:

  # GET /manager/api/config
  - name: Get API configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/api/config"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - node_name: !anystr
              node_api_config:
                host: !anylist
                port: !anyint
                https:
                  enabled: !anybool
                  key: !anystr
                  cert: !anystr
                  use_ca: !anybool
                  ca: !anystr
                  ssl_protocol: !anystr
                  ssl_ciphers: !anystr
                logs:
                  level: !anystr
                  max_size:
                    enabled: !anybool
                    size: !anystr
                cors:
                  enabled: !anybool
                  source_route: !anystr
                  expose_headers: !anystr
                  allow_headers: !anystr
                  allow_credentials: !anybool
                access:
                  max_login_attempts: !anyint
                  block_time: !anyint
                  max_request_per_minute: !anyint
                drop_privileges: !anybool
                authentication_pool_size: !anyint
                upload_configuration:
                  remote_commands:
                    localfile:
                      allow: !anybool
                      exceptions: !anything
                    wodle_command:
                      allow: !anybool
                      exceptions: !anything
                  limits:
                    eps:
                      allow: !anybool
                  agents:
                    allow_higher_versions:
                      allow: !anybool
                  indexer:
                    allow: !anybool
          total_affected_items: 1
          total_failed_items: 0
          failed_items: []

---
test_name: GET /manager/configuration/validation (OK)

stages:

  # GET /manager/configuration/validation
  - name: Request validation
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/validation"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: !anystr
              status: 'OK'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /manager/configuration/{component}/{configuration}

stages:

  - name: Show the config of analysis/global in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/analysis/global"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - global: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of analysis/active_response in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/analysis/active_response"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - active-response: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: !anystr

  - name: Show the config of analysis/alerts in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/analysis/alerts"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - alerts: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of analysis/command in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/analysis/command"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - command: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of analysis/internal in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/analysis/internal"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - internal: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of auth in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/auth/auth"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - auth: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of com/internal in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/com/internal"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - internal: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of logcollector/localfile in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/logcollector/localfile"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - localfile: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of logcollector/socket in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/logcollector/socket"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0

  - name: Show the config of logcollector/internal in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/logcollector/internal"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - internal: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of monitor/internal in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/monitor/internal"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - monitord: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of monitor/reports in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/monitor/reports"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - reports: !anything
          failed_items: [ ]
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of request/remote in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/request/remote"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - remote: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of request/internal in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/request/internal"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - internal: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of syscheck/syscheck in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/syscheck/syscheck"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - syscheck: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of syscheck/rootcheck in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/syscheck/rootcheck"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - rootcheck: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of syscheck/internal in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/syscheck/internal"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - internal: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of wazuh-db/internal in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/wazuh-db/internal"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - wazuh_db:
                commit_time_max: !anyint
                commit_time_min: !anyint
                open_db_limit: !anyint
                worker_pool_size: !anyint
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Show the config of wazuh-db/wdb in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/wazuh-db/wdb"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: !anyint
        data:
          affected_items:
            - wdb:
                backup:
                  - database: !anystr
                    enabled: !anybool
                    interval: !anyint
                    max_files: !anyint
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show the config of wmodules/wmodules in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/wmodules/wmodules"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - wmodules: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

  - name: Try to show the invalid config of component in the manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration/agent/wmodules"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 400
      json:
        error: 1128

---
test_name: PUT /manager/analysisd/reload

stages:

  - name: Reload analysisd on master
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/analysisd/reload"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - name: 'manager'
              msg: !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: PUT /manager/configuration

stages:

  # PUT /manager/configuration
  - name: Upload a valid configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: PUT
      data: "{valid_ossec_conf:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - 'manager'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        error: 0

  # GET /manager/configuration/
  - name: Ensure the new config has been applied by checking a field
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        section: "alerts"
        field: "log_alert_level"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - alerts:
                log_alert_level: '300'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0


  # PUT /manager/configuration
  - name: Try to upload an invalid configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: PUT
      data: "{invalid_ossec_conf:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      status_code: 200
      json:
        error: 1
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1113
              id:
                - 'manager'
          total_affected_items: 0
          total_failed_items: 1

  # PUT /manager/configuration
  - name: Try to upload an empty configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: PUT
      data: "{invalid_ossec_conf:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      status_code: 200
      json:
        error: 1
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1113
              id:
                - 'manager'
          total_affected_items: 0
          total_failed_items: 1

  - name: Try to upload an invalid xml
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: PUT
      data: "{invalid_ossec_xml:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      status_code: 200
      json:
        error: 1
        data:
          affected_items: []
          failed_items:
            - error:
                code: 1908
              id:
                - 'manager'
          total_affected_items: 0
          total_failed_items: 1

  # PUT /manager/configuration
  - name: Try to upload an invalid configuration with an invalid content-type
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: PUT
      data: "{invalid_ossec_conf:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/json
    response:
      status_code: 415
      json:
        title: Unsupported Media Type

  # GET /manager/configuration/
  - name: Ensure the config didn't change
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        section: "alerts"
        field: "log_alert_level"
    response:
      status_code: 200
      json:
        error: 0
        data:
          affected_items:
            - alerts:
                log_alert_level: '300'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0

---
test_name: GET /manager/version/check with update_check disabled

stages:

  - name: Get wazuh version
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      save:
        json:
          wazuh_version: data.api_version

  - name: Get available updates
    request:
      verify: false
      url: "{protocol:s}://{host:s}:{port:d}/manager/version/check"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:validate_update_check_response
        extra_kwargs:
          current_version: "v{wazuh_version:s}"
          update_check: false

  - name: Get available updates with force option
    request:
      verify: false
      url: "{protocol:s}://{host:s}:{port:d}/manager/version/check"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force_query: "true"
    response:
      status_code: 200
      verify_response_with:
        function: tavern_utils:validate_update_check_response
        extra_kwargs:
          current_version: "v{wazuh_version:s}"
          update_check: false

---
test_name: GET /manager/version/check with update_check enabled

stages:
  - name: Get wazuh version
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 200
      save:
        json:
          wazuh_version: data.api_version
  
  - name: Enable update check
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: PUT
      data: "{valid_ossec_conf_with_update_check_enabled:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - 'manager'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        error: 0

  - name: Restart manager to apply the configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 202
      json:
        error: 0
        data:
          affected_items:
            - !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
    delay_after: !float "{restart_delay}"

  - name: Get available updates
    request:
      verify: false
      url: "{protocol:s}://{host:s}:{port:d}/manager/version/check"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code:
        - 200
        - 500
      verify_response_with:
        function: tavern_utils:validate_update_check_response
        extra_kwargs:
          current_version: "v{wazuh_version:s}"
          update_check: true

  - name: Get available updates with force option
    request:
      verify: false
      url: "{protocol:s}://{host:s}:{port:d}/manager/version/check"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force_query: "true"
    response:
      status_code:
        - 200
        - 500
      verify_response_with:
        function: tavern_utils:validate_update_check_response
        extra_kwargs:
          current_version: "v{wazuh_version:s}"
          update_check: true

---
test_name: GET /manager/version/check with update_check service error

stages:

  - name: Set an invalid CTI url
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/configuration"
      method: PUT
      data: "{ossec_conf_with_invalid_cti_url:s}"
      headers:
        Authorization: "Bearer {test_login_token}"
        content-type: application/octet-stream
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - 'manager'
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        error: 0

  - name: Restart manager to apply the configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 202
      json:
        error: 0
        data:
          affected_items:
            - !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
    delay_after: !float "{restart_delay}"

  - name: Try to get available updates
    request:
      verify: false
      url: "{protocol:s}://{host:s}:{port:d}/manager/version/check"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 500
      json:
        error: 2100

  - name: Try to get available updates with force option
    request:
      verify: false
      url: "{protocol:s}://{host:s}:{port:d}/manager/version/check"
      method: GET
      headers:
        Authorization: "Bearer {test_login_token}"
      params:
        force_query: "true"
    response:
      status_code: 500
      json:
        error: 2100

---
test_name: PUT /manager/restart

stages:

  # PUT /manager/restart
  - name: Restart manager
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/manager/restart"
      method: PUT
      headers:
        Authorization: "Bearer {test_login_token}"
    response:
      status_code: 202
      json:
        error: 0
        data:
          affected_items:
            - !anystr
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
