from unittest.mock import MagicMock, patch

import pytest
from fastapi import status
from fastapi.responses import JSONResponse

from comms_api.routers.vulnerability import post_scan_request
from comms_api.routers.exceptions import HTTPError
from wazuh.core.engine.models.base import ErrorResponse
from wazuh.core.engine.models.vulnerability import ScanRequest, ScanResponse, Type
from wazuh.core.exception import WazuhEngineError

scan_request = ScanRequest(
    type=Type.PACKAGE_LIST,
    packages=[],
)


@pytest.mark.asyncio
@pytest.mark.parametrize('return_value', [
    ScanResponse([]),
    None
])
@patch('comms_api.routers.vulnerability.request_vulnerability_scan')
async def test_post_scan_request(request_vulnerability_scan_mock, return_value):
    """Verify that the `post_scan_request` handler works as expected."""
    request_vulnerability_scan_mock.return_value = return_value

    response = await post_scan_request(scan_request)

    request_vulnerability_scan_mock.assert_called_once_with(scan_request)
    if return_value is None:
        assert response.status_code == status.HTTP_200_OK
    elif isinstance(response, ErrorResponse):
        assert response == JSONResponse(content=response.error, status_code=response.code)
    else:
        assert isinstance(response, ScanResponse)


@pytest.mark.asyncio
@patch('comms_api.routers.vulnerability.request_vulnerability_scan')
async def test_post_scan_request_error_response(request_vulnerability_scan_mock):
    """Verify that the `post_scan_request` handler works as expected when the response from the engine is an error."""
    error_response = ErrorResponse(error=['Service Unavailable'], code=500)
    request_vulnerability_scan_mock.return_value = error_response

    with pytest.raises(HTTPError, match=fr'{error_response.code}: {error_response.error[0]}'):
        await post_scan_request(scan_request)


@pytest.mark.asyncio
async def test_post_scan_request_invalid_request():
    """Verify that the `post_scan_request` handler works as expected when the request body misses fields."""
    error_message = 'Full scan requires all fields to be set'
    with pytest.raises(HTTPError, match=fr'{status.HTTP_400_BAD_REQUEST}: {error_message}'):
        await post_scan_request(ScanRequest(type=Type.FULL_SCAN, packages=[]))


@pytest.mark.asyncio
async def test_post_scan_request_ko():
    """Verify that the `post_scan_request` handler catches exceptions successfully."""
    exception = WazuhEngineError(2802)

    with patch('comms_api.routers.vulnerability.request_vulnerability_scan', MagicMock(side_effect=exception)):
        with pytest.raises(HTTPError, match=fr'{exception.code}: {exception.message}'):
            _ = await post_scan_request(scan_request)
